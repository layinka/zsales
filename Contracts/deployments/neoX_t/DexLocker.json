{
  "address": "0xCbBAFCE8575ed84ec5219e72E48Eb6a7ad2234c5",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        }
      ],
      "name": "AddressEmptyCode",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "AddressInsufficientBalance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DLOnlyDeployer",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DLReleaseBeforeTime",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ERC1167FailedCreateClone",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FailedInnerCall",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "InvalidDeployerAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidInitialization",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "InvalidOwnerAddress",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "InvalidSalesTokenAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotEnoughCoinsForRaisedFundsLock",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotInitializing",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "SafeERC20FailedOperation",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TokenCannotBeAddressZero",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "lockerAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalTokensLocked",
          "type": "uint256"
        }
      ],
      "name": "ERC20LockCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "version",
          "type": "uint64"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "getOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "purchaseToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "deployer",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "purchasedCoinVestingVaultImplementationAddress",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenOwner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "totalTokens",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "firstReleasePercent",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "firstReleaseDays",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "subsequentReleasePercent",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "subsequentReleaseDays",
          "type": "uint256"
        }
      ],
      "name": "lockERC20",
      "outputs": [
        {
          "internalType": "address",
          "name": "lockerAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tokenDecimals",
          "type": "uint256"
        }
      ],
      "name": "normalizeTokenAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "raisedFundsPercent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "raisedFundsVaultAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "releaseCoinVaultETH",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "releaseTeamTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[2]",
          "name": "raisedFunds",
          "type": "uint256[2]"
        },
        {
          "internalType": "uint256[2]",
          "name": "saleAndDexRates",
          "type": "uint256[2]"
        },
        {
          "internalType": "bool",
          "name": "useTeamTokenVesting",
          "type": "bool"
        },
        {
          "internalType": "uint256[5]",
          "name": "teamTokenVestingDetails",
          "type": "uint256[5]"
        },
        {
          "internalType": "bool",
          "name": "useRaisedFundsVesting",
          "type": "bool"
        },
        {
          "internalType": "uint256[3]",
          "name": "raisedFundVestingDetails",
          "type": "uint256[3]"
        }
      ],
      "name": "setupLock",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_raisedAmountAfterAllDeductions",
          "type": "uint256"
        }
      ],
      "name": "startRaisedFundsLock",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokenLockerAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xe718a3c818690d766904a2e84008a23ad39469b5a14cac802fef20e7648a7fa6",
  "receipt": {
    "to": null,
    "from": "0x4ABda0097D7545dE58608F7E36e0C1cac68b4943",
    "contractAddress": "0xCbBAFCE8575ed84ec5219e72E48Eb6a7ad2234c5",
    "transactionIndex": 0,
    "gasUsed": "1662162",
    "logsBloom": "0x00000000000000000000800000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000800000000000000000000000080000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0xd821e64637cc3afa2fe8b63a6d8d2eb82618cc1d2f132cd2c3231082d7ced9d0",
    "transactionHash": "0xe718a3c818690d766904a2e84008a23ad39469b5a14cac802fef20e7648a7fa6",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 1218539,
        "transactionHash": "0xe718a3c818690d766904a2e84008a23ad39469b5a14cac802fef20e7648a7fa6",
        "address": "0xCbBAFCE8575ed84ec5219e72E48Eb6a7ad2234c5",
        "topics": [
          "0xc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2"
        ],
        "data": "0x000000000000000000000000000000000000000000000000ffffffffffffffff",
        "logIndex": 0,
        "blockHash": "0xd821e64637cc3afa2fe8b63a6d8d2eb82618cc1d2f132cd2c3231082d7ced9d0"
      }
    ],
    "blockNumber": 1218539,
    "cumulativeGasUsed": "1662162",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "fbbe5845a0614c5aaec8ea6d5916a915",
  "metadata": "{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"AddressEmptyCode\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AddressInsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DLOnlyDeployer\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DLReleaseBeforeTime\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC1167FailedCreateClone\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedInnerCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"InvalidDeployerAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"InvalidOwnerAddress\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"InvalidSalesTokenAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotEnoughCoinsForRaisedFundsLock\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInitializing\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SafeERC20FailedOperation\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TokenCannotBeAddressZero\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"lockerAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalTokensLocked\",\"type\":\"uint256\"}],\"name\":\"ERC20LockCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"version\",\"type\":\"uint64\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"purchaseToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"deployer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"purchasedCoinVestingVaultImplementationAddress\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"firstReleasePercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"firstReleaseDays\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"subsequentReleasePercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"subsequentReleaseDays\",\"type\":\"uint256\"}],\"name\":\"lockERC20\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"lockerAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenDecimals\",\"type\":\"uint256\"}],\"name\":\"normalizeTokenAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"raisedFundsPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"raisedFundsVaultAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"releaseCoinVaultETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"releaseTeamTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[2]\",\"name\":\"raisedFunds\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"saleAndDexRates\",\"type\":\"uint256[2]\"},{\"internalType\":\"bool\",\"name\":\"useTeamTokenVesting\",\"type\":\"bool\"},{\"internalType\":\"uint256[5]\",\"name\":\"teamTokenVestingDetails\",\"type\":\"uint256[5]\"},{\"internalType\":\"bool\",\"name\":\"useRaisedFundsVesting\",\"type\":\"bool\"},{\"internalType\":\"uint256[3]\",\"name\":\"raisedFundVestingDetails\",\"type\":\"uint256[3]\"}],\"name\":\"setupLock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_raisedAmountAfterAllDeductions\",\"type\":\"uint256\"}],\"name\":\"startRaisedFundsLock\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenLockerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"errors\":{\"AddressEmptyCode(address)\":[{\"details\":\"There's no code at `target` (it is not a contract).\"}],\"AddressInsufficientBalance(address)\":[{\"details\":\"The ETH balance of the account is not enough to perform the operation.\"}],\"ERC1167FailedCreateClone()\":[{\"details\":\"A clone instance deployment failed.\"}],\"FailedInnerCall()\":[{\"details\":\"A call to an address target failed. The target may have reverted.\"}],\"InvalidInitialization()\":[{\"details\":\"The contract is already initialized.\"}],\"NotInitializing()\":[{\"details\":\"The contract is not initializing.\"}],\"SafeERC20FailedOperation(address)\":[{\"details\":\"An operation with an ERC20 token failed.\"}]},\"events\":{\"Initialized(uint64)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"}},\"kind\":\"dev\",\"methods\":{\"constructor\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor\"},\"getOwner()\":{\"returns\":{\"_0\":\"the owner of the locked funds\"}}},\"title\":\"DexLocker\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"constructor\":{\"notice\":\"Do not leave an implementation contract uninitialized. An uninitialized implementation contract can be taken over by an attacker, which may impact the proxy.  To prevent the implementation contract from being used, you should invoke the _disableInitializers function in the constructor to automatically lock it when it is deployed\"},\"normalizeTokenAmount(uint256,uint256)\":{\"notice\":\"Normalization function that adjusts token amounts to a common decimal base (18 decimals in this case).  This function either scales up or scales down the token amount based on the number of decimals the token uses, ensuring the final amount will be always displayed with 18 decimals.  Of course this can result in a minor truncation if tokens >18 decimals are being used, this must be considered\"},\"releaseCoinVaultETH()\":{\"notice\":\"Transfers ETH back to the owner\"},\"releaseTeamTokens()\":{\"notice\":\"Transfers tokens held by Lock to owner.\"},\"startRaisedFundsLock(uint256)\":{\"notice\":\"Raised funds\"}},\"notice\":\"Manages vesting for tokens raised in sales campaigns, LP TOkens and Team Vesting tokens\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Lockers/DexLocker.sol\":\"DexLocker\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2000},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/proxy/Clones.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/Clones.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\\n * deploying minimal proxy contracts, also known as \\\"clones\\\".\\n *\\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\\n *\\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\\n * deterministic method.\\n */\\nlibrary Clones {\\n    /**\\n     * @dev A clone instance deployment failed.\\n     */\\n    error ERC1167FailedCreateClone();\\n\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create opcode, which should never revert.\\n     */\\n    function clone(address implementation) internal returns (address instance) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Cleans the upper 96 bits of the `implementation` word, then packs the first 3 bytes\\n            // of the `implementation` address with the bytecode before the address.\\n            mstore(0x00, or(shr(0xe8, shl(0x60, implementation)), 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000))\\n            // Packs the remaining 17 bytes of `implementation` with the bytecode after the address.\\n            mstore(0x20, or(shl(0x78, implementation), 0x5af43d82803e903d91602b57fd5bf3))\\n            instance := create(0, 0x09, 0x37)\\n        }\\n        if (instance == address(0)) {\\n            revert ERC1167FailedCreateClone();\\n        }\\n    }\\n\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\\n     * the clones cannot be deployed twice at the same address.\\n     */\\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Cleans the upper 96 bits of the `implementation` word, then packs the first 3 bytes\\n            // of the `implementation` address with the bytecode before the address.\\n            mstore(0x00, or(shr(0xe8, shl(0x60, implementation)), 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000))\\n            // Packs the remaining 17 bytes of `implementation` with the bytecode after the address.\\n            mstore(0x20, or(shl(0x78, implementation), 0x5af43d82803e903d91602b57fd5bf3))\\n            instance := create2(0, 0x09, 0x37, salt)\\n        }\\n        if (instance == address(0)) {\\n            revert ERC1167FailedCreateClone();\\n        }\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(\\n        address implementation,\\n        bytes32 salt,\\n        address deployer\\n    ) internal pure returns (address predicted) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(add(ptr, 0x38), deployer)\\n            mstore(add(ptr, 0x24), 0x5af43d82803e903d91602b57fd5bf3ff)\\n            mstore(add(ptr, 0x14), implementation)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73)\\n            mstore(add(ptr, 0x58), salt)\\n            mstore(add(ptr, 0x78), keccak256(add(ptr, 0x0c), 0x37))\\n            predicted := keccak256(add(ptr, 0x43), 0x55)\\n        }\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(\\n        address implementation,\\n        bytes32 salt\\n    ) internal view returns (address predicted) {\\n        return predictDeterministicAddress(implementation, salt, address(this));\\n    }\\n}\\n\",\"keccak256\":\"0xd18408af8a91bedb3d56343eeb9b30eb852e6dea93a5e2d5c6db9ca4cb905155\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Storage of the initializable contract.\\n     *\\n     * It's implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions\\n     * when using with upgradeable contracts.\\n     *\\n     * @custom:storage-location erc7201:openzeppelin.storage.Initializable\\n     */\\n    struct InitializableStorage {\\n        /**\\n         * @dev Indicates that the contract has been initialized.\\n         */\\n        uint64 _initialized;\\n        /**\\n         * @dev Indicates that the contract is in the process of being initialized.\\n         */\\n        bool _initializing;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Initializable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant INITIALIZABLE_STORAGE = 0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00;\\n\\n    /**\\n     * @dev The contract is already initialized.\\n     */\\n    error InvalidInitialization();\\n\\n    /**\\n     * @dev The contract is not initializing.\\n     */\\n    error NotInitializing();\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint64 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that in the context of a constructor an `initializer` may be invoked any\\n     * number of times. This behavior in the constructor can be useful during testing and is not expected to be used in\\n     * production.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        // Cache values to avoid duplicated sloads\\n        bool isTopLevelCall = !$._initializing;\\n        uint64 initialized = $._initialized;\\n\\n        // Allowed calls:\\n        // - initialSetup: the contract is not in the initializing state and no previous version was\\n        //                 initialized\\n        // - construction: the contract is initialized at version 1 (no reininitialization) and the\\n        //                 current contract is just being deployed\\n        bool initialSetup = initialized == 0 && isTopLevelCall;\\n        bool construction = initialized == 1 && address(this).code.length == 0;\\n\\n        if (!initialSetup && !construction) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = 1;\\n        if (isTopLevelCall) {\\n            $._initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            $._initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: Setting the version to 2**64 - 1 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint64 version) {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing || $._initialized >= version) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = version;\\n        $._initializing = true;\\n        _;\\n        $._initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        _checkInitializing();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}.\\n     */\\n    function _checkInitializing() internal view virtual {\\n        if (!_isInitializing()) {\\n            revert NotInitializing();\\n        }\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing) {\\n            revert InvalidInitialization();\\n        }\\n        if ($._initialized != type(uint64).max) {\\n            $._initialized = type(uint64).max;\\n            emit Initialized(type(uint64).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint64) {\\n        return _getInitializableStorage()._initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _getInitializableStorage()._initializing;\\n    }\\n\\n    /**\\n     * @dev Returns a pointer to the storage namespace.\\n     */\\n    // solhint-disable-next-line var-name-mixedcase\\n    function _getInitializableStorage() private pure returns (InitializableStorage storage $) {\\n        assembly {\\n            $.slot := INITIALIZABLE_STORAGE\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x631188737069917d2f909d29ce62c4d48611d326686ba6683e26b72a23bfac0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x6008dabfe393240d73d7dd7688033f72740d570aa422254d29a7dce8568f3aff\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\nimport {IERC20Permit} from \\\"../extensions/IERC20Permit.sol\\\";\\nimport {Address} from \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev An operation with an ERC20 token failed.\\n     */\\n    error SafeERC20FailedOperation(address token);\\n\\n    /**\\n     * @dev Indicates a failed `decreaseAllowance` request.\\n     */\\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        forceApprove(token, spender, oldAllowance + value);\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\\n     * value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\\n        unchecked {\\n            uint256 currentAllowance = token.allowance(address(this), spender);\\n            if (currentAllowance < requestedDecrease) {\\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\\n            }\\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data);\\n        if (returndata.length != 0 && !abi.decode(returndata, (bool))) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return success && (returndata.length == 0 || abi.decode(returndata, (bool))) && address(token).code.length > 0;\\n    }\\n}\\n\",\"keccak256\":\"0x37bb49513c49c87c4642a891b13b63571bc87013dde806617aa1efb54605f386\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error AddressInsufficientBalance(address account);\\n\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedInnerCall();\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert FailedInnerCall();\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {FailedInnerCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\\n     * unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {FailedInnerCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert FailedInnerCall();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaf28a975a78550e45f65e559a3ad6a5ad43b9b8a37366999abd1b7084eb70721\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    constructor() {\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if (_status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xf980daa263b661ab8ddee7d4fd833c7da7e7995e2c359ff1f17e67e4112f2236\",\"license\":\"MIT\"},\"contracts/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\n\\r\\npragma solidity ^0.8.27;\\r\\n\\r\\nerror OnlyDeployer();\\r\\nerror NoToken();\\r\\nerror NoZeroTokenAddress();\\r\\nerror NoEthForLiquidity();\\r\\nerror NoTokenBalanceForLiquidity();\\r\\nerror NoPurchaseTokensForLiquidity();\\r\\nerror NoTokensForLiquidity();\\r\\nerror RouterApprovalFailed();\\r\\n\\r\\nerror AlreadyReachedSoftCap(uint cap);\\r\\n\\r\\nerror LiquiditySetupAlreadyDone();\\r\\n\\r\\nerror AddLiquidityNotCalledYet();\\r\\nerror NoLPTokensToRelease();\\r\\nerror NoTokensToRelease();\\r\\nerror NoPurchaseTokensToRelease();\\r\\nerror CurrentTimeIsBeforeRelease();\\r\\n\\r\\nerror SaleEndTimeBeforeStartTime();\\r\\nerror LiquidityAboveLimit(uint limit);\\r\\n\\r\\nerror UpdateAfterSaleStartTime();\\r\\n\\r\\nerror TierCapTooLow(uint limit);\\r\\nerror TierCapsExceedHardCap();\\r\\nerror TierOneCapExceedsHardCap();\\r\\nerror TierTwoCapExceedsHardCap();\\r\\nerror MinAllocationOutOfRange();\\r\\nerror TierOneMaxAllocationOutOfRange();\\r\\nerror TierTwoMaxAllocationOutOfRange();\\r\\nerror HardCapGreaterThanX4OfSoftCap();\\r\\n\\r\\nerror NotOwner();\\r\\nerror NotAdmin();\\r\\nerror CannotCancelAfterSaleStartTime();\\r\\nerror PostponeBeforeSaleStartTime();\\r\\nerror NewDateLessThanOldDate();\\r\\nerror EndDateLessThanStartTime();\\r\\n\\r\\nerror AlterWhitelistingAfterSaleStartTime();\\r\\n\\r\\nerror KYCAfterSaleStartTime();\\r\\nerror AuditAfterSaleStartTime();\\r\\n\\r\\nerror SaleCancelled();\\r\\nerror SaleFailed();\\r\\nerror NotTokenSubmitted();\\r\\nerror SoldOutError();\\r\\nerror ClosedSale();\\r\\nerror ExceedMaxCap();\\r\\nerror LessThanMinBuy();\\r\\n\\r\\n\\r\\nerror NotInTier2Whitelist();\\r\\nerror ExceedTierTwoMaxCap();\\r\\nerror ExceedTierTwoUserLimit();\\r\\nerror NotInTier0();\\r\\nerror ExceedTierZeroMaxCap();\\r\\nerror ExceedTierZeroUserLimit();\\r\\nerror NotInTier1();\\r\\nerror ExceedTierOneMaxCap();\\r\\nerror ExceedTierOneUserLimit();\\r\\nerror SaleNotStarted();\\r\\n\\r\\nerror OwnersCannotWithdraw();\\r\\nerror OngoingSales();\\r\\nerror NoCoinsToClaim();\\r\\nerror NoCoin();\\r\\n\\r\\nerror CampaignFailedOrCancelled();\\r\\nerror CampaignCancelled();\\r\\n\\r\\nerror NotEndDate();\\r\\nerror NoReachSoftCap();\\r\\n\\r\\nerror RequireCancelorFail();\\r\\nerror NoTokens();\\r\\n\\r\\nerror NoSoldOutOrEndDate();\\r\\n\\r\\nerror OnlyDecimals18AndBelow();\\r\\n\\r\\nerror TransferDExLockerFailed();\\r\\n\\r\\nerror OwnerHasWithdrawnAlready();\\r\\n\\r\\n\\r\\nerror InvalidDexRouterAddress(address addr);\\r\\nerror InvalidSalesTokenAddress(address addr);\\r\\nerror InvalidPurchaseTokenAddress(address addr);\\r\\nerror InvalidOwnerAddress(address addr);\\r\\nerror InvalidDeployerAddress(address addr);\",\"keccak256\":\"0x9ee1dfd5f0c55d37560edeeaee02a6003092130f0ce085560c52f24f53cd3e3e\",\"license\":\"UNLICENSED\"},\"contracts/Lockers/DexLocker.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.28;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\r\\n\\r\\nimport \\\"./VestSchedule.sol\\\";\\r\\nimport \\\"./TokenLocker.sol\\\";\\r\\nimport \\\"../Errors.sol\\\";\\r\\n\\r\\nimport \\\"./PurchasedCoinVestingVault.sol\\\";\\r\\n// import \\\"./LiquidityLocker.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/proxy/Clones.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\r\\nimport \\\"hardhat/console.sol\\\";\\r\\n\\r\\nerror NotEnoughCoinsForRaisedFundsLock();\\r\\nerror LiquidityAmountTransferFailed();\\r\\n\\r\\n/// @title IDexLocker\\r\\n/// @notice Manages liquidity and vesting for tokens raised in sales campaigns\\r\\ninterface IDexLocker {\\r\\n    function initialize(\\r\\n        // address dexRouterAddress,\\r\\n        address token,\\r\\n        address purchaseToken,\\r\\n        address deployer,\\r\\n        address owner,\\r\\n        address purchasedCoinVestingVaultImplementationAddress\\r\\n    ) external;\\r\\n\\r\\n    function setupLock(\\r\\n        \\r\\n        // uint minRaisedFunds,uint maxRaisedFunds, \\r\\n        uint[2] calldata raisedFunds,\\r\\n        // bool isFairLaunch, \\r\\n        // uint256 saleListPrice,  uint256 dexListPrice, \\r\\n        uint256[2] calldata saleAndDexRates,\\r\\n\\r\\n        bool useTeamTokenVesting, \\r\\n        uint256[5] calldata teamTokenVestingDetails, \\r\\n        bool useRaisedFundsVesting, \\r\\n        uint256[3] calldata raisedFundVestingDetails \\r\\n    ) external;\\r\\n\\r\\n     \\r\\n     /// @dev If campaign Locks raised fund, lock the calculated amount\\r\\n     ///\\r\\n    function startRaisedFundsLock(uint256 raisedAmountAfterAllDeductions) external payable;\\r\\n\\r\\n    function lockERC20(address tokenAddress,address tokenOwner, uint totalTokens, uint firstReleasePercent, uint firstReleaseDays, \\r\\n        uint subsequentReleasePercent, uint subsequentReleaseDays ) external returns(address lockerAddress);\\r\\n\\r\\n    function getOwner() external view returns (address);\\r\\n\\r\\n    function releaseTeamTokens() external;\\r\\n\\r\\n    function releaseCoinVaultETH() external;\\r\\n\\r\\n    function raisedFundsVaultAddress() external view returns (address);\\r\\n\\r\\n    function raisedFundsPercent() external view returns (uint);\\r\\n\\r\\n    function tokenLockerAddress() external view returns (address);\\r\\n\\r\\n    // function liquidityLockerAddress() external view returns (address);\\r\\n\\r\\n    // function totalTokensExpectedToBeLocked() external view returns(uint);\\r\\n}\\r\\n\\r\\n/// @title DexLocker\\r\\n/// @notice Manages vesting for tokens raised in sales campaigns, LP TOkens and Team Vesting tokens\\r\\ncontract DexLocker is Initializable, IDexLocker{\\r\\n    error DLOnlyDeployer();\\r\\n    error DLReleaseBeforeTime();\\r\\n    error TokenCannotBeAddressZero();\\r\\n    using SafeERC20 for IERC20;\\r\\n\\r\\n    event ERC20LockCreated(address indexed lockerAddress, address indexed token, address indexed owner, uint totalTokensLocked);\\r\\n    \\r\\n    address private _owner;\\r\\n\\r\\n    address private _deployer;\\r\\n\\r\\n    uint256 constant private MAX_INT = 2**256 - 1;\\r\\n\\r\\n    // uint public totalTokensExpectedToBeLocked;\\r\\n\\r\\n    address private _token;\\r\\n    address private _purchaseToken;\\r\\n\\r\\n    TokenLocker private _teamTokensLocker;\\r\\n    PurchasedCoinVestingVault private _purchasedCoinVestingVault;\\r\\n    // LiquidityLocker private _liquidityLocker;\\r\\n    // uint private _liquidityPercentOfRaisedFunds;\\r\\n\\r\\n    /**\\r\\n    Maps to \\r\\n    \\r\\n        uint256 _percentOfRaisedFundsToLock,\\r\\n        uint256 _vestingDurationInDays,\\r\\n        uint256 _vestingCliffInDays\\r\\n     */\\r\\n    uint256[3] _raisedFundVestingDetails;\\r\\n    bool _useRaisedFundsVesting;\\r\\n\\r\\n    address  _purchasedCoinVestingVaultImplementationAddress;\\r\\n\\r\\n    ///Do not leave an implementation contract uninitialized. An uninitialized implementation contract can be taken over by an attacker, which may impact the proxy. \\r\\n    /// To prevent the implementation contract from being used, you should invoke the _disableInitializers function in the constructor to automatically lock it when it is deployed\\r\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\r\\n    constructor() {\\r\\n        _disableInitializers();\\r\\n    }\\r\\n\\r\\n    function initialize( address token, address purchaseToken,address deployer,address owner, address purchasedCoinVestingVaultImplementationAddress ) public initializer  {\\r\\n        require(token != address(0), InvalidSalesTokenAddress(token));\\r\\n        require(deployer != address(0), InvalidDeployerAddress(deployer));\\r\\n        require(owner != address(0), InvalidOwnerAddress(owner));\\r\\n\\r\\n        \\r\\n        _deployer = deployer; //msg.sender;\\r\\n        \\r\\n        _owner = owner;\\r\\n        _token = token; \\r\\n        _purchaseToken=purchaseToken;\\r\\n        _purchasedCoinVestingVaultImplementationAddress=purchasedCoinVestingVaultImplementationAddress;       \\r\\n    }\\r\\n\\r\\n    \\r\\n    function setupLock(\\r\\n        // uint minRaisedFunds,uint maxRaisedFunds, \\r\\n        uint[2] calldata raisedFunds,  \\r\\n        // bool isFairLaunch,      \\r\\n        // uint256 saleListPrice,  uint256 dexListPrice, \\r\\n        uint256[2] calldata saleAndDexRates,\\r\\n        bool useTeamTokenVesting, \\r\\n        uint256[5] calldata teamTokenVestingDetails, \\r\\n        bool useRaisedFundsVesting, \\r\\n        uint256[3] calldata raisedFundVestingDetails \\r\\n    ) public {\\r\\n        \\r\\n        require(msg.sender == _deployer, DLOnlyDeployer());        \\r\\n\\r\\n        // totalTokensExpectedToBeLocked = 0;\\r\\n        \\r\\n        // if(!isFairLaunch){\\r\\n        //     //Sold tokens\\r\\n        //     totalTokensExpectedToBeLocked += saleAndDexRates[0] * raisedFunds[1];\\r\\n        // }\\r\\n        \\r\\n        if(useTeamTokenVesting){\\r\\n            \\r\\n            _teamTokensLocker = new TokenLocker(_token, _owner,teamTokenVestingDetails[0],teamTokenVestingDetails[1],teamTokenVestingDetails[2],teamTokenVestingDetails[3],teamTokenVestingDetails[4] );\\r\\n            //totalTokensExpectedToBeLocked += normalizeTokenAmount(teamTokenVestingDetails[0], IERC20Metadata(_token).decimals());\\r\\n        }\\r\\n        \\r\\n\\r\\n        _useRaisedFundsVesting=useRaisedFundsVesting;\\r\\n        if(_useRaisedFundsVesting){\\r\\n            for (uint8 i=0; i < 3 ; i++) {\\r\\n                _raisedFundVestingDetails[i] = raisedFundVestingDetails[i]; \\r\\n            }\\r\\n        }\\r\\n        \\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Raised funds\\r\\n     */\\r\\n    function startRaisedFundsLock(uint256 _raisedAmountAfterAllDeductions) public payable {\\r\\n        require(msg.sender == _deployer, DLOnlyDeployer());\\r\\n        \\r\\n        if(_useRaisedFundsVesting){\\r\\n           if(_purchaseToken==address(0) && msg.value< _raisedFundVestingDetails[0] * _raisedAmountAfterAllDeductions /10000 ) revert NotEnoughCoinsForRaisedFundsLock();\\r\\n            address newCoinVaultCloneAddress = Clones.clone(_purchasedCoinVestingVaultImplementationAddress);\\r\\n            _purchasedCoinVestingVault = PurchasedCoinVestingVault(payable(newCoinVaultCloneAddress) );\\r\\n            \\r\\n            _purchasedCoinVestingVault.initialize(_owner,block.timestamp, _raisedFundVestingDetails[0] * _raisedAmountAfterAllDeductions /10000, _raisedFundVestingDetails[1],_raisedFundVestingDetails[2], _purchaseToken);\\r\\n            \\r\\n            //Send coins\\r\\n            if(_purchaseToken==address(0)){\\r\\n                payable(_purchasedCoinVestingVault).transfer(_raisedFundVestingDetails[0] * _raisedAmountAfterAllDeductions /10000);\\r\\n            }else{\\r\\n                IERC20(_purchaseToken).safeTransfer(address(_purchasedCoinVestingVault),_raisedFundVestingDetails[0] * _raisedAmountAfterAllDeductions /10000);\\r\\n                //_purchasedCoinVestingVault.receiveTokens(_raisedFundVestingDetails[0] * _raisedAmountAfterAllDeductions /10000 );\\r\\n            }\\r\\n            \\r\\n        }\\r\\n        \\r\\n    }\\r\\n\\r\\n    receive() external payable {\\r\\n        // payable(_coinLocker).transfer(msg.value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Normalization function that adjusts token amounts to a common decimal base (18 decimals in this case). \\r\\n     * This function either scales up or scales down the token amount based on the number of decimals the token uses,\\r\\n     * ensuring the final amount will be always displayed with 18 decimals. \\r\\n     * Of course this can result in a minor truncation if tokens >18 decimals are being used, this must be considered\\r\\n     */\\r\\n    function normalizeTokenAmount(uint tokenAmount, uint tokenDecimals) public pure returns (uint) {\\r\\n        uint standardDecimal = 18;\\r\\n        if(tokenDecimals>standardDecimal){\\r\\n            return tokenAmount / (10 ** (tokenDecimals-standardDecimal));\\r\\n        }\\r\\n        else if(tokenDecimals< standardDecimal){\\r\\n            return tokenAmount * (10 ** (standardDecimal - tokenDecimals));\\r\\n        }\\r\\n        else{\\r\\n            return tokenAmount;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function lockERC20(address tokenAddress,address tokenOwner, uint totalTokens, uint firstReleasePercent, uint firstReleaseDays, \\r\\n        uint subsequentReleasePercent, uint subsequentReleaseDays ) public returns(address lockerAddress) {\\r\\n        require(tokenAddress!=address(0), TokenCannotBeAddressZero());\\r\\n        TokenLocker tokenLocker= new TokenLocker(tokenAddress, tokenOwner,totalTokens, firstReleasePercent,firstReleaseDays,subsequentReleasePercent,subsequentReleaseDays );\\r\\n        lockerAddress= address(tokenLocker);\\r\\n        emit ERC20LockCreated(lockerAddress,tokenAddress, tokenOwner ,totalTokens );\\r\\n    }\\r\\n  \\r\\n\\r\\n//    /**\\r\\n//      * @return the time when the LP tokens are released.\\r\\n//      */\\r\\n//     function getLiquidityReleaseTime() public view returns (uint256) {\\r\\n//         return _lpReleaseTime;\\r\\n//     }\\r\\n\\r\\n      /**\\r\\n     * @return the owner of the locked funds\\r\\n     */\\r\\n    function getOwner() public view returns (address) {\\r\\n        return _owner;\\r\\n    }\\r\\n    \\r\\n    // /**\\r\\n    //  * @notice Transfers tokens held by Lock to owner.\\r\\n    //    @dev Able to withdraw LP funds after release time \\r\\n    //  */\\r\\n    // function releaseLPTokens() public {\\r\\n    //     _liquidityLocker.releaseLPTokens(); \\r\\n    // }\\r\\n\\r\\n    /**\\r\\n     * @notice Transfers tokens held by Lock to owner.\\r\\n     */\\r\\n    function releaseTeamTokens() public {\\r\\n        _teamTokensLocker.release();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Transfers ETH back to the owner\\r\\n     */\\r\\n    function releaseCoinVaultETH() public {\\r\\n        _purchasedCoinVestingVault.claimVestedCoins();\\r\\n    }\\r\\n\\r\\n    function raisedFundsVaultAddress() public view returns (address) {\\r\\n        return address(_purchasedCoinVestingVault);\\r\\n    }\\r\\n\\r\\n    function raisedFundsPercent() public view returns (uint) {\\r\\n        return _raisedFundVestingDetails[0];\\r\\n    }\\r\\n\\r\\n    function tokenLockerAddress() public view returns (address) {\\r\\n        return address(_teamTokensLocker);\\r\\n    }\\r\\n\\r\\n    // function liquidityLockerAddress() public view returns (address) {\\r\\n    //     return address(_liquidityLocker);\\r\\n    // }\\r\\n}\",\"keccak256\":\"0xbcd40917a9f92ce39d494cd7cf187e2b430d7602b806e1df6645b7c9e69a8c1e\",\"license\":\"MIT\"},\"contracts/Lockers/PurchasedCoinVestingVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.26;\\r\\n\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\r\\n\\r\\n\\r\\n\\r\\nerror MustBeLessThanYears(string info,uint noOfYears);\\r\\nerror DurationLessThanCliff();\\r\\nerror DailyVestedAmountLessThanZero();\\r\\nerror OnlyOwner();\\r\\nerror AmountVestedLessThanZero();\\r\\n/**\\r\\n* Locks liquidity for Purchased Coins in a vested style. using Cliffs\\r\\n* @dev \\r\\n*/\\r\\ncontract PurchasedCoinVestingVault is Initializable, ReentrancyGuard  {\\r\\n    using SafeERC20 for IERC20;\\r\\n\\r\\n    uint256 constant public SECONDS_PER_DAY = 86400;\\r\\n\\r\\n    struct Grant {\\r\\n        uint256 startTime;\\r\\n        uint256 amount;\\r\\n        uint256 vestingDuration;\\r\\n        uint256 vestingCliff;\\r\\n        uint256 daysClaimed;\\r\\n        uint256 totalClaimed;\\r\\n    }\\r\\n    address private _owner;\\r\\n    address public _deployer;\\r\\n\\r\\n    address private _coinOrTokenAddress;\\r\\n    \\r\\n    event GrantTokensClaimed(address indexed recipient, uint256 amountClaimed);\\r\\n    \\r\\n    \\r\\n    Grant public grant;\\r\\n\\r\\n    ///Do not leave an implementation contract uninitialized. An uninitialized implementation contract can be taken over by an attacker, which may impact the proxy. \\r\\n    /// To prevent the implementation contract from being used, you should invoke the _disableInitializers function in the constructor to automatically lock it when it is deployed\\r\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\r\\n    constructor() {\\r\\n        _disableInitializers();\\r\\n    }\\r\\n    \\r\\n\\r\\n    function initialize(address vaultOwner, \\r\\n        uint256 _startTime,\\r\\n        uint256 _amount,\\r\\n        uint256 _vestingDurationInDays,\\r\\n        uint256 _vestingCliffInDays,\\r\\n        address coinOrTokenAddress) public initializer {\\r\\n\\r\\n        _deployer=msg.sender;\\r\\n        _owner=vaultOwner;\\r\\n        _coinOrTokenAddress=coinOrTokenAddress;\\r\\n        require(_vestingCliffInDays <= 10*365, MustBeLessThanYears('Cliff',10) );\\r\\n        require(_vestingDurationInDays <= 25*365, MustBeLessThanYears('Duration',25));\\r\\n        require(_vestingDurationInDays >= _vestingCliffInDays, DurationLessThanCliff());\\r\\n        \\r\\n        uint256 amountVestedPerDay = ((_amount * 100000000)/_vestingDurationInDays)/100000000;\\r\\n        require(amountVestedPerDay > 0, DailyVestedAmountLessThanZero());\\r\\n\\r\\n        // Transfer the grant tokens under the control of the vesting contract\\r\\n        // require(token.transferFrom(owner(), address(this), _amount), \\\"transfer failed\\\");\\r\\n\\r\\n        grant = Grant({\\r\\n            startTime: _startTime == 0 ? currentTime() : _startTime,\\r\\n            amount: _amount,\\r\\n            vestingDuration: _vestingDurationInDays,\\r\\n            vestingCliff: _vestingCliffInDays,\\r\\n            daysClaimed: 0,\\r\\n            totalClaimed: 0\\r\\n        });\\r\\n        \\r\\n        \\r\\n    }\\r\\n\\r\\n    receive() external payable {\\r\\n\\r\\n    }\\r\\n    // or\\r\\n    function receiveTokens(uint256 amount) public payable {\\r\\n      IERC20(_coinOrTokenAddress).safeTransferFrom(msg.sender, address(this), amount);\\r\\n    }\\r\\n\\r\\n    function owner() public view returns (address) {\\r\\n        \\r\\n        return _owner;\\r\\n\\r\\n    }\\r\\n\\r\\n    function transferOwnership(address newOwner) public  {\\r\\n        \\r\\n        require(msg.sender== _owner, OnlyOwner());\\r\\n        _owner=newOwner;\\r\\n\\r\\n    }\\r\\n    \\r\\n\\r\\n    /// @notice Calculate the vested and unclaimed months and tokens available for `_grantId` to claim\\r\\n    /// Due to rounding errors once grant duration is reached, returns the entire left grant amount\\r\\n    /// Returns (0, 0) if cliff has not been reached\\r\\n    function calculateGrantClaim() public view returns (uint256, uint256) {\\r\\n        \\r\\n\\r\\n        // For grants created with a future start date, that hasn't been reached, return 0, 0\\r\\n        if (currentTime() < grant.startTime) {\\r\\n            return (0, 0);\\r\\n        }\\r\\n\\r\\n        // Check cliff was reached\\r\\n        uint elapsedTime = currentTime()-grant.startTime;\\r\\n        uint elapsedDays = elapsedTime/SECONDS_PER_DAY;\\r\\n        \\r\\n        if (elapsedDays < grant.vestingCliff) {\\r\\n            return (elapsedDays, 0);\\r\\n        }\\r\\n\\r\\n        // If over vesting duration, all tokens vested\\r\\n        if (elapsedDays >= grant.vestingDuration) {\\r\\n            uint256 remainingGrant = grant.amount-grant.totalClaimed;\\r\\n            return (grant.vestingDuration, remainingGrant);\\r\\n        } else {\\r\\n            uint256 daysVested = elapsedDays-grant.daysClaimed;\\r\\n            uint256 amountVestedPerDay = grant.amount/ grant.vestingDuration;\\r\\n            uint256 amountVested = daysVested*amountVestedPerDay;\\r\\n            return (daysVested, amountVested);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice Allows a grant recipient to claim their vested tokens. Errors if no tokens have vested\\r\\n    /// It is advised recipients check they are entitled to claim via `calculateGrantClaim` before calling this\\r\\n    function claimVestedCoins() external nonReentrant {\\r\\n        uint256 daysVested;\\r\\n        uint256 amountVested;\\r\\n        address recipient=owner();\\r\\n\\r\\n        (daysVested, amountVested) = calculateGrantClaim();\\r\\n        require(amountVested > 0, AmountVestedLessThanZero());\\r\\n\\r\\n        \\r\\n        grant.daysClaimed = grant.daysClaimed+ daysVested;\\r\\n        grant.totalClaimed = grant.totalClaimed + amountVested;\\r\\n        \\r\\n        // token.safeTransfer(recipient, amountVested);\\r\\n        if(_coinOrTokenAddress==address(0)){\\r\\n            payable(recipient).transfer(amountVested);\\r\\n        }else{            \\r\\n            IERC20(_coinOrTokenAddress).safeTransfer(recipient, amountVested); \\r\\n        }\\r\\n        \\r\\n        emit GrantTokensClaimed(recipient, amountVested);\\r\\n    }\\r\\n\\r\\n    function currentTime() private view returns(uint256) {\\r\\n        return block.timestamp;\\r\\n    }\\r\\n\\r\\n    function tokensVestedPerDay() public view returns(uint256) {\\r\\n        \\r\\n        return grant.amount/ grant.vestingDuration;\\r\\n    }\\r\\n\\r\\n    \\r\\n\\r\\n}\",\"keccak256\":\"0xc7759e8d748cd8f681cfac91ded7075108ff7878b40812081317adf9265320ef\",\"license\":\"MIT\"},\"contracts/Lockers/TokenLocker.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.28;\\r\\n\\r\\n\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\r\\nimport \\\"./VestSchedule.sol\\\";\\r\\n\\r\\n\\r\\n/**\\r\\n* Locks ERC20 Tokens in a vested style.\\r\\n* @dev Percentages are specified normally, e.g. 50% is 50\\r\\n*/\\r\\ncontract TokenLocker is ReentrancyGuard{\\r\\n    error InvalidPercent();\\r\\n    error NotEnoughTokens();\\r\\n    error WrongToken();\\r\\n\\r\\n    using SafeERC20 for IERC20;\\r\\n    // using SafeMath for uint256;\\r\\n    \\r\\n\\r\\n   \\r\\n    address private _owner;\\r\\n\\r\\n    address private _deployer;    \\r\\n\\r\\n    address private _token;\\r\\n    \\r\\n\\r\\n    uint _cycles ;\\r\\n\\r\\n    event TokenReleased(address indexed token, uint256 amount);\\r\\n    \\r\\n    VestSchedule[] public tokenVestSchedule ;\\r\\n\\r\\n    constructor( address tokenAddress, address owner, \\r\\n        uint totalTokens, uint firstReleasePercent, uint firstReleaseDays, uint subsequentReleasePercent, uint subsequentReleaseDays) {\\r\\n\\r\\n        // require(schedule.length <= 8, \\\"TokenLocker: Vesting cannot have more than 8 schedules\\\");\\r\\n        \\r\\n     \\r\\n        require(firstReleasePercent + subsequentReleasePercent <= 100, InvalidPercent());\\r\\n\\r\\n        _deployer = msg.sender;\\r\\n        \\r\\n        _owner = owner;\\r\\n        _token = tokenAddress;\\r\\n\\r\\n        // 50, 25\\r\\n        //30, 30\\r\\n        // 30, 35\\r\\n        uint subsequentCycles = subsequentReleasePercent==0?0: (100 -  firstReleasePercent)/ subsequentReleasePercent; \\r\\n        bool hasExtraCycle = 100 -  firstReleasePercent  - (subsequentCycles * subsequentReleasePercent) > 0; \\r\\n        uint cycles = 1 +  subsequentCycles + ( hasExtraCycle? 1: 0 );\\r\\n\\r\\n        _cycles = cycles;\\r\\n\\r\\n        // tokenVestSchedule = new VestSchedule[](cycles);\\r\\n\\r\\n        // tokenVestSchedule[0] = VestSchedule({\\r\\n        //     releaseDate: block.timestamp + (firstReleaseDays * 1 days),\\r\\n        //     releaseAmount: firstReleasePercent * totalTokens * 10000/1000000,\\r\\n        //     hasBeenClaimed: false\\r\\n        // });\\r\\n\\r\\n\\r\\n        // for (uint i=0; i < subsequentCycles ; i++) {\\r\\n        //     //first index is firstRelease\\r\\n        //     tokenVestSchedule[i+1] = VestSchedule({\\r\\n        //         releaseDate: tokenVestSchedule[0].releaseDate + ((i+1) * subsequentReleaseDays * 1 days),\\r\\n        //         releaseAmount: subsequentReleasePercent * totalTokens * 10000/1000000,\\r\\n        //         hasBeenClaimed: false\\r\\n        //     });\\r\\n        // }\\r\\n\\r\\n        // //any extra \\r\\n        // if(hasExtraCycle){\\r\\n        //     // extra cycle will account for frist cycle and the subsequentscyels hence s + 1\\r\\n        //     tokenVestSchedule[subsequentCycles + 1] = VestSchedule({\\r\\n        //         releaseDate: tokenVestSchedule[subsequentCycles].releaseDate + ( subsequentReleaseDays * 1 days), // add days to last vesting day\\r\\n        //         releaseAmount: (100 -  firstReleasePercent  - (subsequentCycles * subsequentReleasePercent)) * totalTokens * 10000/1000000,\\r\\n        //         hasBeenClaimed: false\\r\\n        //     });\\r\\n        // }\\r\\n\\r\\n\\r\\n        \\r\\n\\r\\n        tokenVestSchedule.push( VestSchedule({\\r\\n            releaseDate: block.timestamp + (firstReleaseDays * 1 days),\\r\\n            releaseAmount: firstReleasePercent * totalTokens * 10000/1000000,\\r\\n            hasBeenClaimed: false\\r\\n        }) );\\r\\n\\r\\n\\r\\n        for (uint i=0; i < subsequentCycles ; i++) {\\r\\n            //first index is firstRelease\\r\\n            tokenVestSchedule.push( VestSchedule({\\r\\n                releaseDate: tokenVestSchedule[0].releaseDate + ((i+1) * subsequentReleaseDays * 1 days),\\r\\n                releaseAmount: subsequentReleasePercent * totalTokens * 10000/1000000,\\r\\n                hasBeenClaimed: false\\r\\n            }) );\\r\\n        }\\r\\n\\r\\n        //any extra \\r\\n        if(hasExtraCycle){\\r\\n            // extra cycle will account for frist cycle and the subsequentscyels hence s + 1\\r\\n            tokenVestSchedule.push( VestSchedule({\\r\\n                releaseDate: tokenVestSchedule[subsequentCycles].releaseDate + ( subsequentReleaseDays * 1 days), // add days to last vesting day\\r\\n                releaseAmount: (100 -  firstReleasePercent  - (subsequentCycles * subsequentReleasePercent)) * totalTokens * 10000/1000000,\\r\\n                hasBeenClaimed: false\\r\\n            }) );\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @return the owner of the locked funds\\r\\n     */\\r\\n    function getOwner() public view returns (address) {\\r\\n        return _owner;\\r\\n    }\\r\\n\\r\\n    function getVestingCycle() public view returns (VestSchedule[] memory schedule) {\\r\\n\\r\\n        schedule = new VestSchedule[](_cycles);\\r\\n\\r\\n        for (uint i=0; i < _cycles ; i++) {\\r\\n            \\r\\n            schedule[i]= tokenVestSchedule[i];\\r\\n        }\\r\\n        return schedule;\\r\\n    }\\r\\n    \\r\\n    \\r\\n    /**\\r\\n     * @notice Transfers tokens held by Lock to owner.\\r\\n       @dev Able to withdraw tokens after release time \\r\\n     */\\r\\n    function release() public nonReentrant {\\r\\n        uint256 amountToReleaseThisTime =0;\\r\\n        uint i;\\r\\n        for (i=0; i < _cycles; i++) { \\r\\n            if(block.timestamp >= tokenVestSchedule[i].releaseDate && !tokenVestSchedule[i].hasBeenClaimed ) {\\r\\n                amountToReleaseThisTime += tokenVestSchedule[i].releaseAmount;\\r\\n                tokenVestSchedule[i].hasBeenClaimed = true;\\r\\n            }            \\r\\n        }\\r\\n        \\r\\n        uint256 balance = IERC20(_token).balanceOf(address(this));\\r\\n        //require(balance > 0, \\\"TokenLocker: no tokens to release\\\");\\r\\n        require(balance >= amountToReleaseThisTime, NotEnoughTokens());\\r\\n\\r\\n        IERC20(_token).safeTransfer(_owner, amountToReleaseThisTime);\\r\\n\\r\\n        emit TokenReleased(_token, amountToReleaseThisTime); \\r\\n    }\\r\\n\\r\\n\\r\\n    /**\\r\\n     * @notice Transfers any ETH back to the owner, ETH is not locked\\r\\n       @dev Function used to transfer eth mistakenly sent here\\r\\n     */\\r\\n    function withdrawETH() public {\\r\\n        require(address(this).balance > 0, \\\"TokenLocker: no Eth to release\\\");\\r\\n\\r\\n        payable(getOwner()).transfer(address(this).balance);\\r\\n    }\\r\\n\\r\\n\\r\\n    /**\\r\\n     * @notice Transfers any unrecognised token back to the owner, \\r\\n       @dev Function used to transfer Tokens mistakenly sent here\\r\\n     */\\r\\n    function withdrawToken(address tokenToSend) public {\\r\\n        require(_token!=tokenToSend, WrongToken());\\r\\n        require(IERC20(tokenToSend).balanceOf(address(this)) > 0, NotEnoughTokens());\\r\\n\\r\\n        IERC20(tokenToSend).safeTransfer(getOwner(), IERC20(tokenToSend).balanceOf(address(this))); \\r\\n        \\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Getter for the amount of releasable token tokens. token should be the address of an IERC20 contract.\\r\\n     */\\r\\n    function released() public view returns (uint ){\\r\\n        uint256 amount=0;\\r\\n        uint i;\\r\\n        for (i=0; i < _cycles; i++) { \\r\\n            if(tokenVestSchedule[i].hasBeenClaimed ) {\\r\\n                amount += tokenVestSchedule[i].releaseAmount;\\r\\n            }            \\r\\n        }\\r\\n        return amount;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Getter for the amount of releasable token tokens. token should be the address of an IERC20 contract.\\r\\n     */\\r\\n    function releasable() public view returns (uint ){\\r\\n        uint256 amount=0;\\r\\n        uint i;\\r\\n        for (i=0; i < _cycles; i++) { \\r\\n            if( block.timestamp >= tokenVestSchedule[i].releaseDate && !tokenVestSchedule[i].hasBeenClaimed) {\\r\\n                amount += tokenVestSchedule[i].releaseAmount;\\r\\n            }            \\r\\n        }\\r\\n        return amount;\\r\\n    }\\r\\n}\",\"keccak256\":\"0x92ad4017ca8c6571c17ec816d2b74433286652ad4265b4823ab2dd6e9cc927b0\",\"license\":\"MIT\"},\"contracts/Lockers/VestSchedule.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.17;\\r\\n\\r\\nstruct VestSchedule{\\r\\n    uint256 releaseDate;\\r\\n    uint256 releaseAmount;\\r\\n    bool hasBeenClaimed;\\r\\n}\",\"keccak256\":\"0x06c6db179d20099223cbf801609ab1728c112ec95616ff04b8e2276d209f85cb\",\"license\":\"MIT\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.22 <0.9.0;\\n\\nlibrary console {\\n    address constant CONSOLE_ADDRESS =\\n        0x000000000000000000636F6e736F6c652e6c6f67;\\n\\n    function _sendLogPayloadImplementation(bytes memory payload) internal view {\\n        address consoleAddress = CONSOLE_ADDRESS;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            pop(\\n                staticcall(\\n                    gas(),\\n                    consoleAddress,\\n                    add(payload, 32),\\n                    mload(payload),\\n                    0,\\n                    0\\n                )\\n            )\\n        }\\n    }\\n\\n    function _castToPure(\\n      function(bytes memory) internal view fnIn\\n    ) internal pure returns (function(bytes memory) pure fnOut) {\\n        assembly {\\n            fnOut := fnIn\\n        }\\n    }\\n\\n    function _sendLogPayload(bytes memory payload) internal pure {\\n        _castToPure(_sendLogPayloadImplementation)(payload);\\n    }\\n\\n    function log() internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n    }\\n    function logInt(int256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(int256)\\\", p0));\\n    }\\n\\n    function logUint(uint256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n    }\\n\\n    function logString(string memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n    }\\n\\n    function logBool(bool p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n    }\\n\\n    function logAddress(address p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n    }\\n\\n    function logBytes(bytes memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n    }\\n\\n    function logBytes1(bytes1 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n    }\\n\\n    function logBytes2(bytes2 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n    }\\n\\n    function logBytes3(bytes3 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n    }\\n\\n    function logBytes4(bytes4 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n    }\\n\\n    function logBytes5(bytes5 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n    }\\n\\n    function logBytes6(bytes6 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n    }\\n\\n    function logBytes7(bytes7 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n    }\\n\\n    function logBytes8(bytes8 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n    }\\n\\n    function logBytes9(bytes9 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n    }\\n\\n    function logBytes10(bytes10 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n    }\\n\\n    function logBytes11(bytes11 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n    }\\n\\n    function logBytes12(bytes12 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n    }\\n\\n    function logBytes13(bytes13 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n    }\\n\\n    function logBytes14(bytes14 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n    }\\n\\n    function logBytes15(bytes15 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n    }\\n\\n    function logBytes16(bytes16 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n    }\\n\\n    function logBytes17(bytes17 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n    }\\n\\n    function logBytes18(bytes18 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n    }\\n\\n    function logBytes19(bytes19 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n    }\\n\\n    function logBytes20(bytes20 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n    }\\n\\n    function logBytes21(bytes21 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n    }\\n\\n    function logBytes22(bytes22 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n    }\\n\\n    function logBytes23(bytes23 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n    }\\n\\n    function logBytes24(bytes24 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n    }\\n\\n    function logBytes25(bytes25 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n    }\\n\\n    function logBytes26(bytes26 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n    }\\n\\n    function logBytes27(bytes27 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n    }\\n\\n    function logBytes28(bytes28 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n    }\\n\\n    function logBytes29(bytes29 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n    }\\n\\n    function logBytes30(bytes30 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n    }\\n\\n    function logBytes31(bytes31 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n    }\\n\\n    function logBytes32(bytes32 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n    }\\n\\n    function log(uint256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n    }\\n\\n    function log(string memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n    }\\n\\n    function log(bool p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n    }\\n\\n    function log(address p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n    }\\n\\n    function log(uint256 p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n}\\n\",\"keccak256\":\"0x7434453e6d3b7d0e5d0eb7846ffdbc27f0ccf3b163591263739b628074dc103a\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080806040523460d2577ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a005460ff8160401c1660c1576002600160401b03196001600160401b03821601605c575b604051611cc890816100d88239f35b6001600160401b0319166001600160401b039081177ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a005581527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d290602090a13880604d565b63f92ee8a960e01b60005260046000fd5b600080fdfe608080604052600436101561001d575b50361561001b57600080fd5b005b600090813560e01c9081631459457a146109365750806314c411c7146108b85780632549ad051461084457806367dba64b14610826578063893d20e814610800578063a30442d71461060c578063be956100146105e5578063c476b485146104b5578063cd3508901461048b578063e7cb4bcb146100c85763f47962090361000f57346100c557806003193601126100c55760206001600160a01b0360045416604051908152f35b80fd5b5060206003193601126100c557600435906001600160a01b036001541633036104635760095460ff81166100fa575080f35b6001600160a01b0360035416158061044b575b610423577fffffffffffffffffffffffffffffffffff00000000000000000000000000000081763d602d80600a3d3981f3363d3d373d3d3d363d7300000062ffffff6e5af43d82803e903d91602b57fd5bf39460901c1617845260701b16176020526001600160a01b036037600983f0169182156103fb5782829373ffffffffffffffffffffffffffffffffffffffff1960055416176005556001600160a01b03835416906127106101c184600654610d72565b0460075492600854906001600160a01b036003541691843b156103f757879460c493869260405198899788967f5df5f96f000000000000000000000000000000000000000000000000000000008852600488015242602488015260448701526064860152608485015260a48401525af19081156103ec5783916103d4575b50506003546001600160a01b03168061029b5750818080926127106102726001600160a01b036005541692600654610d72565b0490828215610292575bf115610286578080f35b604051903d90823e3d90fd5b506108fc61027c565b9180916127106102b96001600160a01b036005541692600654610d72565b046040519060208201927fa9059cbb00000000000000000000000000000000000000000000000000000000845260248301526044820152604481526102ff606482610d15565b519082855af13d156103c8573d9067ffffffffffffffff82116103b4579061034991604051916103396020601f19601f8401160184610d15565b82523d85602084013e5b83610e11565b805190811515918261038c575b505061036157508080f35b7f5274afe7000000000000000000000000000000000000000000000000000000008252600452602490fd5b81925090602091810103126103b057602001518015908115036103b0573880610356565b8280fd5b602484634e487b7160e01b81526041600452fd5b61034990606090610343565b816103de91610d15565b6103e957813861023f565b50fd5b6040513d85823e3d90fd5b8780fd5b6004827fc2f868f4000000000000000000000000000000000000000000000000000000008152fd5b6004827f5025e951000000000000000000000000000000000000000000000000000000008152fd5b5061271061045b84600654610d72565b04341061010d565b807facf291580000000000000000000000000000000000000000000000000000000060049252fd5b50346100c55760406003193601126100c55760206104ad602435600435610d85565b604051908152f35b50346100c55760e06003193601126100c5576104cf610ce4565b6104d7610cff565b604435926001600160a01b0383169283156105bd5760405190610df18083019083821067ffffffffffffffff8311176105a95791610558918493610ea285396001600160a01b0391821681529086166020820152604081018890526064356060820152608435608082015260a43560a082015260c43560c082015260e00190565b039082f09081156102865760206001600160a01b038686867f0b525e8e4a7ed8000838d50b3bd98279ed71ebf1971fa3705241c0ae2c50db19858589169586936040519687521694a4604051908152f35b602485634e487b7160e01b81526041600452fd5b6004827f55052f1d000000000000000000000000000000000000000000000000000000008152fd5b50346100c557806003193601126100c55760206001600160a01b0360055416604051908152f35b50346100c5576101c06003193601126100c557366044116100c557366084116100c55760843580151581036107fc5736610144116107fc5761014435908115158092036103b057366101c4116103b0576001600160a01b036001541633036107d4576106f6575b60ff7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff006009541691168091176009556106a95780f35b805b600360ff821610156106f25760038110156106de57600181611fe060ff9360051b166101640135816006015501166106ab565b602482634e487b7160e01b81526032600452fd5b5080f35b6001600160a01b03600254166001600160a01b038354169060405191610df1908184019184831067ffffffffffffffff8411176107c0579184939161077f93610ea286396001600160a01b039283168252909116602082015260a435604082015260c435606082015260e43560808201526101043560a08201526101243560c082015260e00190565b039083f080156107b5576001600160a01b031673ffffffffffffffffffffffffffffffffffffffff196004541617600455610673565b6040513d84823e3d90fd5b602487634e487b7160e01b81526041600452fd5b6004837facf29158000000000000000000000000000000000000000000000000000000008152fd5b5080fd5b50346100c557806003193601126100c5576001600160a01b036020915416604051908152f35b50346100c557806003193601126100c5576020600654604051908152f35b50346100c557806003193601126100c557806001600160a01b0360055416803b156103e9578180916004604051809481937f9b3e28fd0000000000000000000000000000000000000000000000000000000083525af180156107b5576108a75750f35b816108b191610d15565b6100c55780f35b50346100c557806003193601126100c557806001600160a01b0360045416803b156103e9578180916004604051809581937f86d1a69f0000000000000000000000000000000000000000000000000000000083525af180156109295761091b5780f35b61092491610d15565b388180f35b50604051903d90823e3d90fd5b9050346107fc5760a06003193601126107fc57610951610ce4565b610959610cff565b604435906001600160a01b038216809203610ce057606435916001600160a01b038316809303610cdc57608435926001600160a01b0384168403610cd8577ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00549460ff8660401c16159567ffffffffffffffff811680159081610cd0575b6001149081610cc6575b159081610cbd575b50610c955790818760017fffffffffffffffffffffffffffffffffffffffffffffffff00000000000000006001600160a01b039516177ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a0055610c40575b5016918215610c14578015610be9578115610bbd57906001600160a01b0393929173ffffffffffffffffffffffffffffffffffffffff19600154161760015573ffffffffffffffffffffffffffffffffffffffff1988541617875573ffffffffffffffffffffffffffffffffffffffff1960025416176002551673ffffffffffffffffffffffffffffffffffffffff1960035416176003557fffffffffffffffffffffff0000000000000000000000000000000000000000ff74ffffffffffffffffffffffffffffffffffffffff006009549260081b16911617600955610b2b575080f35b60207fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2917fffffffffffffffffffffffffffffffffffffffffffffff00ffffffffffffffff7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a0054167ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a005560018152a180f35b602488837f01e4f954000000000000000000000000000000000000000000000000000000008252600452fd5b7fe61a8aed000000000000000000000000000000000000000000000000000000008852600452602487fd5b602488847f26759e2a000000000000000000000000000000000000000000000000000000008252600452fd5b7fffffffffffffffffffffffffffffffffffffffffffffff0000000000000000001668010000000000000001177ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a005538610a46565b6004897ff92ee8a9000000000000000000000000000000000000000000000000000000008152fd5b905015386109e9565b303b1591506109e1565b8891506109d7565b8680fd5b8580fd5b8480fd5b600435906001600160a01b0382168203610cfa57565b600080fd5b602435906001600160a01b0382168203610cfa57565b90601f601f19910116810190811067ffffffffffffffff821117610d3857604052565b634e487b7160e01b600052604160045260246000fd5b604d8111610d5c57600a0a90565b634e487b7160e01b600052601160045260246000fd5b81810292918115918404141715610d5c57565b906012811115610de3577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffee8101908111610d5c57610dc290610d4e565b908115610dcd570490565b634e487b7160e01b600052601260045260246000fd5b6012811015610e0d576012039060128211610d5c57610e04610e0a92610d4e565b90610d72565b90565b5090565b90610e505750805115610e2657805190602001fd5b7f1425ea420000000000000000000000000000000000000000000000000000000060005260046000fd5b81511580610e98575b610e61575090565b6001600160a01b03907f9996b315000000000000000000000000000000000000000000000000000000006000521660045260246000fd5b50803b15610e5956fe60806040523461037d57604051601f610df138819003918201601f19168301916001600160401b038311848410176103825780849260e09460405283398101031261037d5761004d816103b7565b610059602083016103b7565b9160408101519060608101519060808101519360c060a0830151920151956001600055606461008884866103cb565b1161036c57600280546001600160a01b031990811633179091556001805482166001600160a01b03938416179055600380549091169290911691909117905560008161034157506000935b826064039260648411610322576100f36100ed84886103e5565b856103d8565b1515918660010180600111610322576101189084156103385760ff60015b16906103cb565b60045562015180810290808204620151801490151715610322578561014061014692426103cb565b926103e5565b90612710820291808304612710149015171561032257620f42406101819261016c610398565b928352046020820152600060408201526103f8565b60005b85811061027b57506101a0575b604051610973908161045e8239f35b60006005548510156102675780600560209252206003850201946000955462015180820291808304620151801490151715610253576101f7926101eb6101fc9695936101f1936103cb565b966103e5565b906103d8565b6103e5565b612710810290808204612710149015171561023f5791620f424061023593610222610398565b93845204602083015260408201526103f8565b3880808080610191565b634e487b7160e01b83526011600452602483fd5b634e487b7160e01b87526011600452602487fd5b634e487b7160e01b81526032600452602490fd5b6000600554156102675760059052600080516020610dd1833981519152546000906001830180841161023f57896102b1916103e5565b906201518082029180830462015180149015171561023f57906102d3916103cb565b906102de87866103e5565b612710810290808204612710149015171561030e579161030891620f424060019594610222610398565b01610184565b634e487b7160e01b82526011600452602482fd5b634e487b7160e01b600052601160045260246000fd5b60ff6000610111565b8260640390606482116103585750819004936100d3565b634e487b7160e01b81526011600452602490fd5b635c974e3d60e11b60005260046000fd5b600080fd5b634e487b7160e01b600052604160045260246000fd5b60405190606082016001600160401b0381118382101761038257604052565b51906001600160a01b038216820361037d57565b9190820180921161032257565b9190820391821161032257565b8181029291811591840414171561032257565b60055468010000000000000000811015610382576001810160055560006005548210156102675760059052600302600080516020610dd1833981519152016002604091835181556020840151600182015501910151151560ff8019835416911617905556fe6080604052600436101561001257600080fd5b60003560e01c806386d1a69f1461051a578063893d20e8146104f3578063894760691461038a5780639613252114610328578063a7e5c3f3146102d9578063df23df50146101ac578063e086e5ec146100ff5763fbccedae1461007457600080fd5b346100fa5760006003193601126100fa57600080600454905b81811061009f57602083604051908152f35b6100a8816106c2565b5054421015806100e2575b6100c0575b60010161008d565b916100da600191826100d1866106c2565b500154906106f7565b9290506100b8565b5060ff60026100f0836106c2565b50015416156100b3565b600080fd5b346100fa5760006003193601126100fa57471561014e5760008080806001600160a01b03600154164790828215610145575bf11561013957005b6040513d6000823e3d90fd5b506108fc610131565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f546f6b656e4c6f636b65723a206e6f2045746820746f2072656c6561736500006044820152fd5b346100fa5760006003193601126100fa576004546101c98161076f565b906101d7604051928361074c565b808252601f196101e68261076f565b0160005b8181106102ad57505060005b81811061025c578260405180916020820160208352815180915260206040840192019060005b81811061022a575050500390f35b91935091602060606001926040875180518352848101518584015201511515604082015201940191019184939261021c565b806102686001926106c2565b5060ff60026040519261027a8461071a565b805484528581015460208501520154161515604082015261029b8286610787565b526102a68185610787565b50016101f6565b6020906040516102bc8161071a565b6000815260008382015260006040820152828287010152016101ea565b346100fa5760206003193601126100fa576004356005548110156100fa576103026060916106c2565b5080549060ff600260018301549201541690604051928352602083015215156040820152f35b346100fa5760006003193601126100fa57600080600454905b81811061035357602083604051908152f35b60ff6002610360836106c2565b50015416610371575b600101610341565b91610382600191826100d1866106c2565b929050610369565b346100fa5760206003193601126100fa576004356001600160a01b0381168091036100fa57806001600160a01b0360035416146104c9576040516370a0823160e01b8152306004820152602081602481855afa90811561013957600091610497575b501561046d576001600160a01b036001541690604051916370a0823160e01b8352306004840152602083602481855afa91821561013957600092610437575b610435935061079b565b005b91506020833d602011610465575b816104526020938361074c565b810103126100fa5761043592519161042b565b3d9150610445565b7f22bbb43c0000000000000000000000000000000000000000000000000000000060005260046000fd5b90506020813d6020116104c1575b816104b26020938361074c565b810103126100fa5751826103ec565b3d91506104a5565b7fa0f3feea0000000000000000000000000000000000000000000000000000000060005260046000fd5b346100fa5760006003193601126100fa5760206001600160a01b0360015416604051908152f35b346100fa5760006003193601126100fa576002600054146106985760026000556000805b6004548110156105cf57610551816106c2565b5054421015806105b7575b610569575b60010161053e565b9061057a600191826100d1856106c2565b916002610586826106c2565b5001827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff008254161790559050610561565b5060ff60026105c5836106c2565b500154161561055c565b506001600160a01b03600354166040516370a0823160e01b8152306004820152602081602481855afa8015610139578391600091610663575b501061046d5781610625916001600160a01b03600154169061079b565b7f9cf9e3ab58b33f06d81842ea0ad850b6640c6430d6396973312e1715792e7a9160206001600160a01b036003541692604051908152a26001600055005b9150506020813d602011610690575b8161067f6020938361074c565b810103126100fa5782905184610608565b3d9150610672565b7f3ee5aeb50000000000000000000000000000000000000000000000000000000060005260046000fd5b6005548110156106e15760056000526003602060002091020190600090565b634e487b7160e01b600052603260045260246000fd5b9190820180921161070457565b634e487b7160e01b600052601160045260246000fd5b6060810190811067ffffffffffffffff82111761073657604052565b634e487b7160e01b600052604160045260246000fd5b90601f601f19910116810190811067ffffffffffffffff82111761073657604052565b67ffffffffffffffff81116107365760051b60200190565b80518210156106e15760209160051b010190565b6000916001600160a01b038392604051958260208801947fa9059cbb0000000000000000000000000000000000000000000000000000000086521660248801526044870152604486526107ef60648761074c565b1693519082855af13d156108a1573d67ffffffffffffffff81116107365761083a91604051916108296020601f19601f840116018461074c565b82523d6000602084013e5b836108ad565b805190811515918261087d575b50506108505750565b7f5274afe70000000000000000000000000000000000000000000000000000000060005260045260246000fd5b81925090602091810103126100fa57602001518015908115036100fa573880610847565b61083a90606090610834565b906108ec57508051156108c257805190602001fd5b7f1425ea420000000000000000000000000000000000000000000000000000000060005260046000fd5b81511580610934575b6108fd575090565b6001600160a01b03907f9996b315000000000000000000000000000000000000000000000000000000006000521660045260246000fd5b50803b156108f556fea264697066735822122031400338fe232dfae4202f9cb0289c0a56153bd6101627d48e5653273f54bc4464736f6c634300081c0033036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db0a2646970667358221220f4a50ce5d37422a288414dfca1e74e773b396d2dc7d5f86f03a7d6e5e956471e64736f6c634300081c0033",
  "deployedBytecode": "0x608080604052600436101561001d575b50361561001b57600080fd5b005b600090813560e01c9081631459457a146109365750806314c411c7146108b85780632549ad051461084457806367dba64b14610826578063893d20e814610800578063a30442d71461060c578063be956100146105e5578063c476b485146104b5578063cd3508901461048b578063e7cb4bcb146100c85763f47962090361000f57346100c557806003193601126100c55760206001600160a01b0360045416604051908152f35b80fd5b5060206003193601126100c557600435906001600160a01b036001541633036104635760095460ff81166100fa575080f35b6001600160a01b0360035416158061044b575b610423577fffffffffffffffffffffffffffffffffff00000000000000000000000000000081763d602d80600a3d3981f3363d3d373d3d3d363d7300000062ffffff6e5af43d82803e903d91602b57fd5bf39460901c1617845260701b16176020526001600160a01b036037600983f0169182156103fb5782829373ffffffffffffffffffffffffffffffffffffffff1960055416176005556001600160a01b03835416906127106101c184600654610d72565b0460075492600854906001600160a01b036003541691843b156103f757879460c493869260405198899788967f5df5f96f000000000000000000000000000000000000000000000000000000008852600488015242602488015260448701526064860152608485015260a48401525af19081156103ec5783916103d4575b50506003546001600160a01b03168061029b5750818080926127106102726001600160a01b036005541692600654610d72565b0490828215610292575bf115610286578080f35b604051903d90823e3d90fd5b506108fc61027c565b9180916127106102b96001600160a01b036005541692600654610d72565b046040519060208201927fa9059cbb00000000000000000000000000000000000000000000000000000000845260248301526044820152604481526102ff606482610d15565b519082855af13d156103c8573d9067ffffffffffffffff82116103b4579061034991604051916103396020601f19601f8401160184610d15565b82523d85602084013e5b83610e11565b805190811515918261038c575b505061036157508080f35b7f5274afe7000000000000000000000000000000000000000000000000000000008252600452602490fd5b81925090602091810103126103b057602001518015908115036103b0573880610356565b8280fd5b602484634e487b7160e01b81526041600452fd5b61034990606090610343565b816103de91610d15565b6103e957813861023f565b50fd5b6040513d85823e3d90fd5b8780fd5b6004827fc2f868f4000000000000000000000000000000000000000000000000000000008152fd5b6004827f5025e951000000000000000000000000000000000000000000000000000000008152fd5b5061271061045b84600654610d72565b04341061010d565b807facf291580000000000000000000000000000000000000000000000000000000060049252fd5b50346100c55760406003193601126100c55760206104ad602435600435610d85565b604051908152f35b50346100c55760e06003193601126100c5576104cf610ce4565b6104d7610cff565b604435926001600160a01b0383169283156105bd5760405190610df18083019083821067ffffffffffffffff8311176105a95791610558918493610ea285396001600160a01b0391821681529086166020820152604081018890526064356060820152608435608082015260a43560a082015260c43560c082015260e00190565b039082f09081156102865760206001600160a01b038686867f0b525e8e4a7ed8000838d50b3bd98279ed71ebf1971fa3705241c0ae2c50db19858589169586936040519687521694a4604051908152f35b602485634e487b7160e01b81526041600452fd5b6004827f55052f1d000000000000000000000000000000000000000000000000000000008152fd5b50346100c557806003193601126100c55760206001600160a01b0360055416604051908152f35b50346100c5576101c06003193601126100c557366044116100c557366084116100c55760843580151581036107fc5736610144116107fc5761014435908115158092036103b057366101c4116103b0576001600160a01b036001541633036107d4576106f6575b60ff7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff006009541691168091176009556106a95780f35b805b600360ff821610156106f25760038110156106de57600181611fe060ff9360051b166101640135816006015501166106ab565b602482634e487b7160e01b81526032600452fd5b5080f35b6001600160a01b03600254166001600160a01b038354169060405191610df1908184019184831067ffffffffffffffff8411176107c0579184939161077f93610ea286396001600160a01b039283168252909116602082015260a435604082015260c435606082015260e43560808201526101043560a08201526101243560c082015260e00190565b039083f080156107b5576001600160a01b031673ffffffffffffffffffffffffffffffffffffffff196004541617600455610673565b6040513d84823e3d90fd5b602487634e487b7160e01b81526041600452fd5b6004837facf29158000000000000000000000000000000000000000000000000000000008152fd5b5080fd5b50346100c557806003193601126100c5576001600160a01b036020915416604051908152f35b50346100c557806003193601126100c5576020600654604051908152f35b50346100c557806003193601126100c557806001600160a01b0360055416803b156103e9578180916004604051809481937f9b3e28fd0000000000000000000000000000000000000000000000000000000083525af180156107b5576108a75750f35b816108b191610d15565b6100c55780f35b50346100c557806003193601126100c557806001600160a01b0360045416803b156103e9578180916004604051809581937f86d1a69f0000000000000000000000000000000000000000000000000000000083525af180156109295761091b5780f35b61092491610d15565b388180f35b50604051903d90823e3d90fd5b9050346107fc5760a06003193601126107fc57610951610ce4565b610959610cff565b604435906001600160a01b038216809203610ce057606435916001600160a01b038316809303610cdc57608435926001600160a01b0384168403610cd8577ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00549460ff8660401c16159567ffffffffffffffff811680159081610cd0575b6001149081610cc6575b159081610cbd575b50610c955790818760017fffffffffffffffffffffffffffffffffffffffffffffffff00000000000000006001600160a01b039516177ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a0055610c40575b5016918215610c14578015610be9578115610bbd57906001600160a01b0393929173ffffffffffffffffffffffffffffffffffffffff19600154161760015573ffffffffffffffffffffffffffffffffffffffff1988541617875573ffffffffffffffffffffffffffffffffffffffff1960025416176002551673ffffffffffffffffffffffffffffffffffffffff1960035416176003557fffffffffffffffffffffff0000000000000000000000000000000000000000ff74ffffffffffffffffffffffffffffffffffffffff006009549260081b16911617600955610b2b575080f35b60207fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2917fffffffffffffffffffffffffffffffffffffffffffffff00ffffffffffffffff7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a0054167ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a005560018152a180f35b602488837f01e4f954000000000000000000000000000000000000000000000000000000008252600452fd5b7fe61a8aed000000000000000000000000000000000000000000000000000000008852600452602487fd5b602488847f26759e2a000000000000000000000000000000000000000000000000000000008252600452fd5b7fffffffffffffffffffffffffffffffffffffffffffffff0000000000000000001668010000000000000001177ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a005538610a46565b6004897ff92ee8a9000000000000000000000000000000000000000000000000000000008152fd5b905015386109e9565b303b1591506109e1565b8891506109d7565b8680fd5b8580fd5b8480fd5b600435906001600160a01b0382168203610cfa57565b600080fd5b602435906001600160a01b0382168203610cfa57565b90601f601f19910116810190811067ffffffffffffffff821117610d3857604052565b634e487b7160e01b600052604160045260246000fd5b604d8111610d5c57600a0a90565b634e487b7160e01b600052601160045260246000fd5b81810292918115918404141715610d5c57565b906012811115610de3577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffee8101908111610d5c57610dc290610d4e565b908115610dcd570490565b634e487b7160e01b600052601260045260246000fd5b6012811015610e0d576012039060128211610d5c57610e04610e0a92610d4e565b90610d72565b90565b5090565b90610e505750805115610e2657805190602001fd5b7f1425ea420000000000000000000000000000000000000000000000000000000060005260046000fd5b81511580610e98575b610e61575090565b6001600160a01b03907f9996b315000000000000000000000000000000000000000000000000000000006000521660045260246000fd5b50803b15610e5956fe60806040523461037d57604051601f610df138819003918201601f19168301916001600160401b038311848410176103825780849260e09460405283398101031261037d5761004d816103b7565b610059602083016103b7565b9160408101519060608101519060808101519360c060a0830151920151956001600055606461008884866103cb565b1161036c57600280546001600160a01b031990811633179091556001805482166001600160a01b03938416179055600380549091169290911691909117905560008161034157506000935b826064039260648411610322576100f36100ed84886103e5565b856103d8565b1515918660010180600111610322576101189084156103385760ff60015b16906103cb565b60045562015180810290808204620151801490151715610322578561014061014692426103cb565b926103e5565b90612710820291808304612710149015171561032257620f42406101819261016c610398565b928352046020820152600060408201526103f8565b60005b85811061027b57506101a0575b604051610973908161045e8239f35b60006005548510156102675780600560209252206003850201946000955462015180820291808304620151801490151715610253576101f7926101eb6101fc9695936101f1936103cb565b966103e5565b906103d8565b6103e5565b612710810290808204612710149015171561023f5791620f424061023593610222610398565b93845204602083015260408201526103f8565b3880808080610191565b634e487b7160e01b83526011600452602483fd5b634e487b7160e01b87526011600452602487fd5b634e487b7160e01b81526032600452602490fd5b6000600554156102675760059052600080516020610dd1833981519152546000906001830180841161023f57896102b1916103e5565b906201518082029180830462015180149015171561023f57906102d3916103cb565b906102de87866103e5565b612710810290808204612710149015171561030e579161030891620f424060019594610222610398565b01610184565b634e487b7160e01b82526011600452602482fd5b634e487b7160e01b600052601160045260246000fd5b60ff6000610111565b8260640390606482116103585750819004936100d3565b634e487b7160e01b81526011600452602490fd5b635c974e3d60e11b60005260046000fd5b600080fd5b634e487b7160e01b600052604160045260246000fd5b60405190606082016001600160401b0381118382101761038257604052565b51906001600160a01b038216820361037d57565b9190820180921161032257565b9190820391821161032257565b8181029291811591840414171561032257565b60055468010000000000000000811015610382576001810160055560006005548210156102675760059052600302600080516020610dd1833981519152016002604091835181556020840151600182015501910151151560ff8019835416911617905556fe6080604052600436101561001257600080fd5b60003560e01c806386d1a69f1461051a578063893d20e8146104f3578063894760691461038a5780639613252114610328578063a7e5c3f3146102d9578063df23df50146101ac578063e086e5ec146100ff5763fbccedae1461007457600080fd5b346100fa5760006003193601126100fa57600080600454905b81811061009f57602083604051908152f35b6100a8816106c2565b5054421015806100e2575b6100c0575b60010161008d565b916100da600191826100d1866106c2565b500154906106f7565b9290506100b8565b5060ff60026100f0836106c2565b50015416156100b3565b600080fd5b346100fa5760006003193601126100fa57471561014e5760008080806001600160a01b03600154164790828215610145575bf11561013957005b6040513d6000823e3d90fd5b506108fc610131565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f546f6b656e4c6f636b65723a206e6f2045746820746f2072656c6561736500006044820152fd5b346100fa5760006003193601126100fa576004546101c98161076f565b906101d7604051928361074c565b808252601f196101e68261076f565b0160005b8181106102ad57505060005b81811061025c578260405180916020820160208352815180915260206040840192019060005b81811061022a575050500390f35b91935091602060606001926040875180518352848101518584015201511515604082015201940191019184939261021c565b806102686001926106c2565b5060ff60026040519261027a8461071a565b805484528581015460208501520154161515604082015261029b8286610787565b526102a68185610787565b50016101f6565b6020906040516102bc8161071a565b6000815260008382015260006040820152828287010152016101ea565b346100fa5760206003193601126100fa576004356005548110156100fa576103026060916106c2565b5080549060ff600260018301549201541690604051928352602083015215156040820152f35b346100fa5760006003193601126100fa57600080600454905b81811061035357602083604051908152f35b60ff6002610360836106c2565b50015416610371575b600101610341565b91610382600191826100d1866106c2565b929050610369565b346100fa5760206003193601126100fa576004356001600160a01b0381168091036100fa57806001600160a01b0360035416146104c9576040516370a0823160e01b8152306004820152602081602481855afa90811561013957600091610497575b501561046d576001600160a01b036001541690604051916370a0823160e01b8352306004840152602083602481855afa91821561013957600092610437575b610435935061079b565b005b91506020833d602011610465575b816104526020938361074c565b810103126100fa5761043592519161042b565b3d9150610445565b7f22bbb43c0000000000000000000000000000000000000000000000000000000060005260046000fd5b90506020813d6020116104c1575b816104b26020938361074c565b810103126100fa5751826103ec565b3d91506104a5565b7fa0f3feea0000000000000000000000000000000000000000000000000000000060005260046000fd5b346100fa5760006003193601126100fa5760206001600160a01b0360015416604051908152f35b346100fa5760006003193601126100fa576002600054146106985760026000556000805b6004548110156105cf57610551816106c2565b5054421015806105b7575b610569575b60010161053e565b9061057a600191826100d1856106c2565b916002610586826106c2565b5001827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff008254161790559050610561565b5060ff60026105c5836106c2565b500154161561055c565b506001600160a01b03600354166040516370a0823160e01b8152306004820152602081602481855afa8015610139578391600091610663575b501061046d5781610625916001600160a01b03600154169061079b565b7f9cf9e3ab58b33f06d81842ea0ad850b6640c6430d6396973312e1715792e7a9160206001600160a01b036003541692604051908152a26001600055005b9150506020813d602011610690575b8161067f6020938361074c565b810103126100fa5782905184610608565b3d9150610672565b7f3ee5aeb50000000000000000000000000000000000000000000000000000000060005260046000fd5b6005548110156106e15760056000526003602060002091020190600090565b634e487b7160e01b600052603260045260246000fd5b9190820180921161070457565b634e487b7160e01b600052601160045260246000fd5b6060810190811067ffffffffffffffff82111761073657604052565b634e487b7160e01b600052604160045260246000fd5b90601f601f19910116810190811067ffffffffffffffff82111761073657604052565b67ffffffffffffffff81116107365760051b60200190565b80518210156106e15760209160051b010190565b6000916001600160a01b038392604051958260208801947fa9059cbb0000000000000000000000000000000000000000000000000000000086521660248801526044870152604486526107ef60648761074c565b1693519082855af13d156108a1573d67ffffffffffffffff81116107365761083a91604051916108296020601f19601f840116018461074c565b82523d6000602084013e5b836108ad565b805190811515918261087d575b50506108505750565b7f5274afe70000000000000000000000000000000000000000000000000000000060005260045260246000fd5b81925090602091810103126100fa57602001518015908115036100fa573880610847565b61083a90606090610834565b906108ec57508051156108c257805190602001fd5b7f1425ea420000000000000000000000000000000000000000000000000000000060005260046000fd5b81511580610934575b6108fd575090565b6001600160a01b03907f9996b315000000000000000000000000000000000000000000000000000000006000521660045260246000fd5b50803b156108f556fea264697066735822122031400338fe232dfae4202f9cb0289c0a56153bd6101627d48e5653273f54bc4464736f6c634300081c0033036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db0a2646970667358221220f4a50ce5d37422a288414dfca1e74e773b396d2dc7d5f86f03a7d6e5e956471e64736f6c634300081c0033",
  "devdoc": {
    "errors": {
      "AddressEmptyCode(address)": [
        {
          "details": "There's no code at `target` (it is not a contract)."
        }
      ],
      "AddressInsufficientBalance(address)": [
        {
          "details": "The ETH balance of the account is not enough to perform the operation."
        }
      ],
      "ERC1167FailedCreateClone()": [
        {
          "details": "A clone instance deployment failed."
        }
      ],
      "FailedInnerCall()": [
        {
          "details": "A call to an address target failed. The target may have reverted."
        }
      ],
      "InvalidInitialization()": [
        {
          "details": "The contract is already initialized."
        }
      ],
      "NotInitializing()": [
        {
          "details": "The contract is not initializing."
        }
      ],
      "SafeERC20FailedOperation(address)": [
        {
          "details": "An operation with an ERC20 token failed."
        }
      ]
    },
    "events": {
      "Initialized(uint64)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      }
    },
    "kind": "dev",
    "methods": {
      "constructor": {
        "custom:oz-upgrades-unsafe-allow": "constructor"
      },
      "getOwner()": {
        "returns": {
          "_0": "the owner of the locked funds"
        }
      }
    },
    "title": "DexLocker",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "constructor": {
        "notice": "Do not leave an implementation contract uninitialized. An uninitialized implementation contract can be taken over by an attacker, which may impact the proxy.  To prevent the implementation contract from being used, you should invoke the _disableInitializers function in the constructor to automatically lock it when it is deployed"
      },
      "normalizeTokenAmount(uint256,uint256)": {
        "notice": "Normalization function that adjusts token amounts to a common decimal base (18 decimals in this case).  This function either scales up or scales down the token amount based on the number of decimals the token uses, ensuring the final amount will be always displayed with 18 decimals.  Of course this can result in a minor truncation if tokens >18 decimals are being used, this must be considered"
      },
      "releaseCoinVaultETH()": {
        "notice": "Transfers ETH back to the owner"
      },
      "releaseTeamTokens()": {
        "notice": "Transfers tokens held by Lock to owner."
      },
      "startRaisedFundsLock(uint256)": {
        "notice": "Raised funds"
      }
    },
    "notice": "Manages vesting for tokens raised in sales campaigns, LP TOkens and Team Vesting tokens",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 8269,
        "contract": "contracts/Lockers/DexLocker.sol:DexLocker",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 8271,
        "contract": "contracts/Lockers/DexLocker.sol:DexLocker",
        "label": "_deployer",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 8280,
        "contract": "contracts/Lockers/DexLocker.sol:DexLocker",
        "label": "_token",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 8282,
        "contract": "contracts/Lockers/DexLocker.sol:DexLocker",
        "label": "_purchaseToken",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 8285,
        "contract": "contracts/Lockers/DexLocker.sol:DexLocker",
        "label": "_teamTokensLocker",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(TokenLocker)9805"
      },
      {
        "astId": 8288,
        "contract": "contracts/Lockers/DexLocker.sol:DexLocker",
        "label": "_purchasedCoinVestingVault",
        "offset": 0,
        "slot": "5",
        "type": "t_contract(PurchasedCoinVestingVault)9282"
      },
      {
        "astId": 8293,
        "contract": "contracts/Lockers/DexLocker.sol:DexLocker",
        "label": "_raisedFundVestingDetails",
        "offset": 0,
        "slot": "6",
        "type": "t_array(t_uint256)3_storage"
      },
      {
        "astId": 8295,
        "contract": "contracts/Lockers/DexLocker.sol:DexLocker",
        "label": "_useRaisedFundsVesting",
        "offset": 0,
        "slot": "9",
        "type": "t_bool"
      },
      {
        "astId": 8297,
        "contract": "contracts/Lockers/DexLocker.sol:DexLocker",
        "label": "_purchasedCoinVestingVaultImplementationAddress",
        "offset": 1,
        "slot": "9",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)3_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[3]",
        "numberOfBytes": "96"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(PurchasedCoinVestingVault)9282": {
        "encoding": "inplace",
        "label": "contract PurchasedCoinVestingVault",
        "numberOfBytes": "20"
      },
      "t_contract(TokenLocker)9805": {
        "encoding": "inplace",
        "label": "contract TokenLocker",
        "numberOfBytes": "20"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}