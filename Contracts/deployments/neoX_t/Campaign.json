{
  "address": "0xA8AE57b84100E4bA7D2c5C44b59Cb8Bbd28a0f4c",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        }
      ],
      "name": "AddressEmptyCode",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "AddressInsufficientBalance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "AlterWhitelistingAfterSaleStartTime",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "AuditAfterSaleStartTime",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CampaignFailedOrCancelled",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CannotCancelAfterSaleStartTime",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ClosedSale",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "EndDateLessThanStartTime",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ExceedMaxCap",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ExceedTierOneMaxCap",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ExceedTierOneUserLimit",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ExceedTierTwoMaxCap",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ExceedTierTwoUserLimit",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ExceedTierZeroMaxCap",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ExceedTierZeroUserLimit",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FailedInnerCall",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InsufficientBalance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidInitialization",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "KYCAfterSaleStartTime",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "LessThanMinBuy",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "limit",
          "type": "uint256"
        }
      ],
      "name": "LiquidityAboveLimit",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "LiquiditySetupAlreadyDone",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MinAllocationOutOfRange",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NewDateLessThanOldDate",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NoCoin",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NoCoinsToClaim",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NoSendValue",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NoSoldOutOrEndDate",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NoTokens",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NoTokensForLiquidity",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotAdmin",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotEndDate",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotInTier0",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotInTier1",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotInTier2Whitelist",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotInitializing",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotTokenSubmitted",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OngoingSales",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OwnerHasWithdrawnAlready",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OwnersCannotWithdraw",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PostponeBeforeSaleStartTime",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ReentrancyGuardReentrantCall",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RequireCancelorFail",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RouterApprovalFailed",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "SafeERC20FailedOperation",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SaleEndTimeBeforeStartTime",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SaleNotStarted",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SoldOutError",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "limit",
          "type": "uint256"
        }
      ],
      "name": "TierCapTooLow",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TierOneCapExceedsHardCap",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TierOneMaxAllocationOutOfRange",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TierTwoCapExceedsHardCap",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TierTwoMaxAllocationOutOfRange",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "UpdateAfterSaleStartTime",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousAdmin",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "AdminOwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "version",
          "type": "uint64"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "router",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token1",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token2",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountToken1",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountToken2",
          "type": "uint256"
        }
      ],
      "name": "LiquidityAddedToRouter",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Refunded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "SoldOut",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "ValueReceived",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdrawn",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "_campaignFactoryAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_dexLocker",
      "outputs": [
        {
          "internalType": "contract IDexLocker",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "auditUrl",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "buyInAllTiers",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "buyInOneTier",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "buyInTwoTier",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "buyInZeroTier",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "calcFairLaunchRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "tokenRate",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "campaignKey",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cancelCampaign",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "changeAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "dexLockerAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "dexRouterAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "disableTier2Whitelist",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "finalizeAndSetupLiquidity",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCampaignInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "softcap",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "hardcap",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "saleStartTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "saleEndTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "listRate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "dexListRate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_liquidityReleaseTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalCoins",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalParticipant",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "use_WhiteList",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "hasKyc",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "isAuditd",
          "type": "bool"
        },
        {
          "internalType": "string",
          "name": "_auditUrl",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCampaignSalePriceInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getDexListRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getEndDate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getHardCap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "hasKYC",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[4]",
          "name": "addresses",
          "type": "address[4]"
        },
        {
          "internalType": "uint256",
          "name": "tokensOnSale",
          "type": "uint256"
        },
        {
          "internalType": "uint256[10]",
          "name": "capAndDate",
          "type": "uint256[10]"
        },
        {
          "internalType": "address",
          "name": "_dexRouterAddress",
          "type": "address"
        },
        {
          "internalType": "uint256[4]",
          "name": "liquidityAllocationAndRates",
          "type": "uint256[4]"
        },
        {
          "internalType": "uint256[5]",
          "name": "teamTokenVestingDetails",
          "type": "uint256[5]"
        },
        {
          "internalType": "uint256[3]",
          "name": "raisedFundVestingDetails",
          "type": "uint256[3]"
        },
        {
          "internalType": "bool[2]",
          "name": "_useTokenOrRaisedFundVesting",
          "type": "bool[2]"
        },
        {
          "internalType": "string[6]",
          "name": "founderInfo",
          "type": "string[6]"
        },
        {
          "internalType": "contract DexLockerFactory",
          "name": "dexLockerFactory",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "isAllowedInTier0",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "isAllowedInTier1",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isAudited",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32[]",
          "name": "proof",
          "type": "bytes32[]"
        },
        {
          "internalType": "address",
          "name": "claimer",
          "type": "address"
        }
      ],
      "name": "isInTier2WhiteList",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "liquidityPairAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "liquidityPairLockerAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "liquidityReleaseInDays",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxAllocationPerUserTierOne",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxAllocationPerUserTierTwo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxAllocationPerUserTierZero",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minAllocationPerUser",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newDate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "newEndDate",
          "type": "uint256"
        }
      ],
      "name": "postponeSale",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "purchaseTokenAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "refundERC20",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "saleInfo",
      "outputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "softCap",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "hardCap",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "saleStartTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "saleEndTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "liquidityPercent",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "listRate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "dexListRate",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "logoUrl",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "desc",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "website",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "twitter",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "telegram",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "discord",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "tokensOnSale",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "audit",
          "type": "bool"
        }
      ],
      "name": "setAudited",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "kyc",
          "type": "bool"
        }
      ],
      "name": "setKYC",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "setTier1TimeLineInHours",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        }
      ],
      "name": "setZSalesTokenAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "startReceivingBids",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "status",
      "outputs": [
        {
          "internalType": "enum Campaign.CampaignStatus",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32[]",
          "name": "proof",
          "type": "bytes32[]"
        },
        {
          "internalType": "uint256",
          "name": "purchasedAmount",
          "type": "uint256"
        }
      ],
      "name": "submitBid",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "whitelistMerkleRoot",
          "type": "bytes32"
        }
      ],
      "name": "submitTier2Whitelist",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tierOnehardCap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tierTwohardCap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tierZerohardCap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokenAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalCoinInTierOne",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalCoinInTierTwo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalCoinInTierZero",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalCoinReceived",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalParticipants",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalTeamTokensToBeVested",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "logoUrl",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "desc",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "website",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "twitter",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "telegram",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "discord",
          "type": "string"
        }
      ],
      "name": "updateCampaignFounderDetails",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tierOneHardCap",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_tierTwoHardCap",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minAllocationPerUser",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_maxAllocationPerUserTierOne",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_maxAllocationPerUserTierTwo",
          "type": "uint256"
        }
      ],
      "name": "updateTierDetails",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "useRaisedFundsVesting",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "useTokenVesting",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "useWhiteList",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawFunds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawOwnerTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x62a52a65bb58f495823284c7c2ef1bff5e8a23bce737cf05f997f940d21514fa",
  "receipt": {
    "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
    "from": "0x4ABda0097D7545dE58608F7E36e0C1cac68b4943",
    "contractAddress": null,
    "transactionIndex": 0,
    "gasUsed": "5405951",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000800000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000020000000000000000000800000000000000000000000000000000400000000000002000000800000000000001000000001080000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004000000000000000020000000000000000000000000000000000080000000000000000000000000000000",
    "blockHash": "0x8c835e691e022d5642c4a0905e36e62c889a44491d3734b3b2299585b7a035c7",
    "transactionHash": "0x62a52a65bb58f495823284c7c2ef1bff5e8a23bce737cf05f997f940d21514fa",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 1218545,
        "transactionHash": "0x62a52a65bb58f495823284c7c2ef1bff5e8a23bce737cf05f997f940d21514fa",
        "address": "0xA8AE57b84100E4bA7D2c5C44b59Cb8Bbd28a0f4c",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000004e59b44847b379578588920ca78fbf26c0b4956c"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x8c835e691e022d5642c4a0905e36e62c889a44491d3734b3b2299585b7a035c7"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 1218545,
        "transactionHash": "0x62a52a65bb58f495823284c7c2ef1bff5e8a23bce737cf05f997f940d21514fa",
        "address": "0xA8AE57b84100E4bA7D2c5C44b59Cb8Bbd28a0f4c",
        "topics": [
          "0xc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2"
        ],
        "data": "0x000000000000000000000000000000000000000000000000ffffffffffffffff",
        "logIndex": 1,
        "blockHash": "0x8c835e691e022d5642c4a0905e36e62c889a44491d3734b3b2299585b7a035c7"
      }
    ],
    "blockNumber": 1218545,
    "cumulativeGasUsed": "5405951",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "90bc6cfc9d445fa893c76731a2c281a5",
  "metadata": "{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"AddressEmptyCode\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AddressInsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AlterWhitelistingAfterSaleStartTime\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AuditAfterSaleStartTime\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CampaignFailedOrCancelled\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CannotCancelAfterSaleStartTime\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ClosedSale\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EndDateLessThanStartTime\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ExceedMaxCap\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ExceedTierOneMaxCap\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ExceedTierOneUserLimit\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ExceedTierTwoMaxCap\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ExceedTierTwoUserLimit\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ExceedTierZeroMaxCap\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ExceedTierZeroUserLimit\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedInnerCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"KYCAfterSaleStartTime\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LessThanMinBuy\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"}],\"name\":\"LiquidityAboveLimit\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LiquiditySetupAlreadyDone\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MinAllocationOutOfRange\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NewDateLessThanOldDate\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoCoin\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoCoinsToClaim\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoSendValue\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoSoldOutOrEndDate\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoTokens\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoTokensForLiquidity\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotAdmin\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotEndDate\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInTier0\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInTier1\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInTier2Whitelist\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInitializing\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotTokenSubmitted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OngoingSales\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OwnerHasWithdrawnAlready\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OwnersCannotWithdraw\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PostponeBeforeSaleStartTime\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RequireCancelorFail\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RouterApprovalFailed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SafeERC20FailedOperation\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SaleEndTimeBeforeStartTime\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SaleNotStarted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SoldOutError\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"}],\"name\":\"TierCapTooLow\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TierOneCapExceedsHardCap\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TierOneMaxAllocationOutOfRange\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TierTwoCapExceedsHardCap\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TierTwoMaxAllocationOutOfRange\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UpdateAfterSaleStartTime\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminOwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"version\",\"type\":\"uint64\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token2\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountToken1\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountToken2\",\"type\":\"uint256\"}],\"name\":\"LiquidityAddedToRouter\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Refunded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"SoldOut\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ValueReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_campaignFactoryAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_dexLocker\",\"outputs\":[{\"internalType\":\"contract IDexLocker\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"auditUrl\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"buyInAllTiers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"buyInOneTier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"buyInTwoTier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"buyInZeroTier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"calcFairLaunchRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenRate\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"campaignKey\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cancelCampaign\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"changeAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dexLockerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dexRouterAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disableTier2Whitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"finalizeAndSetupLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCampaignInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"softcap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"hardcap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"saleStartTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"saleEndTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"listRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dexListRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_liquidityReleaseTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalCoins\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalParticipant\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"use_WhiteList\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"hasKyc\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isAuditd\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"_auditUrl\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCampaignSalePriceInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDexListRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEndDate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getHardCap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hasKYC\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[4]\",\"name\":\"addresses\",\"type\":\"address[4]\"},{\"internalType\":\"uint256\",\"name\":\"tokensOnSale\",\"type\":\"uint256\"},{\"internalType\":\"uint256[10]\",\"name\":\"capAndDate\",\"type\":\"uint256[10]\"},{\"internalType\":\"address\",\"name\":\"_dexRouterAddress\",\"type\":\"address\"},{\"internalType\":\"uint256[4]\",\"name\":\"liquidityAllocationAndRates\",\"type\":\"uint256[4]\"},{\"internalType\":\"uint256[5]\",\"name\":\"teamTokenVestingDetails\",\"type\":\"uint256[5]\"},{\"internalType\":\"uint256[3]\",\"name\":\"raisedFundVestingDetails\",\"type\":\"uint256[3]\"},{\"internalType\":\"bool[2]\",\"name\":\"_useTokenOrRaisedFundVesting\",\"type\":\"bool[2]\"},{\"internalType\":\"string[6]\",\"name\":\"founderInfo\",\"type\":\"string[6]\"},{\"internalType\":\"contract DexLockerFactory\",\"name\":\"dexLockerFactory\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isAllowedInTier0\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isAllowedInTier1\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isAudited\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"},{\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"}],\"name\":\"isInTier2WhiteList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityPairAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityPairLockerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityReleaseInDays\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxAllocationPerUserTierOne\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxAllocationPerUserTierTwo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxAllocationPerUserTierZero\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minAllocationPerUser\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newEndDate\",\"type\":\"uint256\"}],\"name\":\"postponeSale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"purchaseTokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"refundERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"saleInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"softCap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"hardCap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"saleStartTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"saleEndTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidityPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"listRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dexListRate\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"logoUrl\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"desc\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"website\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"twitter\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"telegram\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"discord\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"tokensOnSale\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"audit\",\"type\":\"bool\"}],\"name\":\"setAudited\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"kyc\",\"type\":\"bool\"}],\"name\":\"setKYC\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"setTier1TimeLineInHours\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"setZSalesTokenAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startReceivingBids\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"status\",\"outputs\":[{\"internalType\":\"enum Campaign.CampaignStatus\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256\",\"name\":\"purchasedAmount\",\"type\":\"uint256\"}],\"name\":\"submitBid\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"whitelistMerkleRoot\",\"type\":\"bytes32\"}],\"name\":\"submitTier2Whitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tierOnehardCap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tierTwohardCap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tierZerohardCap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalCoinInTierOne\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalCoinInTierTwo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalCoinInTierZero\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalCoinReceived\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalParticipants\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalTeamTokensToBeVested\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"logoUrl\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"desc\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"website\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"twitter\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"telegram\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"discord\",\"type\":\"string\"}],\"name\":\"updateCampaignFounderDetails\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tierOneHardCap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tierTwoHardCap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minAllocationPerUser\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxAllocationPerUserTierOne\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxAllocationPerUserTierTwo\",\"type\":\"uint256\"}],\"name\":\"updateTierDetails\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"useRaisedFundsVesting\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"useTokenVesting\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"useWhiteList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawOwnerTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"AddressEmptyCode(address)\":[{\"details\":\"There's no code at `target` (it is not a contract).\"}],\"AddressInsufficientBalance(address)\":[{\"details\":\"The ETH balance of the account is not enough to perform the operation.\"}],\"FailedInnerCall()\":[{\"details\":\"A call to an address target failed. The target may have reverted.\"}],\"InvalidInitialization()\":[{\"details\":\"The contract is already initialized.\"}],\"NotInitializing()\":[{\"details\":\"The contract is not initializing.\"}],\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}],\"ReentrancyGuardReentrantCall()\":[{\"details\":\"Unauthorized reentrant call.\"}],\"SafeERC20FailedOperation(address)\":[{\"details\":\"An operation with an ERC20 token failed.\"}]},\"events\":{\"Initialized(uint64)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"}},\"kind\":\"dev\",\"methods\":{\"constructor\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"withdrawFunds()\":{\"details\":\"Withdraw tokens or coin by user after end time If this project does not reach softcap, return their funds otherwise get tokens \"},\"withdrawOwnerTokens()\":{\"details\":\"Withdraw owner tokens If this project does not reach softcap\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"constructor\":{\"notice\":\"Do not leave an implementation contract uninitialized. An uninitialized implementation contract can be taken over by an attacker, which may impact the proxy.  To prevent the implementation contract from being used, you should invoke the _disableInitializers function in the constructor to automatically lock it when it is deployed\"},\"finalizeAndSetupLiquidity()\":{\"notice\":\"Setup liquidity and transfer all amounts according to defined percents, if softcap not reached set Refunded flag\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Campaign.sol\":\"Campaign\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2000},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/Clones.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/Clones.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\\n * deploying minimal proxy contracts, also known as \\\"clones\\\".\\n *\\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\\n *\\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\\n * deterministic method.\\n */\\nlibrary Clones {\\n    /**\\n     * @dev A clone instance deployment failed.\\n     */\\n    error ERC1167FailedCreateClone();\\n\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create opcode, which should never revert.\\n     */\\n    function clone(address implementation) internal returns (address instance) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Cleans the upper 96 bits of the `implementation` word, then packs the first 3 bytes\\n            // of the `implementation` address with the bytecode before the address.\\n            mstore(0x00, or(shr(0xe8, shl(0x60, implementation)), 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000))\\n            // Packs the remaining 17 bytes of `implementation` with the bytecode after the address.\\n            mstore(0x20, or(shl(0x78, implementation), 0x5af43d82803e903d91602b57fd5bf3))\\n            instance := create(0, 0x09, 0x37)\\n        }\\n        if (instance == address(0)) {\\n            revert ERC1167FailedCreateClone();\\n        }\\n    }\\n\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\\n     * the clones cannot be deployed twice at the same address.\\n     */\\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Cleans the upper 96 bits of the `implementation` word, then packs the first 3 bytes\\n            // of the `implementation` address with the bytecode before the address.\\n            mstore(0x00, or(shr(0xe8, shl(0x60, implementation)), 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000))\\n            // Packs the remaining 17 bytes of `implementation` with the bytecode after the address.\\n            mstore(0x20, or(shl(0x78, implementation), 0x5af43d82803e903d91602b57fd5bf3))\\n            instance := create2(0, 0x09, 0x37, salt)\\n        }\\n        if (instance == address(0)) {\\n            revert ERC1167FailedCreateClone();\\n        }\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(\\n        address implementation,\\n        bytes32 salt,\\n        address deployer\\n    ) internal pure returns (address predicted) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(add(ptr, 0x38), deployer)\\n            mstore(add(ptr, 0x24), 0x5af43d82803e903d91602b57fd5bf3ff)\\n            mstore(add(ptr, 0x14), implementation)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73)\\n            mstore(add(ptr, 0x58), salt)\\n            mstore(add(ptr, 0x78), keccak256(add(ptr, 0x0c), 0x37))\\n            predicted := keccak256(add(ptr, 0x43), 0x55)\\n        }\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(\\n        address implementation,\\n        bytes32 salt\\n    ) internal view returns (address predicted) {\\n        return predictDeterministicAddress(implementation, salt, address(this));\\n    }\\n}\\n\",\"keccak256\":\"0xd18408af8a91bedb3d56343eeb9b30eb852e6dea93a5e2d5c6db9ca4cb905155\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Storage of the initializable contract.\\n     *\\n     * It's implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions\\n     * when using with upgradeable contracts.\\n     *\\n     * @custom:storage-location erc7201:openzeppelin.storage.Initializable\\n     */\\n    struct InitializableStorage {\\n        /**\\n         * @dev Indicates that the contract has been initialized.\\n         */\\n        uint64 _initialized;\\n        /**\\n         * @dev Indicates that the contract is in the process of being initialized.\\n         */\\n        bool _initializing;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Initializable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant INITIALIZABLE_STORAGE = 0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00;\\n\\n    /**\\n     * @dev The contract is already initialized.\\n     */\\n    error InvalidInitialization();\\n\\n    /**\\n     * @dev The contract is not initializing.\\n     */\\n    error NotInitializing();\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint64 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that in the context of a constructor an `initializer` may be invoked any\\n     * number of times. This behavior in the constructor can be useful during testing and is not expected to be used in\\n     * production.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        // Cache values to avoid duplicated sloads\\n        bool isTopLevelCall = !$._initializing;\\n        uint64 initialized = $._initialized;\\n\\n        // Allowed calls:\\n        // - initialSetup: the contract is not in the initializing state and no previous version was\\n        //                 initialized\\n        // - construction: the contract is initialized at version 1 (no reininitialization) and the\\n        //                 current contract is just being deployed\\n        bool initialSetup = initialized == 0 && isTopLevelCall;\\n        bool construction = initialized == 1 && address(this).code.length == 0;\\n\\n        if (!initialSetup && !construction) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = 1;\\n        if (isTopLevelCall) {\\n            $._initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            $._initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: Setting the version to 2**64 - 1 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint64 version) {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing || $._initialized >= version) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = version;\\n        $._initializing = true;\\n        _;\\n        $._initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        _checkInitializing();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}.\\n     */\\n    function _checkInitializing() internal view virtual {\\n        if (!_isInitializing()) {\\n            revert NotInitializing();\\n        }\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing) {\\n            revert InvalidInitialization();\\n        }\\n        if ($._initialized != type(uint64).max) {\\n            $._initialized = type(uint64).max;\\n            emit Initialized(type(uint64).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint64) {\\n        return _getInitializableStorage()._initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _getInitializableStorage()._initializing;\\n    }\\n\\n    /**\\n     * @dev Returns a pointer to the storage namespace.\\n     */\\n    // solhint-disable-next-line var-name-mixedcase\\n    function _getInitializableStorage() private pure returns (InitializableStorage storage $) {\\n        assembly {\\n            $.slot := INITIALIZABLE_STORAGE\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x631188737069917d2f909d29ce62c4d48611d326686ba6683e26b72a23bfac0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` amount of tokens of type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the value of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(\\n        address[] calldata accounts,\\n        uint256[] calldata ids\\n    ) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers a `value` amount of tokens of type `id` from `from` to `to`.\\n     *\\n     * WARNING: This function can potentially allow a reentrancy attack when transferring tokens\\n     * to an untrusted contract, when invoking {onERC1155Received} on the receiver.\\n     * Ensure to follow the checks-effects-interactions pattern and consider employing\\n     * reentrancy guards when interacting with untrusted contracts.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `value` amount.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 value, bytes calldata data) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * WARNING: This function can potentially allow a reentrancy attack when transferring tokens\\n     * to an untrusted contract, when invoking {onERC1155BatchReceived} on the receiver.\\n     * Ensure to follow the checks-effects-interactions pattern and consider employing\\n     * reentrancy guards when interacting with untrusted contracts.\\n     *\\n     * Emits either a {TransferSingle} or a {TransferBatch} event, depending on the length of the array arguments.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `values` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x6caffc9cfdc623eca9f87a686071708af5d5c17454d65022843fdddbc53c0cce\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x6008dabfe393240d73d7dd7688033f72740d570aa422254d29a7dce8568f3aff\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\nimport {IERC20Permit} from \\\"../extensions/IERC20Permit.sol\\\";\\nimport {Address} from \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev An operation with an ERC20 token failed.\\n     */\\n    error SafeERC20FailedOperation(address token);\\n\\n    /**\\n     * @dev Indicates a failed `decreaseAllowance` request.\\n     */\\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        forceApprove(token, spender, oldAllowance + value);\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\\n     * value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\\n        unchecked {\\n            uint256 currentAllowance = token.allowance(address(this), spender);\\n            if (currentAllowance < requestedDecrease) {\\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\\n            }\\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data);\\n        if (returndata.length != 0 && !abi.decode(returndata, (bool))) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return success && (returndata.length == 0 || abi.decode(returndata, (bool))) && address(token).code.length > 0;\\n    }\\n}\\n\",\"keccak256\":\"0x37bb49513c49c87c4642a891b13b63571bc87013dde806617aa1efb54605f386\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error AddressInsufficientBalance(address account);\\n\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedInnerCall();\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert FailedInnerCall();\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {FailedInnerCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\\n     * unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {FailedInnerCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert FailedInnerCall();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaf28a975a78550e45f65e559a3ad6a5ad43b9b8a37366999abd1b7084eb70721\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    constructor() {\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if (_status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xf980daa263b661ab8ddee7d4fd833c7da7e7995e2c359ff1f17e67e4112f2236\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/cryptography/MerkleProof.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev These functions deal with verification of Merkle Tree proofs.\\n *\\n * The tree and the proofs can be generated using our\\n * https://github.com/OpenZeppelin/merkle-tree[JavaScript library].\\n * You will find a quickstart guide in the readme.\\n *\\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\\n * hashing, or use a hash function other than keccak256 for hashing leaves.\\n * This is because the concatenation of a sorted pair of internal nodes in\\n * the Merkle tree could be reinterpreted as a leaf value.\\n * OpenZeppelin's JavaScript library generates Merkle trees that are safe\\n * against this attack out of the box.\\n */\\nlibrary MerkleProof {\\n    /**\\n     *@dev The multiproof provided is not valid.\\n     */\\n    error MerkleProofInvalidMultiproof();\\n\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     */\\n    function verify(bytes32[] memory proof, bytes32 root, bytes32 leaf) internal pure returns (bool) {\\n        return processProof(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {verify}\\n     */\\n    function verifyCalldata(bytes32[] calldata proof, bytes32 root, bytes32 leaf) internal pure returns (bool) {\\n        return processProofCalldata(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. When processing the proof, the pairs\\n     * of leafs & pre-images are assumed to be sorted.\\n     */\\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = _hashPair(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {processProof}\\n     */\\n    function processProofCalldata(bytes32[] calldata proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = _hashPair(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Returns true if the `leaves` can be simultaneously proven to be a part of a Merkle tree defined by\\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\\n     *\\n     * CAUTION: Not all Merkle trees admit multiproofs. See {processMultiProof} for details.\\n     */\\n    function multiProofVerify(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProof(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {multiProofVerify}\\n     *\\n     * CAUTION: Not all Merkle trees admit multiproofs. See {processMultiProof} for details.\\n     */\\n    function multiProofVerifyCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProofCalldata(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\\n     * proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\\n     * leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\\n     * respectively.\\n     *\\n     * CAUTION: Not all Merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\\n     * is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\\n     * tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\\n     */\\n    function processMultiProof(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuilds the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the Merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 proofLen = proof.length;\\n        uint256 totalHashes = proofFlags.length;\\n\\n        // Check proof validity.\\n        if (leavesLen + proofLen != totalHashes + 1) {\\n            revert MerkleProofInvalidMultiproof();\\n        }\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value from the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < totalHashes; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i]\\n                ? (leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++])\\n                : proof[proofPos++];\\n            hashes[i] = _hashPair(a, b);\\n        }\\n\\n        if (totalHashes > 0) {\\n            if (proofPos != proofLen) {\\n                revert MerkleProofInvalidMultiproof();\\n            }\\n            unchecked {\\n                return hashes[totalHashes - 1];\\n            }\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    /**\\n     * @dev Calldata version of {processMultiProof}.\\n     *\\n     * CAUTION: Not all Merkle trees admit multiproofs. See {processMultiProof} for details.\\n     */\\n    function processMultiProofCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuilds the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the Merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 proofLen = proof.length;\\n        uint256 totalHashes = proofFlags.length;\\n\\n        // Check proof validity.\\n        if (leavesLen + proofLen != totalHashes + 1) {\\n            revert MerkleProofInvalidMultiproof();\\n        }\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value from the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < totalHashes; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i]\\n                ? (leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++])\\n                : proof[proofPos++];\\n            hashes[i] = _hashPair(a, b);\\n        }\\n\\n        if (totalHashes > 0) {\\n            if (proofPos != proofLen) {\\n                revert MerkleProofInvalidMultiproof();\\n            }\\n            unchecked {\\n                return hashes[totalHashes - 1];\\n            }\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    /**\\n     * @dev Sorts the pair (a, b) and hashes the result.\\n     */\\n    function _hashPair(bytes32 a, bytes32 b) private pure returns (bytes32) {\\n        return a < b ? _efficientHash(a, b) : _efficientHash(b, a);\\n    }\\n\\n    /**\\n     * @dev Implementation of keccak256(abi.encode(a, b)) that doesn't allocate or expand memory.\\n     */\\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, a)\\n            mstore(0x20, b)\\n            value := keccak256(0x00, 0x40)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x6400c4bee15052e043e5d10315135972529bd1c8012f43da494dc6b4f4661058\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableMap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/structs/EnumerableMap.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableMap.js.\\n\\npragma solidity ^0.8.20;\\n\\nimport {EnumerableSet} from \\\"./EnumerableSet.sol\\\";\\n\\n/**\\n * @dev Library for managing an enumerable variant of Solidity's\\n * https://solidity.readthedocs.io/en/latest/types.html#mapping-types[`mapping`]\\n * type.\\n *\\n * Maps have the following properties:\\n *\\n * - Entries are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Entries are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableMap for EnumerableMap.UintToAddressMap;\\n *\\n *     // Declare a set state variable\\n *     EnumerableMap.UintToAddressMap private myMap;\\n * }\\n * ```\\n *\\n * The following map types are supported:\\n *\\n * - `uint256 -> address` (`UintToAddressMap`) since v3.0.0\\n * - `address -> uint256` (`AddressToUintMap`) since v4.6.0\\n * - `bytes32 -> bytes32` (`Bytes32ToBytes32Map`) since v4.6.0\\n * - `uint256 -> uint256` (`UintToUintMap`) since v4.7.0\\n * - `bytes32 -> uint256` (`Bytes32ToUintMap`) since v4.7.0\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableMap, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableMap.\\n * ====\\n */\\nlibrary EnumerableMap {\\n    using EnumerableSet for EnumerableSet.Bytes32Set;\\n\\n    // To implement this library for multiple types with as little code repetition as possible, we write it in\\n    // terms of a generic Map type with bytes32 keys and values. The Map implementation uses private functions,\\n    // and user-facing implementations such as `UintToAddressMap` are just wrappers around the underlying Map.\\n    // This means that we can only create new EnumerableMaps for types that fit in bytes32.\\n\\n    /**\\n     * @dev Query for a nonexistent map key.\\n     */\\n    error EnumerableMapNonexistentKey(bytes32 key);\\n\\n    struct Bytes32ToBytes32Map {\\n        // Storage of keys\\n        EnumerableSet.Bytes32Set _keys;\\n        mapping(bytes32 key => bytes32) _values;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(Bytes32ToBytes32Map storage map, bytes32 key, bytes32 value) internal returns (bool) {\\n        map._values[key] = value;\\n        return map._keys.add(key);\\n    }\\n\\n    /**\\n     * @dev Removes a key-value pair from a map. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(Bytes32ToBytes32Map storage map, bytes32 key) internal returns (bool) {\\n        delete map._values[key];\\n        return map._keys.remove(key);\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(Bytes32ToBytes32Map storage map, bytes32 key) internal view returns (bool) {\\n        return map._keys.contains(key);\\n    }\\n\\n    /**\\n     * @dev Returns the number of key-value pairs in the map. O(1).\\n     */\\n    function length(Bytes32ToBytes32Map storage map) internal view returns (uint256) {\\n        return map._keys.length();\\n    }\\n\\n    /**\\n     * @dev Returns the key-value pair stored at position `index` in the map. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of entries inside the\\n     * array, and it may change when more entries are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32ToBytes32Map storage map, uint256 index) internal view returns (bytes32, bytes32) {\\n        bytes32 key = map._keys.at(index);\\n        return (key, map._values[key]);\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`. O(1).\\n     * Does not revert if `key` is not in the map.\\n     */\\n    function tryGet(Bytes32ToBytes32Map storage map, bytes32 key) internal view returns (bool, bytes32) {\\n        bytes32 value = map._values[key];\\n        if (value == bytes32(0)) {\\n            return (contains(map, key), bytes32(0));\\n        } else {\\n            return (true, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`. O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(Bytes32ToBytes32Map storage map, bytes32 key) internal view returns (bytes32) {\\n        bytes32 value = map._values[key];\\n        if (value == 0 && !contains(map, key)) {\\n            revert EnumerableMapNonexistentKey(key);\\n        }\\n        return value;\\n    }\\n\\n    /**\\n     * @dev Return the an array containing all the keys\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the map grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function keys(Bytes32ToBytes32Map storage map) internal view returns (bytes32[] memory) {\\n        return map._keys.values();\\n    }\\n\\n    // UintToUintMap\\n\\n    struct UintToUintMap {\\n        Bytes32ToBytes32Map _inner;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(UintToUintMap storage map, uint256 key, uint256 value) internal returns (bool) {\\n        return set(map._inner, bytes32(key), bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a map. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(UintToUintMap storage map, uint256 key) internal returns (bool) {\\n        return remove(map._inner, bytes32(key));\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(UintToUintMap storage map, uint256 key) internal view returns (bool) {\\n        return contains(map._inner, bytes32(key));\\n    }\\n\\n    /**\\n     * @dev Returns the number of elements in the map. O(1).\\n     */\\n    function length(UintToUintMap storage map) internal view returns (uint256) {\\n        return length(map._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the element stored at position `index` in the map. O(1).\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintToUintMap storage map, uint256 index) internal view returns (uint256, uint256) {\\n        (bytes32 key, bytes32 value) = at(map._inner, index);\\n        return (uint256(key), uint256(value));\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`. O(1).\\n     * Does not revert if `key` is not in the map.\\n     */\\n    function tryGet(UintToUintMap storage map, uint256 key) internal view returns (bool, uint256) {\\n        (bool success, bytes32 value) = tryGet(map._inner, bytes32(key));\\n        return (success, uint256(value));\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`. O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(UintToUintMap storage map, uint256 key) internal view returns (uint256) {\\n        return uint256(get(map._inner, bytes32(key)));\\n    }\\n\\n    /**\\n     * @dev Return the an array containing all the keys\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the map grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function keys(UintToUintMap storage map) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = keys(map._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintToAddressMap\\n\\n    struct UintToAddressMap {\\n        Bytes32ToBytes32Map _inner;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(UintToAddressMap storage map, uint256 key, address value) internal returns (bool) {\\n        return set(map._inner, bytes32(key), bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a map. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(UintToAddressMap storage map, uint256 key) internal returns (bool) {\\n        return remove(map._inner, bytes32(key));\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(UintToAddressMap storage map, uint256 key) internal view returns (bool) {\\n        return contains(map._inner, bytes32(key));\\n    }\\n\\n    /**\\n     * @dev Returns the number of elements in the map. O(1).\\n     */\\n    function length(UintToAddressMap storage map) internal view returns (uint256) {\\n        return length(map._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the element stored at position `index` in the map. O(1).\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintToAddressMap storage map, uint256 index) internal view returns (uint256, address) {\\n        (bytes32 key, bytes32 value) = at(map._inner, index);\\n        return (uint256(key), address(uint160(uint256(value))));\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`. O(1).\\n     * Does not revert if `key` is not in the map.\\n     */\\n    function tryGet(UintToAddressMap storage map, uint256 key) internal view returns (bool, address) {\\n        (bool success, bytes32 value) = tryGet(map._inner, bytes32(key));\\n        return (success, address(uint160(uint256(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`. O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(UintToAddressMap storage map, uint256 key) internal view returns (address) {\\n        return address(uint160(uint256(get(map._inner, bytes32(key)))));\\n    }\\n\\n    /**\\n     * @dev Return the an array containing all the keys\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the map grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function keys(UintToAddressMap storage map) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = keys(map._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressToUintMap\\n\\n    struct AddressToUintMap {\\n        Bytes32ToBytes32Map _inner;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(AddressToUintMap storage map, address key, uint256 value) internal returns (bool) {\\n        return set(map._inner, bytes32(uint256(uint160(key))), bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a map. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(AddressToUintMap storage map, address key) internal returns (bool) {\\n        return remove(map._inner, bytes32(uint256(uint160(key))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(AddressToUintMap storage map, address key) internal view returns (bool) {\\n        return contains(map._inner, bytes32(uint256(uint160(key))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of elements in the map. O(1).\\n     */\\n    function length(AddressToUintMap storage map) internal view returns (uint256) {\\n        return length(map._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the element stored at position `index` in the map. O(1).\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressToUintMap storage map, uint256 index) internal view returns (address, uint256) {\\n        (bytes32 key, bytes32 value) = at(map._inner, index);\\n        return (address(uint160(uint256(key))), uint256(value));\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`. O(1).\\n     * Does not revert if `key` is not in the map.\\n     */\\n    function tryGet(AddressToUintMap storage map, address key) internal view returns (bool, uint256) {\\n        (bool success, bytes32 value) = tryGet(map._inner, bytes32(uint256(uint160(key))));\\n        return (success, uint256(value));\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`. O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(AddressToUintMap storage map, address key) internal view returns (uint256) {\\n        return uint256(get(map._inner, bytes32(uint256(uint160(key)))));\\n    }\\n\\n    /**\\n     * @dev Return the an array containing all the keys\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the map grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function keys(AddressToUintMap storage map) internal view returns (address[] memory) {\\n        bytes32[] memory store = keys(map._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // Bytes32ToUintMap\\n\\n    struct Bytes32ToUintMap {\\n        Bytes32ToBytes32Map _inner;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(Bytes32ToUintMap storage map, bytes32 key, uint256 value) internal returns (bool) {\\n        return set(map._inner, key, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a map. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(Bytes32ToUintMap storage map, bytes32 key) internal returns (bool) {\\n        return remove(map._inner, key);\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(Bytes32ToUintMap storage map, bytes32 key) internal view returns (bool) {\\n        return contains(map._inner, key);\\n    }\\n\\n    /**\\n     * @dev Returns the number of elements in the map. O(1).\\n     */\\n    function length(Bytes32ToUintMap storage map) internal view returns (uint256) {\\n        return length(map._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the element stored at position `index` in the map. O(1).\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32ToUintMap storage map, uint256 index) internal view returns (bytes32, uint256) {\\n        (bytes32 key, bytes32 value) = at(map._inner, index);\\n        return (key, uint256(value));\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`. O(1).\\n     * Does not revert if `key` is not in the map.\\n     */\\n    function tryGet(Bytes32ToUintMap storage map, bytes32 key) internal view returns (bool, uint256) {\\n        (bool success, bytes32 value) = tryGet(map._inner, key);\\n        return (success, uint256(value));\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`. O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(Bytes32ToUintMap storage map, bytes32 key) internal view returns (uint256) {\\n        return uint256(get(map._inner, key));\\n    }\\n\\n    /**\\n     * @dev Return the an array containing all the keys\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the map grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function keys(Bytes32ToUintMap storage map) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = keys(map._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0xa3edd94148e931d8a37353624ea57afa1c679b6fe06b7059ccdc8da78a90c123\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position is the index of the value in the `values` array plus 1.\\n        // Position 0 is used to mean a value is not in the set.\\n        mapping(bytes32 value => uint256) _positions;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._positions[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We cache the value's position to prevent multiple reads from the same storage slot\\n        uint256 position = set._positions[value];\\n\\n        if (position != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 valueIndex = position - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (valueIndex != lastIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the lastValue to the index where the value to delete is\\n                set._values[valueIndex] = lastValue;\\n                // Update the tracked position of the lastValue (that was just moved)\\n                set._positions[lastValue] = position;\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the tracked position for the deleted slot\\n            delete set._positions[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._positions[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x86c1470cbfd878491e5de030072b647352d36bd27122cffb928970b1945282aa\",\"license\":\"MIT\"},\"contracts/Campaign.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.28;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\r\\n// import \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\r\\n// import \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\nimport {IERC1155} from \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\r\\n// import \\\"@openzeppelin/contracts/utils/structs/EnumerableMap.sol\\\";\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport './Lockers/DexLockerFactory.sol';\\r\\nimport {IDexLocker} from './Lockers/DexLocker.sol';\\r\\n// import './Lockers/TokenLocker.sol';\\r\\nimport \\\"./Lockers/VestSchedule.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\\\";\\r\\nimport \\\"hardhat/console.sol\\\";\\r\\nimport {IDexRouter, IDexFactory} from \\\"./IDexRouter.sol\\\";\\r\\nimport {ICampaignList} from \\\"./CampaignList.sol\\\";\\r\\nimport \\\"./Errors.sol\\\";\\r\\n\\r\\nstruct PlatFormDetails{\\r\\n  address admin; //zsales admin - can setkyc and audited\\r\\n  address zsalesTokenAddress;\\r\\n  uint zsaleFee;  //2%   - percent of native currency to take\\r\\n  uint zsaleTokenFee;  //2% - percent fee of token to take\\r\\n  address zsalesWalletAddress ; // receives commissions    \\r\\n  address zsalesNFTTokenAddress;\\r\\n  uint maxTiersToCheckForNFT;\\r\\n}\\r\\n\\r\\ncontract Campaign is Initializable,Ownable, ReentrancyGuard {\\r\\n  using SafeERC20 for IERC20;\\r\\n  error InsufficientBalance();\\r\\n  error NoSendValue();\\r\\n\\r\\n  uint256 constant private MAX_INT = 2**256 - 1;\\r\\n\\r\\n  event AdminOwnershipTransferred(address indexed previousAdmin, address indexed newAdmin);\\r\\n  event ValueReceived(address user, uint amount);\\r\\n  event Withdrawn(address user, uint amount);\\r\\n  event Refunded(address user, uint amount);\\r\\n  event SoldOut();\\r\\n  event LiquidityAddedToRouter(address indexed router, address indexed token1,address indexed token2, uint amountToken1, uint amountToken2);\\r\\n\\r\\n  struct CampaignSaleInfo {\\r\\n      //token attributes\\r\\n      address   tokenAddress; \\r\\n      uint256  softCap; // Soft cap in coin\\r\\n      uint256  hardCap; // Max cap in coin\\r\\n      uint256  saleStartTime; // start sale time\\r\\n      uint256  saleEndTime; // end sale time\\r\\n      uint   liquidityPercent; // multiplied by 100 e.g 45% is 4500\\r\\n      uint   listRate; \\r\\n      uint   dexListRate;\\r\\n      // RefundType  refundType;\\r\\n      string logoUrl;\\r\\n      string desc;\\r\\n      string website;\\r\\n      string twitter;\\r\\n      string telegram;\\r\\n      string discord;\\r\\n      uint tokensOnSale;\\r\\n      // string bannerImage;\\r\\n      \\r\\n  }\\r\\n\\r\\n  enum CampaignStatus{ \\r\\n    CREATED,\\r\\n    TOKENS_SUBMITTED,//Owner has transferred the correct no of tokens and campaign is ready to receive\\r\\n    CANCELLED, // Cancelled before the start date\\r\\n    \\r\\n    FAILED, // WIll need refund\\r\\n    LIQUIDITY_SETUP\\r\\n\\r\\n  }\\r\\n\\r\\n  bool   public useWhiteList;//Use in only Tier 2\\r\\n  bool   public hasKYC;\\r\\n  uint public totalTeamTokensToBeVested=0;\\r\\n  bool _isAudited; \\r\\n  string public auditUrl;\\r\\n  CampaignStatus public  status = CampaignStatus.CREATED;\\r\\n\\r\\n  address public liquidityPairAddress;\\r\\n  address public liquidityPairLockerAddress;\\r\\n  uint256 public liquidityReleaseInDays; // days to release Lp tokens to owner\\r\\n  \\r\\n  \\r\\n  \\r\\n  CampaignSaleInfo public  saleInfo;\\r\\n  \\r\\n  \\r\\n  address public dexRouterAddress;\\r\\n  uint256 public totalCoinReceived; // total  received\\r\\n  uint256 public totalCoinInTierZero;\\r\\n  uint256 public totalCoinInTierOne; // total coin for tier one\\r\\n  uint256 public totalCoinInTierTwo; // total coin for tier Tier\\r\\n\\r\\n  address public purchaseTokenAddress=address(0); // Token address for Purchases for this campaign - address 0 is native currency\\r\\n  \\r\\n\\r\\n  uint public totalParticipants; // total participants in ido\\r\\n  \\r\\n\\r\\n  PlatFormDetails zsalesPlatformDetails;\\r\\n  \\r\\n  address public _campaignFactoryAddress ;\\r\\n\\r\\n  uint private tier1TimeLineInHours = 2; // e.g 2 hours before startime\\r\\n  uint private tier0TimeLineInHours = 3;\\r\\n\\r\\n  bool private ownerHasWithdrawnTokens=false;\\r\\n  \\r\\n  // max cap per tier\\r\\n  uint public tierZerohardCap;\\r\\n  uint public tierOnehardCap;\\r\\n  uint public tierTwohardCap;\\r\\n    \\r\\n  //total users per tier\\r\\n  // uint public totalUserInTierZero;\\r\\n  // uint public totalUserInTierOne;\\r\\n  // uint public totalUserInTierTwo;\\r\\n  \\r\\n  bool public useTokenVesting;\\r\\n  bool public useRaisedFundsVesting;\\r\\n\\r\\n\\r\\n  //Tier 0 - holders of our NFT\\r\\n  //Tier 1 - holders of our coin\\r\\n  //Tier 2 - Whitelisted or public   \\r\\n  uint public minAllocationPerUser;\\r\\n  //max allocations per user in a tier\\r\\n  uint public maxAllocationPerUserTierZero;\\r\\n  uint public maxAllocationPerUserTierOne;\\r\\n  uint public maxAllocationPerUserTierTwo; \\r\\n  \\r\\n  bytes32 private _whitelistTierTwoMerkleRoot;\\r\\n  \\r\\n\\r\\n  uint public campaignKey;\\r\\n  // enum RefundType{ BURN, REFUND }\\r\\n  \\r\\n  \\r\\n\\r\\n  //mapping the user purchase per tier\\r\\n  mapping(address => uint) public buyInZeroTier;\\r\\n  mapping(address => uint) public buyInOneTier;\\r\\n  mapping(address => uint) public buyInTwoTier;\\r\\n  mapping(address => uint) public buyInAllTiers;\\r\\n  DexLockerFactory private _dexLockerFactory;\\r\\n  \\r\\n  IDexLocker public _dexLocker;\\r\\n  uint private tokenDecimals;\\r\\n  uint private purchaseCoinDecimals;\\r\\n  \\r\\n\\r\\n  ///Do not leave an implementation contract uninitialized. An uninitialized implementation contract can be taken over by an attacker, which may impact the proxy. \\r\\n  /// To prevent the implementation contract from being used, you should invoke the _disableInitializers function in the constructor to automatically lock it when it is deployed\\r\\n  /// @custom:oz-upgrades-unsafe-allow constructor\\r\\n  constructor() Ownable(msg.sender) {\\r\\n      _disableInitializers();\\r\\n  }\\r\\n\\r\\n  function initialize(\\r\\n    \\r\\n    /** address campaignOwner,\\r\\n    /* address campaignFactory,\\r\\n    /* address  _saletokenAddress, */\\r\\n    /* address  _purchaseTokenAddress, */\\r\\n    address[4] memory addresses,\\r\\n\\r\\n    uint tokensOnSale,\\r\\n\\r\\n    /** uint256 _normalizedTo18DecimalsSoftCap,\\r\\n     * uint256 __normalizedTo18DecimalsHardCap,\\r\\n     * uint256 _saleStartTime,\\r\\n     * uint256 _saleEndTime, \\r\\n     * uint256 _nomrlaizedTierOneHardCap, \\r\\n     * uint256 _nomrlaizedTierTwoHardCap,\\r\\n     * uint _minAllocationPerUser, \\r\\n     * uint256 _maxAllocationPerUserTierOne, \\r\\n     * uint256 _maxAllocationPerUserTierTwo ,\\r\\n     * uint _campaignKey,*/\\r\\n    uint256[10] memory capAndDate,  \\r\\n    \\r\\n    // RefundType _refundType, \\r\\n    address _dexRouterAddress,\\r\\n\\r\\n    /**uint _liquidityPercent, \\r\\n    /* uint liquidityReleaseTime,\\r\\n    /* uint _listRate, \\r\\n    /* uint _dexListRate,**/\\r\\n    uint[4] memory liquidityAllocationAndRates,\\r\\n\\r\\n    /**uint totalTeamTokensToBeVested, \\r\\n    /* uint firstReleasePercent,  \\r\\n    /* uint firstReleaseDays,\\r\\n    /* uint subsequentReleasePercent, \\r\\n    /* uint subsequentReleaseDays,,**/\\r\\n    uint256[5] memory teamTokenVestingDetails,\\r\\n\\r\\n    /**uint percentToLockx100, \\r\\n    /* uint firstReleaseDays,  \\r\\n    /* uint percentToReleaseEachTime**/\\r\\n    uint256[3] memory raisedFundVestingDetails,\\r\\n    \\r\\n    // UseTeamTokenVesting,\\r\\n    // UseRaisedFundVesting\\r\\n    bool[2] memory _useTokenOrRaisedFundVesting,\\r\\n    // VestSchedule[8] memory teamTokenVestingDetails, \\r\\n\\r\\n    \\r\\n    string[6] memory founderInfo,\\r\\n    DexLockerFactory dexLockerFactory \\r\\n  ) public payable initializer {\\r\\n\\r\\n    {\\r\\n      // require(capAndDate[3] > capAndDate[2], \\\"Sale End time needs to be above start time\\\");\\r\\n      // require(liquidityAllocationAndRates[0] >= 5100, \\\"Liquidity allowed is > 51 %\\\");\\r\\n      if (capAndDate[3] <= capAndDate[2]) revert SaleEndTimeBeforeStartTime();\\r\\n      if (liquidityAllocationAndRates[0] < 5100) revert LiquidityAboveLimit(5100);\\r\\n\\r\\n      _campaignFactoryAddress= addresses[1];\\r\\n      _setDefaultValues();\\r\\n      campaignKey=capAndDate[9];\\r\\n      \\r\\n      _dexLockerFactory=dexLockerFactory;\\r\\n      purchaseTokenAddress=addresses[3]; \\r\\n    }\\r\\n    \\r\\n      \\r\\n    // //block scopin to avoid stack too deep \\r\\n    {\\r\\n      \\r\\n      saleInfo = CampaignSaleInfo({\\r\\n        tokenAddress: addresses[2],\\r\\n        softCap: capAndDate[0],\\r\\n        hardCap: capAndDate[1],\\r\\n        saleStartTime: capAndDate[2], \\r\\n        saleEndTime: capAndDate[3],   \\r\\n        liquidityPercent: liquidityAllocationAndRates[0],\\r\\n        listRate: liquidityAllocationAndRates[2],\\r\\n        dexListRate: liquidityAllocationAndRates[3],\\r\\n        // refundType: _refundType, \\r\\n        logoUrl: founderInfo[0],\\r\\n        desc: founderInfo[1],\\r\\n        website: founderInfo[2],\\r\\n        twitter: founderInfo[3],\\r\\n        telegram: founderInfo[4],\\r\\n        discord: founderInfo[5],\\r\\n        tokensOnSale: tokensOnSale\\r\\n      });\\r\\n\\r\\n      dexRouterAddress=_dexRouterAddress; \\r\\n    }        \\r\\n    \\r\\n    \\r\\n    \\r\\n    { \\r\\n          // _updateTierDetails(capAndDate[4], capAndDate[5], capAndDate[6],capAndDate[7], capAndDate[8]);\\r\\n      _updateTierDetails(capAndDate);\\r\\n    \\r\\n\\r\\n      _transferOwnership(addresses[0]);\\r\\n      \\r\\n\\r\\n      _updateLockDetails(liquidityAllocationAndRates[1], _useTokenOrRaisedFundVesting[0], teamTokenVestingDetails,_useTokenOrRaisedFundVesting[1], raisedFundVestingDetails );\\r\\n    }\\r\\n    \\r\\n  }\\r\\n\\r\\n  //needed since initializable contracts do not have constructors\\r\\n  function _setDefaultValues() private {\\r\\n    //status = CampaignStatus.CREATED;\\r\\n    tier0TimeLineInHours = 3; // e.g 3 hours before startime\\r\\n    tier1TimeLineInHours = 2; // e.g 2 hours before startime\\r\\n\\r\\n    \\r\\n    ICampaignList cList = ICampaignList(_campaignFactoryAddress);\\r\\n    zsalesPlatformDetails= PlatFormDetails({\\r\\n      admin: cList.zsalesAdmin(), //zsales admin - can setkyc and audited\\r\\n      zsalesTokenAddress : cList.zsalesTokenAddress(),\\r\\n      zsaleFee : cList.zsaleFee(),  //2%   - percent of native currency to take\\r\\n      zsaleTokenFee : cList.zsaleTokenFee(),  //2% - percent fee of token to take\\r\\n      zsalesWalletAddress : cList.zsalesWalletAddress(), // receives commissions      \\r\\n      zsalesNFTTokenAddress: cList.zsalesNFTTokenAddress(),\\r\\n      maxTiersToCheckForNFT: cList.maxTiersToCheckForNFT()\\r\\n    });\\r\\n    // _admin= cList.zsalesAdmin(); //zsales admin - can setkyc and audited\\r\\n    // zsalesTokenAddress = cList.zsalesTokenAddress();\\r\\n    // zsaleFee = cList.zsaleFee();  //2%   - percent of native currency to take\\r\\n    // zsaleTokenFee = cList.zsaleTokenFee();  //2% - percent fee of token to take\\r\\n    // zsalesWalletAddress = cList.zsalesWalletAddress() ; // receives commissions\\r\\n    \\r\\n    // zsalesNFTTokenAddress= cList.zsalesNFTTokenAddress();\\r\\n  }\\r\\n  \\r\\n  // function to update other details not initialized in constructor - this is bcos solidity limits how many variables u can pass in at once\\r\\n  function _updateLockDetails(\\r\\n    uint liquidityReleaseTimeDays, //Time to add to startTime in days\\r\\n    bool _useTokenVesting,\\r\\n    uint256[5] memory teamTokenVestingDetails,\\r\\n    bool _useRaisedFundsVesting, \\r\\n    uint256[3] memory raisedFundVestingDetails\\r\\n      \\r\\n  ) private /*public onlyOwner*/ {\\r\\n    liquidityReleaseInDays  = liquidityReleaseTimeDays;\\r\\n    useTokenVesting=_useTokenVesting;\\r\\n    useRaisedFundsVesting=_useRaisedFundsVesting;\\r\\n\\r\\n    \\r\\n    //Set dexLock\\r\\n    _dexLocker = IDexLocker(payable(_dexLockerFactory.createDexLocker(dexRouterAddress,saleInfo.tokenAddress, purchaseTokenAddress, address(this), msg.sender) ) );\\r\\n    \\r\\n    \\r\\n    _dexLocker.setupLock([saleInfo.softCap,saleInfo.hardCap],  [saleInfo.listRate,  saleInfo.dexListRate],useTokenVesting, teamTokenVestingDetails, _useRaisedFundsVesting,  raisedFundVestingDetails);\\r\\n    \\r\\n    status = CampaignStatus.CREATED;\\r\\n    totalTeamTokensToBeVested = teamTokenVestingDetails[0];\\r\\n\\r\\n  }\\r\\n  \\r\\n  function _updateCampaignFounderDetails(\\r\\n    string memory logoUrl,\\r\\n    string memory desc,\\r\\n    string memory website,\\r\\n    string memory twitter,\\r\\n    string memory telegram,\\r\\n    string memory discord\\r\\n  ) private {\\r\\n    saleInfo.logoUrl= logoUrl;\\r\\n    saleInfo.desc= desc;\\r\\n    saleInfo.website= website;\\r\\n    saleInfo.twitter= twitter;\\r\\n    saleInfo.telegram= telegram;\\r\\n    saleInfo.discord= discord;\\r\\n  }\\r\\n\\r\\n  function updateCampaignFounderDetails(\\r\\n    string memory logoUrl,\\r\\n    string memory desc,\\r\\n    string memory website,\\r\\n    string memory twitter,\\r\\n    string memory telegram,\\r\\n    string memory discord\\r\\n  ) external onlyOwner {       \\r\\n    if (block.timestamp > saleInfo.saleStartTime) revert UpdateAfterSaleStartTime();\\r\\n    _updateCampaignFounderDetails(logoUrl,desc,website,twitter,telegram,discord);\\r\\n  }\\r\\n\\r\\n  function _updateTierDetails(uint256[10] memory capAndDate) private {\\r\\n    \\r\\n    _updateTierDetails(capAndDate[4], capAndDate[5], capAndDate[6],capAndDate[7], capAndDate[8]);\\r\\n  }\\r\\n    \\r\\n  // function to update the tiers users value manually\\r\\n  function _updateTierDetails(uint256 _tierOneHardCap, uint256 _tierTwoHardCap, uint256 _minAllocationPerUser, uint256 _maxAllocationPerUserTierOne, uint256 _maxAllocationPerUserTierTwo) private {\\r\\n    \\r\\n    tokenDecimals = IERC20Metadata(saleInfo.tokenAddress).decimals();\\r\\n    purchaseCoinDecimals=18;\\r\\n    if(purchaseTokenAddress!=address(0)){\\r\\n      purchaseCoinDecimals = IERC20Metadata(purchaseTokenAddress).decimals();\\r\\n    }\\r\\n    \\r\\n    if (_tierOneHardCap < saleInfo.hardCap * 2500 / 10000) revert TierCapTooLow(25);\\r\\n    // if (_tierOneHardCap + _tierTwoHardCap != saleInfo.hardCap) revert TierCapsExceedHardCap();\\r\\n    if (_tierOneHardCap > saleInfo.hardCap) revert TierOneCapExceedsHardCap();\\r\\n    if (_tierTwoHardCap > saleInfo.hardCap) revert TierTwoCapExceedsHardCap();\\r\\n\\r\\n    if (_minAllocationPerUser < 0) revert MinAllocationOutOfRange();\\r\\n    if (_maxAllocationPerUserTierOne <= 0) revert TierOneMaxAllocationOutOfRange();\\r\\n    if (_maxAllocationPerUserTierTwo <= 0) revert TierTwoMaxAllocationOutOfRange();\\r\\n    \\r\\n    \\r\\n    tierZerohardCap = _tierOneHardCap;\\r\\n    tierOnehardCap =_tierOneHardCap;\\r\\n    tierTwohardCap = _tierTwoHardCap;    \\r\\n    \\r\\n    minAllocationPerUser=_minAllocationPerUser; \\r\\n    maxAllocationPerUserTierZero = _maxAllocationPerUserTierOne;//same alloc for tier 0 and 1\\r\\n    maxAllocationPerUserTierOne = _maxAllocationPerUserTierOne;\\r\\n    maxAllocationPerUserTierTwo = _maxAllocationPerUserTierTwo;\\r\\n  }\\r\\n\\r\\n  function updateTierDetails(uint256 _tierOneHardCap, uint256 _tierTwoHardCap, uint256 _minAllocationPerUser, uint256 _maxAllocationPerUserTierOne, uint256 _maxAllocationPerUserTierTwo) public onlyOwner {\\r\\n    \\r\\n    if(block.timestamp > saleInfo.saleStartTime){\\r\\n      revert UpdateAfterSaleStartTime();\\r\\n    }\\r\\n    _updateTierDetails(_tierOneHardCap, _tierTwoHardCap, _minAllocationPerUser, _maxAllocationPerUserTierOne, _maxAllocationPerUserTierTwo);    \\r\\n  }\\r\\n\\r\\n  function _startReceivingBids() private \\r\\n  {    \\r\\n    status = CampaignStatus.TOKENS_SUBMITTED;\\r\\n  }\\r\\n\\r\\n  function startReceivingBids() public {\\r\\n    if (_campaignFactoryAddress != _msgSender()) revert NotOwner();\\r\\n    _startReceivingBids();\\r\\n  }\\r\\n\\r\\n  function cancelCampaign() public onlyOwner {\\r\\n      if (block.timestamp >= saleInfo.saleStartTime) revert CannotCancelAfterSaleStartTime();\\r\\n      status = CampaignStatus.CANCELLED;\\r\\n  }\\r\\n\\r\\n  \\r\\n  function postponeSale(uint newDate, uint newEndDate) public onlyOwner {\\r\\n      if (block.timestamp >= saleInfo.saleStartTime) revert PostponeBeforeSaleStartTime();\\r\\n      if (newDate <= saleInfo.saleStartTime) revert NewDateLessThanOldDate();\\r\\n      if (newEndDate <= newDate) revert EndDateLessThanStartTime();\\r\\n\\r\\n      saleInfo.saleStartTime = newDate;\\r\\n      saleInfo.saleEndTime = newEndDate;\\r\\n  }\\r\\n\\r\\n  function getDexListRate() public view returns (uint256) {\\r\\n    return saleInfo.dexListRate;\\r\\n  }\\r\\n\\r\\n  function getEndDate() public view returns (uint256) {\\r\\n    return saleInfo.saleEndTime;\\r\\n  }\\r\\n\\r\\n  // function totalTokensExpectedToBeLocked() public view returns (uint256) {\\r\\n  //   //Amount for sale + amount for liquidity\\r\\n  //   uint tokensForLiquidity = (saleInfo.dexListRate * saleInfo.liquidityPercent * saleInfo.hardCap)  / 10000;\\r\\n  //   return tokensForLiquidity + _dexLocker.totalTokensExpectedToBeLocked();\\r\\n  // }\\r\\n\\r\\n \\r\\n  function setZSalesTokenAddress(address _tokenAddress) public onlyAdmin {\\r\\n    zsalesPlatformDetails.zsalesTokenAddress = _tokenAddress;\\r\\n  }\\r\\n\\r\\n\\r\\n  /**************************|\\r\\n  |          Tier Info       |\\r\\n  |_________________________*/\\r\\n  //add the address in Whitelist tier two to invest\\r\\n  function disableTier2Whitelist() public onlyOwner {    \\r\\n    useWhiteList= false;\\r\\n  }\\r\\n\\r\\n  //add the address in Whitelist tier two to invest\\r\\n  function submitTier2Whitelist(bytes32 whitelistMerkleRoot) public onlyOwner {\\r\\n    \\r\\n    if (block.timestamp >= saleInfo.saleStartTime) revert AlterWhitelistingAfterSaleStartTime();\\r\\n    useWhiteList= true;\\r\\n    _whitelistTierTwoMerkleRoot=whitelistMerkleRoot;\\r\\n  }\\r\\n\\r\\n  // check the address is a Token Holder\\r\\n  function isAllowedInTier1(address _address) public view returns(bool) {\\r\\n\\r\\n    IERC20 token = IERC20(zsalesPlatformDetails.zsalesTokenAddress);\\r\\n    return token.balanceOf(_address) > 0;\\r\\n  }\\r\\n\\r\\n  // check the address is a NFT Token Holder\\r\\n  function isAllowedInTier0(address _address) public view returns(bool) {\\r\\n    \\r\\n    IERC1155 token = IERC1155(zsalesPlatformDetails.zsalesNFTTokenAddress);\\r\\n    address[] memory addresses=new address[](zsalesPlatformDetails.maxTiersToCheckForNFT);\\r\\n    addresses[0]=_address;\\r\\n\\r\\n    uint[] memory tokenIds=new uint[](zsalesPlatformDetails.maxTiersToCheckForNFT);\\r\\n    \\r\\n    for (uint256 i = 0; i < zsalesPlatformDetails.maxTiersToCheckForNFT; i++) {\\r\\n        tokenIds[i]=i;\\r\\n    }\\r\\n\\r\\n    uint[] memory balances = token.balanceOfBatch(addresses,tokenIds) ;\\r\\n    uint balance = 0;\\r\\n    for (uint256 i = 0; i < zsalesPlatformDetails.maxTiersToCheckForNFT; i++) {\\r\\n        balance += balances[i];\\r\\n    }\\r\\n    return balance>0;\\r\\n  }\\r\\n\\r\\n\\r\\n  // check the address in whitelist tier two\\r\\n  function isInTier2WhiteList(bytes32[] memory proof, address claimer) public view returns(bool) {\\r\\n    \\r\\n    bytes32 _leaf = keccak256(abi.encodePacked(claimer));\\r\\n    return MerkleProof.verify(proof, _whitelistTierTwoMerkleRoot, _leaf);\\r\\n    \\r\\n  }\\r\\n\\r\\n  /**\\r\\n    * @dev Throws if called by any account other than the owner.\\r\\n  */\\r\\n  modifier onlyAdmin() {\\r\\n      require(zsalesPlatformDetails.admin == _msgSender(), NotAdmin() );\\r\\n      _;\\r\\n  }\\r\\n\\r\\n  function changeAdmin(address newAdmin) public onlyAdmin  {\\r\\n      // require(_msgSender() == _admin, 'ADMIN: Only Admin can change');\\r\\n      if(_msgSender() != zsalesPlatformDetails.admin) revert NotAdmin();\\r\\n      address oldOwner = zsalesPlatformDetails.admin;\\r\\n      zsalesPlatformDetails.admin=newAdmin;\\r\\n\\r\\n      emit AdminOwnershipTransferred(oldOwner, newAdmin);\\r\\n  }\\r\\n\\r\\n  \\r\\n  function getHardCap() public view returns (uint) {\\r\\n    return saleInfo.hardCap;\\r\\n  }\\r\\n\\r\\n  /**************************|\\r\\n  |          Setters         |\\r\\n  |_________________________*/\\r\\n  \\r\\n  function setKYC(bool kyc) public onlyAdmin {\\r\\n    if (block.timestamp >= saleInfo.saleStartTime) revert KYCAfterSaleStartTime();\\r\\n    hasKYC = kyc;\\r\\n  } \\r\\n\\r\\n  function setAudited(bool audit) public onlyAdmin {\\r\\n      if (block.timestamp >= saleInfo.saleStartTime) revert AuditAfterSaleStartTime();\\r\\n      _isAudited = audit;\\r\\n  }\\r\\n  function setTier1TimeLineInHours (uint newValue) public onlyAdmin {\\r\\n    tier1TimeLineInHours=newValue;\\r\\n  }\\r\\n  function isAudited() public view returns (bool, string memory ) {\\r\\n    return (_isAudited, auditUrl);\\r\\n  }\\r\\n\\r\\n\\r\\n  /**\\r\\n    * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\r\\n    * `recipient`, forwarding all available gas and reverting on errors.\\r\\n    *\\r\\n    * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\r\\n    * of certain opcodes, possibly making contracts go over the 2300 gas limit\\r\\n    * imposed by `transfer`, making them unable to receive funds via\\r\\n    * `transfer`. {sendValue} removes this limitation.\\r\\n    *\\r\\n    * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\r\\n    *\\r\\n    * IMPORTANT: because control is transferred to `recipient`, care must be\\r\\n    * taken to not create reentrancy vulnerabilities. Consider using\\r\\n    * {ReentrancyGuard} or the\\r\\n    * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\r\\n    */\\r\\n  function sendValue(address recipient, uint256 amount) internal {\\r\\n      require(address(this).balance >= amount, InsufficientBalance());\\r\\n\\r\\n      // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\r\\n      (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\r\\n      require(success, NoSendValue());//Address: unable to send value, recipient may have reverted\\r\\n  }\\r\\n  \\r\\n  \\r\\n  // send coin to the contract address\\r\\n  function submitBid(bytes32[] calldata proof, uint256 purchasedAmount) public payable nonReentrant  {\\r\\n    \\r\\n    uint256 normalizedBid ;\\r\\n    if(purchaseTokenAddress==address(0)){\\r\\n      normalizedBid= msg.value;\\r\\n    }else{\\r\\n      normalizedBid= purchasedAmount * 10**(18-purchaseCoinDecimals);//normalize\\r\\n      IERC20(purchaseTokenAddress).safeTransferFrom(msg.sender, address(this), purchasedAmount);\\r\\n    }\\r\\n    \\r\\n    \\r\\n    if (status == CampaignStatus.CANCELLED || status == CampaignStatus.FAILED) revert CampaignFailedOrCancelled();\\r\\n    if (status != CampaignStatus.TOKENS_SUBMITTED) revert NotTokenSubmitted();\\r\\n    if (totalCoinReceived >= saleInfo.hardCap) revert SoldOutError();\\r\\n    if (block.timestamp > saleInfo.saleEndTime) revert ClosedSale();\\r\\n    if (totalCoinReceived + normalizedBid > saleInfo.hardCap) revert ExceedMaxCap();\\r\\n    if (normalizedBid < minAllocationPerUser) revert LessThanMinBuy();\\r\\n    \\r\\n          \\r\\n    address sender = _msgSender();\\r\\n\\r\\n    if (block.timestamp >= saleInfo.saleStartTime) {\\r\\n        if (useWhiteList) {\\r\\n            if (!isInTier2WhiteList(proof, sender)) revert NotInTier2Whitelist();\\r\\n        }\\r\\n        if (totalCoinInTierTwo + normalizedBid > tierTwohardCap) revert ExceedTierTwoMaxCap();\\r\\n        if (buyInTwoTier[sender] + normalizedBid > maxAllocationPerUserTierTwo) revert ExceedTierTwoUserLimit();\\r\\n        buyInTwoTier[sender] += normalizedBid;\\r\\n        buyInAllTiers[sender] += normalizedBid;\\r\\n        totalCoinReceived += normalizedBid;\\r\\n        totalCoinInTierTwo += normalizedBid;\\r\\n        totalParticipants++;\\r\\n\\r\\n        emit ValueReceived(sender, purchasedAmount);\\r\\n    } else if (ICampaignList(_campaignFactoryAddress).getTierStatus(0) && block.timestamp >= saleInfo.saleStartTime - (tier0TimeLineInHours * 1 hours)) {  \\r\\n        if (!isAllowedInTier0(sender)) revert NotInTier0();\\r\\n        if (totalCoinInTierZero + normalizedBid > tierZerohardCap) revert ExceedTierZeroMaxCap();\\r\\n        if (buyInZeroTier[sender] + normalizedBid > maxAllocationPerUserTierZero) revert ExceedTierZeroUserLimit();\\r\\n        buyInZeroTier[sender] += normalizedBid;\\r\\n        buyInAllTiers[sender] += normalizedBid;\\r\\n        totalCoinReceived += normalizedBid;\\r\\n        totalCoinInTierZero += normalizedBid;\\r\\n        totalParticipants++;\\r\\n\\r\\n        emit ValueReceived(sender, purchasedAmount);\\r\\n    } else if (ICampaignList(_campaignFactoryAddress).getTierStatus(1) && block.timestamp >= saleInfo.saleStartTime - (tier1TimeLineInHours * 1 hours)) {  \\r\\n        if (!isAllowedInTier1(sender)) revert NotInTier1();\\r\\n        if (totalCoinInTierOne + normalizedBid > tierOnehardCap) revert ExceedTierOneMaxCap();\\r\\n        if (buyInOneTier[sender] + normalizedBid > maxAllocationPerUserTierOne) revert ExceedTierOneUserLimit();\\r\\n        buyInOneTier[sender] += normalizedBid;\\r\\n        buyInAllTiers[sender] += normalizedBid;\\r\\n        totalCoinReceived += normalizedBid;\\r\\n        totalCoinInTierOne += normalizedBid;\\r\\n        totalParticipants++;\\r\\n\\r\\n        emit ValueReceived(sender, purchasedAmount);\\r\\n    } else {\\r\\n        revert SaleNotStarted();\\r\\n    }\\r\\n\\r\\n  }\\r\\n\\r\\n  \\r\\n\\r\\n  /**\\r\\n  * @dev Withdraw tokens or coin by user after end time\\r\\n  * If this project does not reach softcap, return their funds otherwise get tokens \\r\\n  */\\r\\n  function withdrawFunds() public {\\r\\n\\r\\n    if (status != CampaignStatus.LIQUIDITY_SETUP) revert OngoingSales();\\r\\n\\r\\n    address usr = _msgSender();\\r\\n\\r\\n    if (usr == owner()) revert OwnersCannotWithdraw();\\r\\n    \\r\\n    // if campaign is sold out no need to wait for endtime finalize and setup liquidity\\r\\n    if (block.timestamp < saleInfo.saleEndTime && totalCoinReceived < saleInfo.hardCap) revert OngoingSales();\\r\\n    \\r\\n    if (buyInAllTiers[usr] == 0) revert NoCoinsToClaim();\\r\\n  \\r\\n    if (totalCoinReceived < saleInfo.softCap) {\\r\\n      status = CampaignStatus.FAILED;\\r\\n    }\\r\\n\\r\\n    uint256 amount = buyInAllTiers[usr];\\r\\n    buyInAllTiers[usr] = 0;\\r\\n    \\r\\n\\r\\n    if (status == CampaignStatus.FAILED) {\\r\\n      // return back funds\\r\\n      if(purchaseTokenAddress==address(0)){\\r\\n        payable(usr).transfer(amount);\\r\\n      }else{\\r\\n        IERC20(purchaseTokenAddress).safeTransfer(usr, amount/10**(18-purchaseCoinDecimals));\\r\\n      }          \\r\\n      emit Refunded(usr, amount/10**(18-purchaseCoinDecimals));\\r\\n    } else {\\r\\n\\r\\n      \\r\\n\\r\\n      uint256 amountTokens = amount * saleInfo.listRate;\\r\\n      IERC20 _token = IERC20(saleInfo.tokenAddress);\\r\\n      // Transfer Tokens to User\\r\\n      _token.safeTransfer(usr, amountTokens/10**(18-tokenDecimals));\\r\\n\\r\\n      emit Withdrawn(usr, amountTokens/10**(18-tokenDecimals));\\r\\n    }    \\r\\n  }\\r\\n\\r\\n  /**\\r\\n  * @dev Withdraw owner tokens If this project does not reach softcap\\r\\n  */\\r\\n \\r\\n\\r\\n  function withdrawOwnerTokens() public onlyOwner {\\r\\n      if (status != CampaignStatus.FAILED && status != CampaignStatus.CANCELLED && status != CampaignStatus.LIQUIDITY_SETUP) revert RequireCancelorFail();\\r\\n      if (block.timestamp < saleInfo.saleEndTime) revert NotEndDate();\\r\\n      if(ownerHasWithdrawnTokens) revert OwnerHasWithdrawnAlready();\\r\\n\\r\\n      if(totalCoinReceived < saleInfo.softCap){\\r\\n        status= CampaignStatus.FAILED;\\r\\n      }\\r\\n\\r\\n      IERC20 _token = IERC20(saleInfo.tokenAddress);\\r\\n      //if (totalCoinReceived >= saleInfo.softCap ) revert AlreadyReachedSoftCap(saleInfo.softCap);\\r\\n      if(status == CampaignStatus.FAILED || status == CampaignStatus.CANCELLED){\\r\\n        \\r\\n        uint256 tokensAmount = _token.balanceOf(address(this));\\r\\n\\r\\n        if (tokensAmount == 0) revert NoTokens();\\r\\n        ownerHasWithdrawnTokens=true;\\r\\n        _token.safeTransfer(msg.sender, tokensAmount);\\r\\n\\r\\n\\r\\n      }else if(status == CampaignStatus.LIQUIDITY_SETUP){\\r\\n        // // Todo\\r\\n        // uint tokensForUsers = totalCoinReceived * saleInfo.listRate ;\\r\\n        // uint tokensForLiquidity = totalCoinReceived * saleInfo.dexListRate *  saleInfo.liquidityPercent/10000;\\r\\n        // uint tokensForFees =zsalesPlatformDetails.zsaleTokenFee * totalCoinReceived / 10000;\\r\\n\\r\\n        // uint withdrawableTokens  = (tokensForLiquidity + tokensForUsers + tokensForFees )/ 10**(18-tokenDecimals);\\r\\n        // ownerHasWithdrawnTokens=true;\\r\\n        // _token.safeTransfer(msg.sender, withdrawableTokens);\\r\\n        uint256 tokensAmount = _token.balanceOf(address(this));\\r\\n\\r\\n        if (tokensAmount == 0) revert NoTokens();\\r\\n        ownerHasWithdrawnTokens=true;\\r\\n        _token.safeTransfer(msg.sender, tokensAmount);\\r\\n\\r\\n        \\r\\n      }\\r\\n      \\r\\n  }\\r\\n\\r\\n  function calcFairLaunchRate() public view returns (uint256 tokenRate) {\\r\\n    uint256 balance = purchaseTokenAddress==address(0) ? (address(this).balance) : IERC20(purchaseTokenAddress).balanceOf(address(this));\\r\\n    if(purchaseCoinDecimals!= 18){\\r\\n      balance = balance * (10 ** (18 - purchaseCoinDecimals));\\r\\n    }\\r\\n    uint tokensToSell = tokenDecimals == 18 ? saleInfo.tokensOnSale : saleInfo.tokensOnSale * (10 ** (18 - tokenDecimals));\\r\\n       \\r\\n    tokenRate = tokensToSell/balance;\\r\\n  }\\r\\n  \\r\\n\\r\\n  /**\\r\\n    * Setup liquidity and transfer all amounts according to defined percents, if softcap not reached set Refunded flag\\r\\n    */\\r\\n  function finalizeAndSetupLiquidity() public nonReentrant {\\r\\n    \\r\\n    require (totalCoinReceived >= saleInfo.hardCap || block.timestamp > saleInfo.saleEndTime, NoSoldOutOrEndDate());\\r\\n    if (status == CampaignStatus.FAILED || status == CampaignStatus.CANCELLED) revert CampaignFailedOrCancelled();\\r\\n    \\r\\n    if (status == CampaignStatus.LIQUIDITY_SETUP) revert LiquiditySetupAlreadyDone();\\r\\n    //\\r\\n    if(totalCoinReceived < saleInfo.softCap){ // set to failed and stop\\r\\n        status= CampaignStatus.FAILED ;\\r\\n        return;\\r\\n    }\\r\\n\\r\\n    \\r\\n    IERC20 tokenOnSale = IERC20(saleInfo.tokenAddress);\\r\\n    \\r\\n    if(saleInfo.softCap==0){//fairlaunch\\r\\n        //set listrate and dexlisrate\\r\\n      saleInfo.dexListRate = calcFairLaunchRate();\\r\\n      saleInfo.listRate = calcFairLaunchRate();\\r\\n    }\\r\\n\\r\\n    // Total amount invested\\r\\n    uint256 currentCoinBalance = purchaseTokenAddress==address(0) ? address(this).balance: IERC20(purchaseTokenAddress).balanceOf(address(this));\\r\\n    \\r\\n    if(currentCoinBalance<=0 || (totalCoinReceived/ 10**(18-purchaseCoinDecimals)) > currentCoinBalance ){\\r\\n       revert NoCoin();\\r\\n    }\\r\\n    \\r\\n    uint256 zsaleFeeAmount = (totalCoinReceived * zsalesPlatformDetails.zsaleFee / 10000) / 10**(18-purchaseCoinDecimals);\\r\\n    uint256 zsaleTokenFeeAmount = (saleInfo.listRate * totalCoinReceived * zsalesPlatformDetails.zsaleTokenFee/ 10000) /10**(18 -tokenDecimals);\\r\\n    \\r\\n    //Fees charged in Purchase coin\\r\\n    if(purchaseTokenAddress==address(0)){\\r\\n      payable(zsalesPlatformDetails.zsalesWalletAddress).transfer(zsaleFeeAmount);\\r\\n    }else{\\r\\n      IERC20(purchaseTokenAddress).safeTransfer(zsalesPlatformDetails.zsalesWalletAddress, zsaleFeeAmount);\\r\\n    }\\r\\n    // //Fee charged in Token listed, \\r\\n    tokenOnSale.safeTransfer(zsalesPlatformDetails.zsalesWalletAddress, zsaleTokenFeeAmount);\\r\\n\\r\\n\\r\\n    uint256 supplyAfterFees = purchaseTokenAddress==address(0) ? address(this).balance : IERC20(purchaseTokenAddress).balanceOf(address(this));\\r\\n    //Amount of Token to be sent to dex\\r\\n    if(purchaseTokenAddress!=address(0)){\\r\\n      supplyAfterFees = supplyAfterFees * (10 ** (18 - purchaseCoinDecimals));\\r\\n    }\\r\\n\\r\\n    \\r\\n    console.log('CTRACT:: 5 : supplyAfterFees: %d, saleInfo.liquidityPercent %d,saleInfo.dexListRate  %d  ', supplyAfterFees, saleInfo.liquidityPercent, saleInfo.dexListRate );\\r\\n    uint256 tokensBalance =  tokenOnSale.balanceOf(address(this)) * (10 ** (18 - tokenDecimals));\\r\\n    // Amount to be sent to dex\\r\\n    uint256 liquidityAmount = (supplyAfterFees * saleInfo.liquidityPercent) / 10000;\\r\\n    if(tokensBalance < liquidityAmount * saleInfo.dexListRate ) revert NoTokensForLiquidity();\\r\\n    \\r\\n    uint256 tokensForLiquidity = liquidityAmount * saleInfo.dexListRate / (10 ** (18 - tokenDecimals)); \\r\\n    bool approvalSucess = tokenOnSale.approve(dexRouterAddress, tokensForLiquidity);\\r\\n    require(approvalSucess == true, RouterApprovalFailed());\\r\\n\\r\\n    // console.log('CTRACT:: 6 : tokensForLiquidity: %d ', tokensForLiquidity);\\r\\n    IDexRouter _dexRouter=IDexRouter(dexRouterAddress);\\r\\n    if(purchaseTokenAddress==address(0)){\\r\\n      \\r\\n      _dexRouter.addLiquidityETH{value: liquidityAmount}(\\r\\n            saleInfo.tokenAddress,\\r\\n            tokensForLiquidity,\\r\\n            0, //tokensForLiquidity,\\r\\n            liquidityAmount, // liquidityAmount,\\r\\n            address(this),\\r\\n            block.timestamp + 100\\r\\n      );\\r\\n      \\r\\n      \\r\\n      emit LiquidityAddedToRouter(dexRouterAddress, address(0),saleInfo.tokenAddress,liquidityAmount,tokensForLiquidity  );\\r\\n\\r\\n    }else{\\r\\n      \\r\\n      tokenOnSale.approve(dexRouterAddress, MAX_INT);\\r\\n      \\r\\n      IERC20(purchaseTokenAddress).approve(dexRouterAddress, MAX_INT);\\r\\n      _dexRouter.addLiquidity(\\r\\n          address(tokenOnSale),\\r\\n          purchaseTokenAddress,\\r\\n          tokensForLiquidity,\\r\\n          liquidityAmount/(10** (18-purchaseCoinDecimals)),\\r\\n          0,\\r\\n          0,            \\r\\n          address(this),\\r\\n          block.timestamp + 100\\r\\n      );\\r\\n      emit LiquidityAddedToRouter(dexRouterAddress, purchaseTokenAddress,address(tokenOnSale),liquidityAmount,tokensForLiquidity  );\\r\\n\\r\\n    }\\r\\n\\r\\n        \\r\\n    // get lp address from factory\\r\\n    IDexFactory _dexFactory = IDexFactory(_dexRouter.factory());\\r\\n    liquidityPairAddress = _dexFactory.getPair(saleInfo.tokenAddress, purchaseTokenAddress==address(0)?_dexRouter.WETH(): purchaseTokenAddress );\\r\\n    uint lpPairbalance=IERC20(liquidityPairAddress).balanceOf(address(this));\\r\\n    liquidityPairLockerAddress = _dexLocker.lockERC20(liquidityPairAddress, owner(),lpPairbalance, 100,liquidityReleaseInDays,0,0);// address(tokenLocker);\\r\\n    \\r\\n    IERC20(liquidityPairAddress).safeTransfer(liquidityPairLockerAddress, lpPairbalance);\\r\\n\\r\\n    uint256 balanceAfterLiquidityAndFees = purchaseTokenAddress==address(0) ? address(this).balance : IERC20(purchaseTokenAddress).balanceOf(address(this));\\r\\n    if(useRaisedFundsVesting){\\r\\n      //send raised funds to Lock\\r\\n      // Remainder after all dedeuctions and liquidity\\r\\n      if(purchaseTokenAddress==address(0)){        \\r\\n        _dexLocker.startRaisedFundsLock{value: (_dexLocker.raisedFundsPercent() * balanceAfterLiquidityAndFees) / 10000 }( balanceAfterLiquidityAndFees );\\r\\n        \\r\\n      }else{\\r\\n        IERC20(purchaseTokenAddress).safeTransfer(address(_dexLocker),(_dexLocker.raisedFundsPercent() * balanceAfterLiquidityAndFees) / 10000);\\r\\n        _dexLocker.startRaisedFundsLock( balanceAfterLiquidityAndFees );\\r\\n      }\\r\\n    }    \\r\\n\\r\\n    // Send Balance to Owner\\r\\n    if(purchaseTokenAddress==address(0)){\\r\\n      sendValue(owner(),address(this).balance);      \\r\\n    }else{\\r\\n      IERC20(purchaseTokenAddress).safeTransfer(owner(),IERC20(purchaseTokenAddress).balanceOf(address(this)) );\\r\\n      \\r\\n    }\\r\\n    \\r\\n    status=CampaignStatus.LIQUIDITY_SETUP;\\r\\n  }\\r\\n\\r\\n  \\r\\n  function getCampaignInfo() public view returns( uint256 softcap, uint256 hardcap,uint256 saleStartTime, uint256 saleEndTime,uint256 listRate, uint256 dexListRate, uint liquidity,uint _liquidityReleaseTime ,uint256 totalCoins, uint256 totalParticipant, bool use_WhiteList, bool hasKyc, bool isAuditd, string memory _auditUrl ){\\r\\n    return ( saleInfo.softCap, saleInfo.hardCap,saleInfo.saleStartTime, saleInfo.saleEndTime, saleInfo.listRate, saleInfo.dexListRate, saleInfo.liquidityPercent, liquidityReleaseInDays, totalCoinReceived,totalParticipants, useWhiteList,hasKYC, _isAudited, auditUrl );\\r\\n  }\\r\\n\\r\\n  function getCampaignSalePriceInfo() public view returns(uint256 , uint256,uint256 , uint256,uint256 , uint256,uint256 ){\\r\\n    return (saleInfo.listRate, saleInfo.dexListRate, saleInfo.softCap, saleInfo.hardCap, tierOnehardCap,tierTwohardCap, maxAllocationPerUserTierTwo  );\\r\\n  }\\r\\n\\r\\n    \\r\\n  function dexLockerAddress() public view onlyAdmin returns (address) {\\r\\n      return address( _dexLocker);\\r\\n  }\\r\\n\\r\\n  //Get Sale token\\r\\n  function tokenAddress() public view returns (address) {\\r\\n      return saleInfo.tokenAddress;\\r\\n  }\\r\\n\\r\\n  // Refund any mistakenly sent in ERC20\\r\\n  function refundERC20(IERC20 _token, address recipient, uint256 amount) public onlyAdmin {      \\r\\n    _token.safeTransfer(recipient, amount);\\r\\n  }\\r\\n\\r\\n}\",\"keccak256\":\"0x89abd4667ad75d1b136f3e254ae009cffd30086cb93394a2c927dfd271cb7755\",\"license\":\"MIT\"},\"contracts/CampaignList.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.28;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\r\\n// import \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\n// import \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableMap.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\r\\n\\r\\n// import \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\n\\r\\nimport \\\"./Campaign.sol\\\";\\r\\nimport \\\"./FairLaunchCampaign.sol\\\";\\r\\nimport \\\"./Confirmations/ConfirmAddress.sol\\\";\\r\\nimport './Lockers/DexLockerFactory.sol';\\r\\nimport './Lockers/VestSchedule.sol';\\r\\nimport \\\"hardhat/console.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/proxy/Clones.sol\\\";\\r\\n\\r\\nimport './Interfaces/Turnstile.sol';\\r\\nimport \\\"./Errors.sol\\\";\\r\\n\\r\\nerror NotEnoughBalance(uint balance);\\r\\n\\r\\ninterface ICampaignList{\\r\\n    function zsaleFee() external view returns (uint);// 2%   - percent of purchase currency to take\\r\\n    function zsaleTokenFee() external view returns (uint);// percent fee of token to take\\r\\n    function campaignCreationPrice() external view returns (uint);// \\r\\n    function zsalesWalletAddress() external view returns (address); //receives commissions\\r\\n\\r\\n    function zsalesAdmin() external view returns (address);\\r\\n    function zsalesTokenAddress() external view returns (address);\\r\\n    function zsalesNFTTokenAddress() external view returns (address);\\r\\n    function getTierStatus(uint tier) external view returns (bool);\\r\\n    function maxTiersToCheckForNFT() external view returns(uint);\\r\\n}\\r\\n\\r\\n\\r\\ncontract CampaignList is Context,Ownable, ICampaignList  {\\r\\n    error NoCampaignCreatePrice();\\r\\n    error RequiresTokenContract();\\r\\n    error ExistingCampaign();\\r\\n    error TokensOnSaleRequired();\\r\\n\\r\\n    using SafeERC20 for IERC20;\\r\\n  // Add the library methods\\r\\n    using EnumerableMap for EnumerableMap.UintToAddressMap;\\r\\n    \\r\\n    // Declare a set state variable\\r\\n    EnumerableMap.UintToAddressMap private _campaigns;\\r\\n\\r\\n    uint private _counter;\\r\\n\\r\\n    DexLockerFactory private _dexLockerFactory;\\r\\n\\r\\n    ConfirmAddress addressConfirmer;\\r\\n\\r\\n    /**\\r\\n    * @dev percent of native currency to take multiplied by 100 i.e 200 for 2%.\\r\\n    */\\r\\n    uint public zsaleFee = 200;  //2%   - percent of native currency to take\\r\\n    uint public zsaleTokenFee = 200;  //2% - percent fee of token to take\\r\\n    uint public campaignCreationPrice = 0.00001 ether; \\r\\n    address public zsalesWalletAddress = 0xB7e16f5fa9941B84baCd1601F277B00911Aed339 ; // receives commissions\\r\\n\\r\\n    address public zsalesAdmin  ;\\r\\n\\r\\n    address public zsalesTokenAddress = 0x97CEe927A48dc119Fd0b0b1047a879153975e893 ;\\r\\n\\r\\n    address public zsalesNFTTokenAddress = 0x97CEe927A48dc119Fd0b0b1047a879153975e893 ;\\r\\n\\r\\n    mapping(address => uint256[]) private ownersCampaign; //owneraddress -> campaignIndex\\r\\n\\r\\n    mapping(uint256 => bool) private _tierStatuses; //tier -> enable/disable\\r\\n\\r\\n    mapping(address => uint256) public campaignTokensLocked; //owneraddress -> campaignIndex\\r\\n    \\r\\n\\r\\n    mapping(address => address payable ) public _tokenCampaigns; //tokenAddress=>Campaign\\r\\n\\r\\n    event CampaignCreated(address indexed creator,uint256 indexed index, address createdCampaignAddress);\\r\\n    \\r\\n    uint public maxTiersToCheckForNFT= 5;\\r\\n    \\r\\n    address  _campaignImplementationAddress;\\r\\n\\r\\n    address public turnstileAddress = address(0);\\r\\n    Turnstile private turnstile;\\r\\n\\r\\n    constructor(DexLockerFactory dexLockerFactory,address zsalesToken,address zsalesNFTToken, address campaignImplementationAddress) Ownable(msg.sender)  {      \\r\\n       _dexLockerFactory=dexLockerFactory;\\r\\n       _campaignImplementationAddress = campaignImplementationAddress;\\r\\n       zsalesTokenAddress=zsalesToken;\\r\\n       zsalesNFTTokenAddress=zsalesNFTToken;\\r\\n       addressConfirmer=new ConfirmAddress();\\r\\n       zsalesAdmin= _msgSender();\\r\\n    }\\r\\n\\r\\n    function updateTurnstileAddress(address newAddress) public onlyOwner{\\r\\n        \\r\\n        turnstileAddress=newAddress;\\r\\n        turnstile = Turnstile(turnstileAddress);\\r\\n        //Registers the smart contract with Turnstile\\r\\n        //Mints the CSR NFT to the contract creator\\r\\n        turnstile.register(tx.origin);\\r\\n\\r\\n    }\\r\\n\\r\\n    /**************************|\\r\\n    |          Setters         |\\r\\n    |_________________________*/\\r\\n    function setCampaignImplementation(address campaignImplementationAddress) public onlyOwner  {   \\r\\n       _campaignImplementationAddress = campaignImplementationAddress;\\r\\n    }\\r\\n\\r\\n    function setCampaignCreationPrice(uint256 newPrice) public onlyOwner{\\r\\n        campaignCreationPrice=newPrice;\\r\\n    }\\r\\n\\r\\n    function setCampaignFee(uint256 saleFee, uint256 saleTokenFee) public onlyOwner{\\r\\n        zsaleFee=saleFee;\\r\\n        zsaleTokenFee=saleTokenFee;\\r\\n    }\\r\\n\\r\\n    function setFeeWallet(address salesWalletAddress) public onlyOwner{\\r\\n        zsalesWalletAddress=salesWalletAddress;\\r\\n    }\\r\\n\\r\\n    function setAdmin(address newAdmin) public onlyOwner{\\r\\n        zsalesAdmin=newAdmin;\\r\\n    }\\r\\n\\r\\n    function setZSalesMaxTiersToCheckForNFT(uint newMax) public onlyOwner{\\r\\n        maxTiersToCheckForNFT=newMax;\\r\\n    }\\r\\n\\r\\n    function setZSalesNFTTokenAddress(address newAddress) public onlyOwner{\\r\\n        zsalesNFTTokenAddress=newAddress;\\r\\n    }\\r\\n\\r\\n    function setZSalesTokenAddress(address newAddress) public onlyOwner{\\r\\n        zsalesTokenAddress=newAddress;\\r\\n    }\\r\\n\\r\\n    function setTierStatus(uint tier,bool status) public onlyOwner{\\r\\n        _tierStatuses[tier]=status;\\r\\n    }\\r\\n\\r\\n    function getTierStatus(uint tier) public view returns (bool){\\r\\n        return _tierStatuses[tier];\\r\\n    }\\r\\n\\r\\n    function getCampaignValues(\\r\\n        /** uint256 softCap,\\r\\n         * uint256 hardCap,\\r\\n         * uint256 _saleStartTime,\\r\\n         * uint256 _saleEndTime,  \\r\\n         * uint256 _minAllocationPerUser ,   \\r\\n         * uint256 _maxAllocationPerUserTierTwo ,\\r\\n         */\\r\\n        uint256[6] memory _capAndDate\\r\\n    ) public pure returns(uint256[10] memory capAndDate){\\r\\n        for (uint i=0; i < 4; i += 1) {\\r\\n            capAndDate[i] = _capAndDate[i];\\r\\n        }\\r\\n        capAndDate[4]=1000 * _capAndDate[1] / 4000;// tier 1 hardcap is 1/4th of hardcap\\r\\n        capAndDate[5]=_capAndDate[1];// tier 2 hardcap is equal to hardcap\\r\\n        capAndDate[6]=_capAndDate[4];//min allocation\\r\\n        capAndDate[7]=_capAndDate[5];// max allocation\\r\\n        capAndDate[8]=_capAndDate[5];// max allocation\\r\\n        capAndDate[9]=0;\\r\\n    }\\r\\n    \\r\\n\\r\\n    /**\\r\\n    * @dev Create A new Campaign. Throws if Campaign for token already exists.\\r\\n    */\\r\\n    function createNewCampaign(address _tokenAddress, address _purchaseTokenAddress, \\r\\n        uint tokensOnSale,  //tokensOnSale ,if fairlaunch\\r\\n        /** uint256 softCap,\\r\\n     * uint256 hardCap,\\r\\n     * uint256 _saleStartTime,\\r\\n     * uint256 _saleEndTime,  \\r\\n     * uint256 _minAllocationPerUser ,   \\r\\n     * uint256 _maxAllocationPerUserTierTwo \\r\\n     */\\r\\n        uint256[6] memory _capAndDate, address _dexRouterAddress,uint[4] memory liquidityAllocationAndRates,\\r\\n        string[6] memory founderInfo,bool[2] memory _useTokenOrRaisedFundsVesting,\\r\\n        // VestSchedule[8] memory teamTokenVestingDetails,\\r\\n        uint256[5] memory teamTokenVestingDetails,\\r\\n        /**\\r\\n         * uint256 _percent,\\r\\n         * uint256 _vestingDurationInDays,\\r\\n         * uint256 _vestingCliffInDays,\\r\\n         */\\r\\n        uint256[3] memory raisedFundVestingDetails\\r\\n    ) public payable  {\\r\\n        /** uint256 _normalizedTo18DecimalsSoftCap,\\r\\n         * uint256 __normalizedTo18DecimalsHardCap,\\r\\n         * uint256 _saleStartTime,\\r\\n         * uint256 _saleEndTime, \\r\\n         * \\r\\n         * uint256 _nomrlaizedTierOneHardCap, \\r\\n         * uint256 _nomrlaizedTierTwoHardCap, \\r\\n         * _minAllocationPerUser\\r\\n         * uint256 _maxAllocationPerUserTierOne, \\r\\n         * uint256 _maxAllocationPerUserTierTwo ,\\r\\n         * uint _campaignKey,*/\\r\\n        uint256[10] memory capAndDate = getCampaignValues(_capAndDate);\\r\\n\\r\\n        if(capAndDate[0]==0){//FairLaunch\\r\\n            require(tokensOnSale>1, TokensOnSaleRequired());\\r\\n        }\\r\\n\\r\\n        if(capAndDate[0]!=0){//Capped campaign\\r\\n            require(capAndDate[1]  <= capAndDate[0] * 4, HardCapGreaterThanX4OfSoftCap());\\r\\n        }\\r\\n\\r\\n        require(msg.value >= campaignCreationPrice, NoCampaignCreatePrice() );\\r\\n        require(addressConfirmer.isContract(_tokenAddress), RequiresTokenContract());        \\r\\n        if(_tokenCampaigns[_tokenAddress] != address(0)){\\r\\n            Campaign ct = Campaign(_tokenCampaigns[_tokenAddress]);\\r\\n            require(ct.status() == Campaign.CampaignStatus.CANCELLED || ct.status() == Campaign.CampaignStatus.FAILED, ExistingCampaign());\\r\\n        }\\r\\n        \\r\\n        {     \\r\\n            _counter++; \\r\\n            capAndDate[9] = _counter;\\r\\n            \\r\\n            if(_purchaseTokenAddress!= address(0)){\\r\\n                uint purchaseDecimals = IERC20Metadata(_purchaseTokenAddress).decimals();\\r\\n                if( purchaseDecimals !=18){\\r\\n                    capAndDate[0]=normalizeTokenAmount(capAndDate[0], purchaseDecimals); //Softcap\\r\\n                    capAndDate[1]=normalizeTokenAmount(capAndDate[1], purchaseDecimals);\\r\\n\\r\\n                    capAndDate[4]=normalizeTokenAmount(capAndDate[4], purchaseDecimals); \\r\\n                    capAndDate[5]=normalizeTokenAmount(capAndDate[5], purchaseDecimals);\\r\\n\\r\\n                    capAndDate[6]=normalizeTokenAmount(capAndDate[6], purchaseDecimals); \\r\\n                    capAndDate[7]=normalizeTokenAmount(capAndDate[7], purchaseDecimals);\\r\\n                    capAndDate[8]=normalizeTokenAmount(capAndDate[8], purchaseDecimals);\\r\\n                }else if(purchaseDecimals >18){\\r\\n                    revert OnlyDecimals18AndBelow();\\r\\n                }\\r\\n            }\\r\\n\\r\\n            address payable newCampaignCloneAddress = payable(Clones.clone(_campaignImplementationAddress) );\\r\\n            Campaign(newCampaignCloneAddress).initialize([msg.sender, address(this) ,  _tokenAddress, _purchaseTokenAddress],\\r\\n                capAndDate[0]==0?tokensOnSale:0, \\r\\n                capAndDate, _dexRouterAddress,liquidityAllocationAndRates,teamTokenVestingDetails, raisedFundVestingDetails,\\r\\n                 _useTokenOrRaisedFundsVesting, founderInfo, _dexLockerFactory);\\r\\n\\r\\n             _campaigns.set(_counter, newCampaignCloneAddress);\\r\\n            ownersCampaign[msg.sender].push( _counter);        \\r\\n            _tokenCampaigns[_tokenAddress]= payable(newCampaignCloneAddress);\\r\\n\\r\\n\\r\\n            emit CampaignCreated(msg.sender, _counter,newCampaignCloneAddress);\\r\\n\\r\\n            _transferTokensRequired(Campaign(newCampaignCloneAddress),liquidityAllocationAndRates[0],capAndDate[0],capAndDate[1], liquidityAllocationAndRates[2],tokensOnSale,  _useTokenOrRaisedFundsVesting[0], teamTokenVestingDetails[0]);\\r\\n\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _transferTokensRequired(Campaign ct,uint liquidityPercent,uint softCap, uint hardCap, uint listRate, uint tokensOnSale, bool useTeamTokenVesting, uint totalTeamTokensToBeVested) private \\r\\n    {               \\r\\n        uint tokenDecimals = IERC20Metadata(ct.tokenAddress()).decimals();\\r\\n        \\r\\n        //tokensForLiquidity // in 18 digits\\r\\n        uint amountOfTokensToLock = softCap !=0 ?  (ct.getDexListRate() * liquidityPercent * hardCap)  / 10000 : liquidityPercent * normalizeTokenAmount(tokensOnSale, tokenDecimals ) /10000;\\r\\n        \\r\\n        //tokensForSale // in 18 digits\\r\\n        uint tokensForSale = softCap !=0 ?  (listRate * hardCap) : normalizeTokenAmount(tokensOnSale, tokenDecimals );\\r\\n        amountOfTokensToLock += tokensForSale;\\r\\n               \\r\\n\\r\\n        // add zsale fee\\r\\n        uint256 feeAmount =  softCap !=0? ((zsaleTokenFee *  ct.getHardCap() )/10000) * ct.getDexListRate() : (zsaleTokenFee *  normalizeTokenAmount(tokensOnSale, tokenDecimals ) /10000);\\r\\n\\r\\n        uint total = ((amountOfTokensToLock + feeAmount) / (10**(18 - tokenDecimals )) );\\r\\n        \\r\\n        if(useTeamTokenVesting){\\r\\n            \\r\\n            total += totalTeamTokensToBeVested;\\r\\n            // console.log('CONTRACT::  Vested Tokens: %d, norm: %d, FINALTOTAL: %d', totalTeamTokensToBeVested, normalizeTokenAmount(totalTeamTokensToBeVested, tokenDecimals ), total );\\r\\n        }\\r\\n\\r\\n        IERC20 _token = IERC20(ct.tokenAddress());\\r\\n        \\r\\n        _token.safeTransferFrom(_msgSender(), address(ct), total);\\r\\n\\r\\n        campaignTokensLocked[address(ct)]=total;//(amountOfTokensToLock+feeAmount) * (10**tokenDecimals ) / (10**(18 - tokenDecimals ));//  * (10**(18 - tokenDecimals ))  ;\\r\\n        \\r\\n        // _token.safeTransfer( address(ct), total);\\r\\n        ct.startReceivingBids();\\r\\n    }\\r\\n\\r\\n    \\r\\n\\r\\n    function hasExistingCampaign(address _tokenAddress) external view returns (bool){\\r\\n        return _tokenCampaigns[_tokenAddress] != address(0);\\r\\n    }\\r\\n\\r\\n    function allOwnersCampaignsSize() public view returns (uint256) {\\r\\n        return ownersCampaign[msg.sender].length;\\r\\n    }\\r\\n    function allOwnersCampaignsSize(address owner) public view returns (uint256) {\\r\\n        return ownersCampaign[owner].length;\\r\\n    }\\r\\n\\r\\n    //offset \\r\\n    function allOwnersCampaigns( uint256 start, uint256 offset) public view returns (uint256[] memory) {\\r\\n        uint256[] memory list = new uint256[](offset) ;\\r\\n        for (uint256 i=start; i < start + offset ; i++) {\\r\\n            list[i-start] = ownersCampaign[msg.sender][i]; \\r\\n        }\\r\\n        return list;\\r\\n    }\\r\\n\\r\\n    function allOwnersCampaigns(address owner, uint256 start, uint256 offset) public view returns (uint256[] memory) {\\r\\n        uint256[] memory list = new uint256[](offset) ;\\r\\n        for (uint256 i=start; i < start + offset ; i++) {\\r\\n            list[i-start] = ownersCampaign[owner][i]; \\r\\n        }\\r\\n        return list;\\r\\n    }\\r\\n\\r\\n    \\r\\n    function campaignSize() public view returns (uint256) {\\r\\n        return _campaigns.length();\\r\\n    }\\r\\n\\r\\n    \\r\\n\\r\\n        \\r\\n\\r\\n    function contains(uint256 key) public view returns (bool) {\\r\\n        return _campaigns.contains(key);\\r\\n    }\\r\\n\\r\\n        \\r\\n\\r\\n    function campaignAt(uint256 index) public view returns (uint256 key, address value) {\\r\\n        return _campaigns.at(index);\\r\\n    }\\r\\n\\r\\n    function tryGetCampaignByKey(uint256 key) public view returns (bool, address) {\\r\\n        return _campaigns.tryGet(key);\\r\\n    }\\r\\n\\r\\n    function tryGetCampaignByTokenAddress(address _tokenAddress) public view returns ( address) {\\r\\n        return _tokenCampaigns[_tokenAddress];\\r\\n    }\\r\\n\\r\\n    receive() external payable {\\r\\n        \\r\\n    }\\r\\n\\r\\n    // //abi.encodePacked(x)\\r\\n    // function concatenate(string memory s1, string memory s2) public pure returns (string memory) {\\r\\n    //     return string(abi.encodePacked(s1, s2));\\r\\n    // }\\r\\n\\r\\n    // function concatenate(string memory s1, address s2) public pure returns (string memory) {\\r\\n    //     return string(abi.encodePacked(s1, s2));\\r\\n    // }\\r\\n\\r\\n\\r\\n    /**\\r\\n     * Normalization function that adjusts token amounts to a common decimal base (18 decimals in this case). \\r\\n     * This function either scales up or scales down the token amount based on the number of decimals the token uses,\\r\\n     * ensuring the final amount will be always displayed with 18 decimals. \\r\\n     * Of course this can result in a minor truncation if tokens >18 decimals are being used, this must be considered\\r\\n     */\\r\\n    function normalizeTokenAmount(uint tokenAmount, uint tokenDecimals) public pure returns (uint) {\\r\\n        uint standardDecimal = 18;\\r\\n        if(tokenDecimals>standardDecimal){\\r\\n            return tokenAmount / (10 ** (tokenDecimals-standardDecimal));\\r\\n        }\\r\\n        else if(tokenDecimals< standardDecimal){\\r\\n            return tokenAmount * (10 ** (standardDecimal - tokenDecimals));\\r\\n        }\\r\\n        else{\\r\\n            return tokenAmount;\\r\\n        }\\r\\n    }\\r\\n    \\r\\n    // Sends to th 'to' address or the zsalesWalletAddress if to address is zeroAddress\\r\\n    function  withdrawFee(address to, uint amount) public onlyOwner  {\\r\\n        \\r\\n        uint balance = address(this).balance;\\r\\n        if(amount>=balance){\\r\\n            if(to==address(0)){\\r\\n                to=zsalesWalletAddress;\\r\\n            }\\r\\n\\r\\n            payable(to).transfer(amount);\\r\\n        }else {\\r\\n            revert NotEnoughBalance(balance);\\r\\n        }\\r\\n    }\\r\\n\\r\\n}\",\"keccak256\":\"0x59a89532742324a38818578cda608dc417185a5d32dc2e4ab204e71a279b5b9e\",\"license\":\"MIT\"},\"contracts/Confirmations/ConfirmAddress.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.8;\\r\\n\\r\\n\\r\\ncontract ConfirmAddress{\\r\\n    \\r\\n    address private  _account;\\r\\n    \\r\\n    \\r\\n    // to dectect if the address is a contract or not\\r\\n   /**\\r\\n     * @dev Returns true if `account` is a contract.\\r\\n     *\\r\\n     * [IMPORTANT]\\r\\n     * ====\\r\\n     * It is unsafe to assume that an address for which this function returns\\r\\n     * false is an externally-owned account (EOA) and not a contract.\\r\\n     *\\r\\n     * Among others, `isContract` will return false for the following\\r\\n     * types of addresses:\\r\\n     *\\r\\n     *  - an externally-owned account\\r\\n     *  - a contract in construction\\r\\n     *  - an address where a contract will be created\\r\\n     *  - an address where a contract lived, but was destroyed\\r\\n     * ====\\r\\n     */\\r\\n    function isContract(address account) public view returns (bool) {\\r\\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\r\\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\r\\n        // for accounts without code, i.e. `keccak256('')`\\r\\n        bytes32 codehash;\\r\\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\r\\n        // bytes32 tokenaddress= 0xDf8681e9bF215076c1661Cbb5cd10F0d4902D662;\\r\\n        // solhint-disable-next-line no-inline-assembly\\r\\n        assembly { codehash := extcodehash(account) }\\r\\n        return (codehash != accountHash && codehash != 0x0);\\r\\n    }\\r\\n}\",\"keccak256\":\"0xf6d45c25dbe0623ae012c0ee8f32aa23d02392d7c9ad5576e6441fa7a1072319\",\"license\":\"MIT\"},\"contracts/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\n\\r\\npragma solidity ^0.8.27;\\r\\n\\r\\nerror OnlyDeployer();\\r\\nerror NoToken();\\r\\nerror NoZeroTokenAddress();\\r\\nerror NoEthForLiquidity();\\r\\nerror NoTokenBalanceForLiquidity();\\r\\nerror NoPurchaseTokensForLiquidity();\\r\\nerror NoTokensForLiquidity();\\r\\nerror RouterApprovalFailed();\\r\\n\\r\\nerror AlreadyReachedSoftCap(uint cap);\\r\\n\\r\\nerror LiquiditySetupAlreadyDone();\\r\\n\\r\\nerror AddLiquidityNotCalledYet();\\r\\nerror NoLPTokensToRelease();\\r\\nerror NoTokensToRelease();\\r\\nerror NoPurchaseTokensToRelease();\\r\\nerror CurrentTimeIsBeforeRelease();\\r\\n\\r\\nerror SaleEndTimeBeforeStartTime();\\r\\nerror LiquidityAboveLimit(uint limit);\\r\\n\\r\\nerror UpdateAfterSaleStartTime();\\r\\n\\r\\nerror TierCapTooLow(uint limit);\\r\\nerror TierCapsExceedHardCap();\\r\\nerror TierOneCapExceedsHardCap();\\r\\nerror TierTwoCapExceedsHardCap();\\r\\nerror MinAllocationOutOfRange();\\r\\nerror TierOneMaxAllocationOutOfRange();\\r\\nerror TierTwoMaxAllocationOutOfRange();\\r\\nerror HardCapGreaterThanX4OfSoftCap();\\r\\n\\r\\nerror NotOwner();\\r\\nerror NotAdmin();\\r\\nerror CannotCancelAfterSaleStartTime();\\r\\nerror PostponeBeforeSaleStartTime();\\r\\nerror NewDateLessThanOldDate();\\r\\nerror EndDateLessThanStartTime();\\r\\n\\r\\nerror AlterWhitelistingAfterSaleStartTime();\\r\\n\\r\\nerror KYCAfterSaleStartTime();\\r\\nerror AuditAfterSaleStartTime();\\r\\n\\r\\nerror SaleCancelled();\\r\\nerror SaleFailed();\\r\\nerror NotTokenSubmitted();\\r\\nerror SoldOutError();\\r\\nerror ClosedSale();\\r\\nerror ExceedMaxCap();\\r\\nerror LessThanMinBuy();\\r\\n\\r\\n\\r\\nerror NotInTier2Whitelist();\\r\\nerror ExceedTierTwoMaxCap();\\r\\nerror ExceedTierTwoUserLimit();\\r\\nerror NotInTier0();\\r\\nerror ExceedTierZeroMaxCap();\\r\\nerror ExceedTierZeroUserLimit();\\r\\nerror NotInTier1();\\r\\nerror ExceedTierOneMaxCap();\\r\\nerror ExceedTierOneUserLimit();\\r\\nerror SaleNotStarted();\\r\\n\\r\\nerror OwnersCannotWithdraw();\\r\\nerror OngoingSales();\\r\\nerror NoCoinsToClaim();\\r\\nerror NoCoin();\\r\\n\\r\\nerror CampaignFailedOrCancelled();\\r\\nerror CampaignCancelled();\\r\\n\\r\\nerror NotEndDate();\\r\\nerror NoReachSoftCap();\\r\\n\\r\\nerror RequireCancelorFail();\\r\\nerror NoTokens();\\r\\n\\r\\nerror NoSoldOutOrEndDate();\\r\\n\\r\\nerror OnlyDecimals18AndBelow();\\r\\n\\r\\nerror TransferDExLockerFailed();\\r\\n\\r\\nerror OwnerHasWithdrawnAlready();\\r\\n\\r\\n\\r\\nerror InvalidDexRouterAddress(address addr);\\r\\nerror InvalidSalesTokenAddress(address addr);\\r\\nerror InvalidPurchaseTokenAddress(address addr);\\r\\nerror InvalidOwnerAddress(address addr);\\r\\nerror InvalidDeployerAddress(address addr);\",\"keccak256\":\"0x9ee1dfd5f0c55d37560edeeaee02a6003092130f0ce085560c52f24f53cd3e3e\",\"license\":\"UNLICENSED\"},\"contracts/FairLaunchCampaign.sol\":{\"content\":\"// // SPDX-License-Identifier: MIT\\r\\n// pragma solidity ^0.8.28;\\r\\n\\r\\n// import \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\r\\n// // import \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\r\\n// // import \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n// import \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\r\\n\\r\\n// import \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\n// import {IERC1155} from \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\r\\n\\r\\n// import \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\r\\n// // import \\\"@openzeppelin/contracts/utils/structs/EnumerableMap.sol\\\";\\r\\n\\r\\n// import \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\r\\n// import \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\n// import './Lockers/DexLockerFactory.sol';\\r\\n// import {IDexLocker} from './Lockers/DexLocker.sol';\\r\\n// // import './Lockers/TokenLocker.sol';\\r\\n// import \\\"./Lockers/VestSchedule.sol\\\";\\r\\n// import \\\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\\\";\\r\\n// import \\\"hardhat/console.sol\\\";\\r\\n// import {IDexRouter, IDexFactory} from \\\"./IDexRouter.sol\\\";\\r\\n// import {ICampaignList} from \\\"./CampaignList.sol\\\";\\r\\n// import {PlatFormDetails} from \\\"./Campaign.sol\\\";\\r\\n// import \\\"./Errors.sol\\\";\\r\\n\\r\\n// contract FairLaunchCampaign is Initializable,Ownable, ReentrancyGuard {\\r\\n//   using SafeERC20 for IERC20;\\r\\n//   error InsufficientBalance();\\r\\n//   error NoSendValue();\\r\\n\\r\\n//   uint256 constant private MAX_INT = 2**256 - 1;\\r\\n\\r\\n//   event AdminOwnershipTransferred(address indexed previousAdmin, address indexed newAdmin);\\r\\n//   event ValueReceived(address user, uint amount);\\r\\n//   event Withdrawn(address user, uint amount);\\r\\n//   event Refunded(address user, uint amount);\\r\\n//   event SoldOut();\\r\\n//   event LiquidityAddedToRouter(address indexed router, address indexed token1,address indexed token2, uint amountToken1, uint amountToken2);\\r\\n\\r\\n//   struct CampaignSaleInfo {\\r\\n//       //token attributes\\r\\n//       address   tokenAddress; \\r\\n//       uint256  softCap; // Soft cap in coin\\r\\n//       uint256  hardCap; // Max cap in coin\\r\\n//       uint256  saleStartTime; // start sale time\\r\\n//       uint256  saleEndTime; // end sale time\\r\\n//       uint   liquidityPercent; // multiplied by 100 e.g 45% is 4500\\r\\n//       uint   tokensOnSale; \\r\\n//       // RefundType  refundType;\\r\\n//       string logoUrl;\\r\\n//       string desc;\\r\\n//       string website;\\r\\n//       string twitter;\\r\\n//       string telegram;\\r\\n//       string discord;\\r\\n//       // string bannerImage;\\r\\n      \\r\\n//   }\\r\\n\\r\\n//   enum CampaignStatus{ \\r\\n//     CREATED,\\r\\n//     TOKENS_SUBMITTED,//Owner has transferred the correct no of tokens and campaign is ready to receive\\r\\n//     CANCELLED, // Cancelled before the start date\\r\\n    \\r\\n//     FAILED, // WIll need refund\\r\\n//     LIQUIDITY_SETUP\\r\\n\\r\\n//   }\\r\\n\\r\\n//   bool   public useWhiteList;//Use in only Tier 2\\r\\n//   bool   public hasKYC;\\r\\n//   uint public totalTeamTokensToBeVested=0;\\r\\n//   bool _isAudited; \\r\\n//   string public auditUrl;\\r\\n//   CampaignStatus public  status = CampaignStatus.CREATED;\\r\\n\\r\\n//   address public liquidityPairAddress;\\r\\n//   address public liquidityPairLockerAddress;\\r\\n\\r\\n  \\r\\n  \\r\\n  \\r\\n//   CampaignSaleInfo public  saleInfo;\\r\\n  \\r\\n  \\r\\n//   address public dexRouterAddress;\\r\\n//   uint256 public totalCoinReceived; // total  received\\r\\n//   uint256 public totalCoinInTierZero;\\r\\n//   uint256 public totalCoinInTierOne; // total coin for tier one\\r\\n//   uint256 public totalCoinInTierTwo; // total coin for tier Tier\\r\\n\\r\\n//   address public purchaseTokenAddress=address(0); // Token address for Purchases for this campaign - address 0 is native currency\\r\\n  \\r\\n\\r\\n//   uint public totalParticipants; // total participants in ido\\r\\n  \\r\\n\\r\\n//   PlatFormDetails zsalesPlatformDetails;\\r\\n//   // address private _admin= 0xB7e16f5fa9941B84baCd1601F277B00911Aed339; //zsales admin - can setkyc and audited\\r\\n//   // address public zsalesTokenAddress = 0x97CEe927A48dc119Fd0b0b1047a879153975e893;\\r\\n//   // uint zsaleFee = 200;  //2%   - percent of native currency to take\\r\\n//   // uint zsaleTokenFee = 200;  //2% - percent fee of token to take\\r\\n\\r\\n//   // address public zsalesNFTTokenAddress = 0x97CEe927A48dc119Fd0b0b1047a879153975e893;\\r\\n//   // address zsalesWalletAddress = 0xB7e16f5fa9941B84baCd1601F277B00911Aed339 ; // receives commissions\\r\\n//   address public _campaignFactoryAddress ;\\r\\n\\r\\n//   uint private tier1TimeLineInHours = 2; // e.g 2 hours before startime\\r\\n//   uint private tier0TimeLineInHours = 3;\\r\\n\\r\\n//   bool private ownerHasWithdrawnTokens=false;\\r\\n  \\r\\n//   // max cap per tier\\r\\n//   uint public tierZerohardCap;\\r\\n//   uint public tierOnehardCap;\\r\\n//   uint public tierTwohardCap;\\r\\n    \\r\\n//   //total users per tier\\r\\n//   // uint public totalUserInTierZero;\\r\\n//   // uint public totalUserInTierOne;\\r\\n//   // uint public totalUserInTierTwo;\\r\\n  \\r\\n//   bool public useTokenVesting;\\r\\n//   bool public useRaisedFundsVesting;\\r\\n\\r\\n\\r\\n//   //Tier 0 - holders of our NFT\\r\\n//   //Tier 1 - holders of our coin\\r\\n//   //Tier 2 - Whitelisted or public   \\r\\n//   uint public minAllocationPerUser;\\r\\n//   //max allocations per user in a tier\\r\\n//   uint public maxAllocationPerUserTierZero;\\r\\n//   uint public maxAllocationPerUserTierOne;\\r\\n//   uint public maxAllocationPerUserTierTwo; \\r\\n  \\r\\n \\r\\n//   // // address array for tier one whitelist\\r\\n//   // address[] private whitelistTierOne;  // every tokenholder is automatically whitelisted\\r\\n  \\r\\n//   // // address array for tier two whitelist\\r\\n//   // address[] private whitelistTierTwo; \\r\\n\\r\\n//   bytes32 private _whitelistTierTwoMerkleRoot;\\r\\n  \\r\\n\\r\\n//   uint public campaignKey;\\r\\n//   // enum RefundType{ BURN, REFUND }\\r\\n  \\r\\n//   uint256 public liquidityReleaseInDays; // days to release Lp tokens to owner\\r\\n\\r\\n//   //mapping the user purchase per tier\\r\\n//   mapping(address => uint) public buyInZeroTier;\\r\\n//   mapping(address => uint) public buyInOneTier;\\r\\n//   mapping(address => uint) public buyInTwoTier;\\r\\n//   mapping(address => uint) public buyInAllTiers;\\r\\n//   DexLockerFactory private _dexLockerFactory;\\r\\n  \\r\\n//   IDexLocker public _dexLocker;\\r\\n//   uint private tokenDecimals;\\r\\n//   uint private purchaseCoinDecimals;\\r\\n  \\r\\n\\r\\n//   ///Do not leave an implementation contract uninitialized. An uninitialized implementation contract can be taken over by an attacker, which may impact the proxy. \\r\\n//   /// To prevent the implementation contract from being used, you should invoke the _disableInitializers function in the constructor to automatically lock it when it is deployed\\r\\n//   /// @custom:oz-upgrades-unsafe-allow constructor\\r\\n//   constructor() Ownable(msg.sender) {\\r\\n//       _disableInitializers();\\r\\n//   }\\r\\n\\r\\n//   function initialize(\\r\\n    \\r\\n//     /** address campaignOwner,\\r\\n//     /* address campaignFactory,\\r\\n//     /* address  _saletokenAddress, */\\r\\n//     /* address  _purchaseTokenAddress, */\\r\\n//     address[4] memory addresses,\\r\\n\\r\\n//     uint tokensOnSale,\\r\\n\\r\\n//     /** uint256 _normalizedTo18DecimalsSoftCap,\\r\\n//      * uint256 __normalizedTo18DecimalsHardCap,\\r\\n//      * uint256 _saleStartTime,\\r\\n//      * uint256 _saleEndTime, \\r\\n//      * uint256 _nomrlaizedTierOneHardCap, \\r\\n//      * uint256 _nomrlaizedTierTwoHardCap,\\r\\n//      * uint _minAllocationPerUser, \\r\\n//      * uint256 _maxAllocationPerUserTierOne, \\r\\n//      * uint256 _maxAllocationPerUserTierTwo ,\\r\\n//      * uint _campaignKey,*/\\r\\n//     uint256[10] memory capAndDate,  \\r\\n    \\r\\n//     // RefundType _refundType, \\r\\n//     address _dexRouterAddress,\\r\\n\\r\\n//     /**uint _liquidityPercent, \\r\\n//     /* uint liquidityReleaseTime,\\r\\n//     /* uint _listRate, \\r\\n//     /* uint _dexListRate,**/\\r\\n//     uint[4] memory liquidityAllocationAndRates,\\r\\n\\r\\n//     /**uint totalTeamTokensToBeVested, \\r\\n//     /* uint firstReleasePercent,  \\r\\n//     /* uint firstReleaseDays,\\r\\n//     /* uint subsequentReleasePercent, \\r\\n//     /* uint subsequentReleaseDays,,**/\\r\\n//     uint256[5] memory teamTokenVestingDetails,\\r\\n\\r\\n//     uint256[3] memory raisedFundVestingDetails,\\r\\n    \\r\\n//     // UseTeamTokenVesting,\\r\\n//     // UseRaisedFundVesting\\r\\n//     bool[2] memory _useTokenOrRaisedFundVesting,\\r\\n//     // VestSchedule[8] memory teamTokenVestingDetails, \\r\\n\\r\\n    \\r\\n//     string[6] memory founderInfo,\\r\\n//     DexLockerFactory dexLockerFactory \\r\\n//   ) public payable initializer {\\r\\n\\r\\n//     {\\r\\n//       // require(capAndDate[3] > capAndDate[2], \\\"Sale End time needs to be above start time\\\");\\r\\n//       // require(liquidityAllocationAndRates[0] >= 5100, \\\"Liquidity allowed is > 51 %\\\");\\r\\n//       if (capAndDate[3] <= capAndDate[2]) revert SaleEndTimeBeforeStartTime();\\r\\n//       if (liquidityAllocationAndRates[0] < 5100) revert LiquidityAboveLimit(5100);\\r\\n\\r\\n//       _campaignFactoryAddress= addresses[1];\\r\\n//       _setDefaultValues();\\r\\n//       campaignKey=capAndDate[9];\\r\\n      \\r\\n//       _dexLockerFactory=dexLockerFactory;\\r\\n//       purchaseTokenAddress=addresses[3]; \\r\\n//     }\\r\\n    \\r\\n      \\r\\n//     // //block scopin to avoid stack too deep \\r\\n//     {\\r\\n     \\r\\n//       saleInfo = CampaignSaleInfo({\\r\\n//         tokenAddress: addresses[2],\\r\\n//         softCap: capAndDate[0],\\r\\n//         hardCap: capAndDate[1],\\r\\n//         saleStartTime: capAndDate[2], \\r\\n//         saleEndTime: capAndDate[3],   \\r\\n//         liquidityPercent: liquidityAllocationAndRates[0],\\r\\n//         tokensOnSale: tokensOnSale,\\r\\n//         // refundType: _refundType, \\r\\n//         logoUrl: founderInfo[0],\\r\\n//         desc: founderInfo[1],\\r\\n//         website: founderInfo[2],\\r\\n//         twitter: founderInfo[3],\\r\\n//         telegram: founderInfo[4],\\r\\n//         discord: founderInfo[5]\\r\\n//       });\\r\\n\\r\\n//       dexRouterAddress=_dexRouterAddress; \\r\\n//     }        \\r\\n    \\r\\n    \\r\\n    \\r\\n//     { \\r\\n//           // _updateTierDetails(capAndDate[4], capAndDate[5], capAndDate[6],capAndDate[7], capAndDate[8]);\\r\\n//       _updateTierDetails(capAndDate);\\r\\n    \\r\\n\\r\\n//       _transferOwnership(addresses[0]);\\r\\n      \\r\\n\\r\\n//       _updateLockDetails(liquidityAllocationAndRates[1], _useTokenOrRaisedFundVesting[0], teamTokenVestingDetails,_useTokenOrRaisedFundVesting[1], raisedFundVestingDetails );\\r\\n//     }\\r\\n    \\r\\n//   }\\r\\n\\r\\n//   //needed since initializable contracts do not have constructors\\r\\n//   function _setDefaultValues() private {\\r\\n//     //status = CampaignStatus.CREATED;\\r\\n//     tier0TimeLineInHours = 3; // e.g 3 hours before startime\\r\\n//     tier1TimeLineInHours = 2; // e.g 2 hours before startime\\r\\n\\r\\n    \\r\\n//     ICampaignList cList = ICampaignList(_campaignFactoryAddress);\\r\\n//     zsalesPlatformDetails= PlatFormDetails({\\r\\n//       admin: cList.zsalesAdmin(), //zsales admin - can setkyc and audited\\r\\n//       zsalesTokenAddress : cList.zsalesTokenAddress(),\\r\\n//       zsaleFee : cList.zsaleFee(),  //2%   - percent of native currency to take\\r\\n//       zsaleTokenFee : cList.zsaleTokenFee(),  //2% - percent fee of token to take\\r\\n//       zsalesWalletAddress : cList.zsalesWalletAddress(), // receives commissions      \\r\\n//       zsalesNFTTokenAddress: cList.zsalesNFTTokenAddress()\\r\\n//     });\\r\\n//     // _admin= cList.zsalesAdmin(); //zsales admin - can setkyc and audited\\r\\n//     // zsalesTokenAddress = cList.zsalesTokenAddress();\\r\\n//     // zsaleFee = cList.zsaleFee();  //2%   - percent of native currency to take\\r\\n//     // zsaleTokenFee = cList.zsaleTokenFee();  //2% - percent fee of token to take\\r\\n//     // zsalesWalletAddress = cList.zsalesWalletAddress() ; // receives commissions\\r\\n    \\r\\n//     // zsalesNFTTokenAddress= cList.zsalesNFTTokenAddress();\\r\\n//   }\\r\\n  \\r\\n//   // function to update other details not initialized in constructor - this is bcos solidity limits how many variables u can pass in at once\\r\\n//   function _updateLockDetails(\\r\\n//     uint liquidityReleaseTimeDays, //Time to add to startTime in days\\r\\n//     bool _useTokenVesting,\\r\\n//     uint256[5] memory teamTokenVestingDetails,\\r\\n//     bool _useRaisedFundsVesting, \\r\\n//     uint256[3] memory raisedFundVestingDetails\\r\\n      \\r\\n//   ) private /*public onlyOwner*/ {\\r\\n//     liquidityReleaseInDays  = liquidityReleaseTimeDays;\\r\\n//     useTokenVesting=_useTokenVesting;\\r\\n//     useRaisedFundsVesting=_useRaisedFundsVesting;\\r\\n\\r\\n    \\r\\n//     //Set dexLock\\r\\n//     _dexLocker = IDexLocker(payable(_dexLockerFactory.createDexLocker(dexRouterAddress,saleInfo.tokenAddress, purchaseTokenAddress, address(this), msg.sender) ) );\\r\\n    \\r\\n    \\r\\n//     _dexLocker.setupLock([saleInfo.softCap,saleInfo.hardCap],  [uint256(0),uint256(0)],useTokenVesting, teamTokenVestingDetails, _useRaisedFundsVesting,  raisedFundVestingDetails);\\r\\n    \\r\\n//     status = CampaignStatus.CREATED;\\r\\n//     totalTeamTokensToBeVested = teamTokenVestingDetails[0];\\r\\n    \\r\\n\\r\\n//     // //if doesnt use tokenvesting , _startReceivingBids();\\r\\n//     // if(!useTokenVesting){\\r\\n//     //   _startReceivingBids();\\r\\n//     // }\\r\\n\\r\\n    \\r\\n\\r\\n//   }\\r\\n  \\r\\n//   function _updateCampaignFounderDetails(\\r\\n//     string memory logoUrl,\\r\\n//     string memory desc,\\r\\n//     string memory website,\\r\\n//     string memory twitter,\\r\\n//     string memory telegram,\\r\\n//     string memory discord\\r\\n//   ) private {\\r\\n//     saleInfo.logoUrl= logoUrl;\\r\\n//     saleInfo.desc= desc;\\r\\n//     saleInfo.website= website;\\r\\n//     saleInfo.twitter= twitter;\\r\\n//     saleInfo.telegram= telegram;\\r\\n//     saleInfo.discord= discord;\\r\\n//   }\\r\\n\\r\\n//   function updateCampaignFounderDetails(\\r\\n//     string memory logoUrl,\\r\\n//     string memory desc,\\r\\n//     string memory website,\\r\\n//     string memory twitter,\\r\\n//     string memory telegram,\\r\\n//     string memory discord\\r\\n//   ) external onlyOwner {       \\r\\n//     if (block.timestamp > saleInfo.saleStartTime) revert UpdateAfterSaleStartTime();\\r\\n//     _updateCampaignFounderDetails(logoUrl,desc,website,twitter,telegram,discord);\\r\\n//   }\\r\\n\\r\\n//   function _updateTierDetails(uint256[10] memory capAndDate) private {\\r\\n    \\r\\n//     _updateTierDetails(capAndDate[4], capAndDate[5], capAndDate[6],capAndDate[7], capAndDate[8]);\\r\\n//   }\\r\\n    \\r\\n//   // function to update the tiers users value manually\\r\\n//   function _updateTierDetails(uint256 _tierOneHardCap, uint256 _tierTwoHardCap, uint256 _minAllocationPerUser, uint256 _maxAllocationPerUserTierOne, uint256 _maxAllocationPerUserTierTwo) private {\\r\\n    \\r\\n//     tokenDecimals = IERC20Metadata(saleInfo.tokenAddress).decimals();\\r\\n//     purchaseCoinDecimals=18;\\r\\n//     if(purchaseTokenAddress!=address(0)){\\r\\n//       purchaseCoinDecimals = IERC20Metadata(purchaseTokenAddress).decimals();\\r\\n//     }\\r\\n    \\r\\n//     if (_tierOneHardCap < saleInfo.hardCap * 2500 / 10000) revert TierCapTooLow(25);\\r\\n//     // if (_tierOneHardCap + _tierTwoHardCap != saleInfo.hardCap) revert TierCapsExceedHardCap();\\r\\n//     if (_tierOneHardCap > saleInfo.hardCap) revert TierOneCapExceedsHardCap();\\r\\n//     if (_tierTwoHardCap > saleInfo.hardCap) revert TierTwoCapExceedsHardCap();\\r\\n\\r\\n//     if (_minAllocationPerUser < 0) revert MinAllocationOutOfRange();\\r\\n//     if (_maxAllocationPerUserTierOne <= 0) revert TierOneMaxAllocationOutOfRange();\\r\\n//     if (_maxAllocationPerUserTierTwo <= 0) revert TierTwoMaxAllocationOutOfRange();\\r\\n    \\r\\n    \\r\\n//     tierZerohardCap = _tierOneHardCap;\\r\\n//     tierOnehardCap =_tierOneHardCap;\\r\\n//     tierTwohardCap = _tierTwoHardCap;    \\r\\n    \\r\\n//     minAllocationPerUser=_minAllocationPerUser; \\r\\n//     maxAllocationPerUserTierZero = _maxAllocationPerUserTierOne;//same alloc for tier 0 and 1\\r\\n//     maxAllocationPerUserTierOne = _maxAllocationPerUserTierOne;\\r\\n//     maxAllocationPerUserTierTwo = _maxAllocationPerUserTierTwo;\\r\\n//   }\\r\\n\\r\\n//   function updateTierDetails(uint256 _tierOneHardCap, uint256 _tierTwoHardCap, uint256 _minAllocationPerUser, uint256 _maxAllocationPerUserTierOne, uint256 _maxAllocationPerUserTierTwo) public onlyOwner {\\r\\n    \\r\\n//     if(block.timestamp > saleInfo.saleStartTime){\\r\\n//       revert UpdateAfterSaleStartTime();\\r\\n//     }\\r\\n//     _updateTierDetails(_tierOneHardCap, _tierTwoHardCap, _minAllocationPerUser, _maxAllocationPerUserTierOne, _maxAllocationPerUserTierTwo);    \\r\\n//   }\\r\\n\\r\\n//   function _startReceivingBids() private \\r\\n//   {    \\r\\n//     status = CampaignStatus.TOKENS_SUBMITTED;\\r\\n//   }\\r\\n\\r\\n//   function startReceivingBids() public {\\r\\n//     if (_campaignFactoryAddress != _msgSender()) revert NotOwner();\\r\\n//     _startReceivingBids();\\r\\n//   }\\r\\n\\r\\n//   function cancelCampaign() public onlyOwner {\\r\\n//       if (block.timestamp >= saleInfo.saleStartTime) revert CannotCancelAfterSaleStartTime();\\r\\n//       status = CampaignStatus.CANCELLED;\\r\\n//   }\\r\\n\\r\\n//   function calcFairLaunchRate() public view returns (uint256 tokenRate) {\\r\\n//     uint256 balance = purchaseTokenAddress==address(0) ? (address(this).balance) : IERC20(purchaseTokenAddress).balanceOf(address(this));\\r\\n//     tokenRate = 10 ** 18 / balance * saleInfo.tokensOnSale;\\r\\n//   }\\r\\n\\r\\n//   function postponeSale(uint newDate, uint newEndDate) public onlyOwner {\\r\\n//       if (block.timestamp >= saleInfo.saleStartTime) revert PostponeBeforeSaleStartTime();\\r\\n//       if (newDate <= saleInfo.saleStartTime) revert NewDateLessThanOldDate();\\r\\n//       if (newEndDate <= newDate) revert EndDateLessThanStartTime();\\r\\n\\r\\n//       saleInfo.saleStartTime = newDate;\\r\\n//       saleInfo.saleEndTime = newEndDate;\\r\\n//   }\\r\\n\\r\\n//   function getDexListRate() public view returns (uint256) {\\r\\n//     return 0;\\r\\n//   }\\r\\n\\r\\n//   function getEndDate() public view returns (uint256) {\\r\\n//     return saleInfo.saleEndTime;\\r\\n//   }\\r\\n\\r\\n//   function totalTokensExpectedToBeLocked() public view returns (uint256) {\\r\\n//     //Amount for sale + amount for liquidity\\r\\n//     uint tokensForLiquidity = (saleInfo.tokensOnSale * saleInfo.liquidityPercent )  / 10000;\\r\\n//     return tokensForLiquidity ;// + _dexLocker.totalTokensExpectedToBeLocked();\\r\\n//   }\\r\\n\\r\\n \\r\\n//   function setZSalesTokenAddress(address _tokenAddress) public onlyAdmin {\\r\\n//     zsalesPlatformDetails.zsalesTokenAddress = _tokenAddress;\\r\\n//   }\\r\\n\\r\\n\\r\\n//   /**************************|\\r\\n//   |          Tier Info       |\\r\\n//   |_________________________*/\\r\\n//   //add the address in Whitelist tier two to invest\\r\\n//   function disableTier2Whitelist() public onlyOwner {    \\r\\n//     useWhiteList= false;\\r\\n//   }\\r\\n\\r\\n//   //add the address in Whitelist tier two to invest\\r\\n//   function submitTier2Whitelist(bytes32 whitelistMerkleRoot) public onlyOwner {\\r\\n    \\r\\n//     if (block.timestamp >= saleInfo.saleStartTime) revert AlterWhitelistingAfterSaleStartTime();\\r\\n//     useWhiteList= true;\\r\\n//     _whitelistTierTwoMerkleRoot=whitelistMerkleRoot;\\r\\n//   }\\r\\n\\r\\n//   // check the address is a Token Holder\\r\\n//   function isAllowedInTier1(address _address) public view returns(bool) {\\r\\n\\r\\n//     IERC20 token = IERC20(zsalesPlatformDetails.zsalesTokenAddress);\\r\\n//     return token.balanceOf(_address) > 0;\\r\\n//   }\\r\\n\\r\\n//   // check the address is a NFT Token Holder\\r\\n//   function isAllowedInTier0(address _address) public view returns(bool) {\\r\\n\\r\\n//     uint maxTiersToCheck= 5;\\r\\n//     IERC1155 token = IERC1155(zsalesPlatformDetails.zsalesNFTTokenAddress);\\r\\n//     address[] memory addresses=new address[](maxTiersToCheck);\\r\\n//     addresses[0]=_address;\\r\\n\\r\\n//     uint[] memory tokenIds=new uint[](maxTiersToCheck);\\r\\n    \\r\\n//     for (uint256 i = 0; i < maxTiersToCheck; i++) {\\r\\n//         tokenIds[i]=i;\\r\\n//     }\\r\\n\\r\\n//     uint[] memory balances = token.balanceOfBatch(addresses,tokenIds) ;\\r\\n//     uint balance = 0;\\r\\n//     for (uint256 i = 0; i < maxTiersToCheck; i++) {\\r\\n//         balance += balances[i];\\r\\n//     }\\r\\n//     return balance>0;\\r\\n//   }\\r\\n\\r\\n\\r\\n//   // check the address in whitelist tier two\\r\\n//   function isInTier2WhiteList(bytes32[] memory proof, address claimer) public view returns(bool) {\\r\\n    \\r\\n//     bytes32 _leaf = keccak256(abi.encodePacked(claimer));\\r\\n//     return MerkleProof.verify(proof, _whitelistTierTwoMerkleRoot, _leaf);\\r\\n    \\r\\n//   }\\r\\n\\r\\n//   /**\\r\\n//     * @dev Throws if called by any account other than the owner.\\r\\n//   */\\r\\n//   modifier onlyAdmin() {\\r\\n//       require(zsalesPlatformDetails.admin == _msgSender(), NotAdmin() );\\r\\n//       _;\\r\\n//   }\\r\\n\\r\\n//   function changeAdmin(address newAdmin) public onlyAdmin  {\\r\\n//       // require(_msgSender() == _admin, 'ADMIN: Only Admin can change');\\r\\n//       if(_msgSender() != zsalesPlatformDetails.admin) revert NotAdmin();\\r\\n//       address oldOwner = zsalesPlatformDetails.admin;\\r\\n//       zsalesPlatformDetails.admin=newAdmin;\\r\\n\\r\\n//       emit AdminOwnershipTransferred(oldOwner, newAdmin);\\r\\n//   }\\r\\n\\r\\n  \\r\\n//   function getHardCap() public view returns (uint) {\\r\\n//     return saleInfo.hardCap;\\r\\n//   }\\r\\n\\r\\n//   /**************************|\\r\\n//   |          Setters         |\\r\\n//   |_________________________*/\\r\\n  \\r\\n//   function setKYC(bool kyc) public onlyAdmin {\\r\\n//     if (block.timestamp >= saleInfo.saleStartTime) revert KYCAfterSaleStartTime();\\r\\n//     hasKYC = kyc;\\r\\n//   } \\r\\n\\r\\n//   function setAudited(bool audit) public onlyAdmin {\\r\\n//       if (block.timestamp >= saleInfo.saleStartTime) revert AuditAfterSaleStartTime();\\r\\n//       _isAudited = audit;\\r\\n//   }\\r\\n//   function setTier1TimeLineInHours (uint newValue) public onlyAdmin {\\r\\n//     tier1TimeLineInHours=newValue;\\r\\n//   }\\r\\n//   function isAudited() public view returns (bool, string memory ) {\\r\\n//     return (_isAudited, auditUrl);\\r\\n//   }\\r\\n\\r\\n\\r\\n//   /**\\r\\n//     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\r\\n//     * `recipient`, forwarding all available gas and reverting on errors.\\r\\n//     *\\r\\n//     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\r\\n//     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\r\\n//     * imposed by `transfer`, making them unable to receive funds via\\r\\n//     * `transfer`. {sendValue} removes this limitation.\\r\\n//     *\\r\\n//     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\r\\n//     *\\r\\n//     * IMPORTANT: because control is transferred to `recipient`, care must be\\r\\n//     * taken to not create reentrancy vulnerabilities. Consider using\\r\\n//     * {ReentrancyGuard} or the\\r\\n//     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\r\\n//     */\\r\\n//   function sendValue(address recipient, uint256 amount) internal {\\r\\n//       require(address(this).balance >= amount, InsufficientBalance());\\r\\n\\r\\n//       // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\r\\n//       (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\r\\n//       require(success, NoSendValue());//Address: unable to send value, recipient may have reverted\\r\\n//   }\\r\\n  \\r\\n  \\r\\n//   // send coin to the contract address\\r\\n//   function submitBid(bytes32[] calldata proof, uint256 purchasedAmount) public payable nonReentrant  {\\r\\n    \\r\\n//     uint256 normalizedBid ;\\r\\n//     if(purchaseTokenAddress==address(0)){\\r\\n//       normalizedBid= msg.value;\\r\\n//     }else{\\r\\n//       normalizedBid= purchasedAmount * 10**(18-purchaseCoinDecimals);//normalize\\r\\n//       IERC20(purchaseTokenAddress).safeTransferFrom(msg.sender, address(this), purchasedAmount);\\r\\n//     }\\r\\n    \\r\\n    \\r\\n//     if (status == CampaignStatus.CANCELLED) revert SaleCancelled();\\r\\n//     if (status == CampaignStatus.FAILED) revert SaleFailed();\\r\\n//     if (status != CampaignStatus.TOKENS_SUBMITTED) revert NotTokenSubmitted();\\r\\n//     if (totalCoinReceived >= saleInfo.hardCap) revert SoldOutError();\\r\\n//     if (block.timestamp > saleInfo.saleEndTime) revert ClosedSale();\\r\\n//     if (totalCoinReceived + normalizedBid > saleInfo.hardCap) revert ExceedMaxCap();\\r\\n//     if (normalizedBid < minAllocationPerUser) revert LessThanMinBuy();\\r\\n    \\r\\n          \\r\\n//     address sender = _msgSender();\\r\\n//     if (block.timestamp >= saleInfo.saleStartTime) {\\r\\n//         if (useWhiteList) {\\r\\n//             if (!isInTier2WhiteList(proof, sender)) revert NotInTier2Whitelist();\\r\\n//         }\\r\\n//         if (totalCoinInTierTwo + normalizedBid > tierTwohardCap) revert ExceedTierTwoMaxCap();\\r\\n//         if (buyInTwoTier[sender] + normalizedBid > maxAllocationPerUserTierTwo) revert ExceedTierTwoUserLimit();\\r\\n//         buyInTwoTier[sender] += normalizedBid;\\r\\n//         buyInAllTiers[sender] += normalizedBid;\\r\\n//         totalCoinReceived += normalizedBid;\\r\\n//         totalCoinInTierTwo += normalizedBid;\\r\\n//         totalParticipants++;\\r\\n\\r\\n//         emit ValueReceived(sender, purchasedAmount);\\r\\n//     } else if (ICampaignList(_campaignFactoryAddress).getTierStatus(0) && block.timestamp >= saleInfo.saleStartTime - (tier0TimeLineInHours * 1 hours)) {  \\r\\n//         if (!isAllowedInTier0(sender)) revert NotInTier0();\\r\\n//         if (totalCoinInTierZero + normalizedBid > tierZerohardCap) revert ExceedTierZeroMaxCap();\\r\\n//         if (buyInZeroTier[sender] + normalizedBid > maxAllocationPerUserTierZero) revert ExceedTierZeroUserLimit();\\r\\n//         buyInZeroTier[sender] += normalizedBid;\\r\\n//         buyInAllTiers[sender] += normalizedBid;\\r\\n//         totalCoinReceived += normalizedBid;\\r\\n//         totalCoinInTierZero += normalizedBid;\\r\\n//         totalParticipants++;\\r\\n\\r\\n//         emit ValueReceived(sender, purchasedAmount);\\r\\n//     } else if (ICampaignList(_campaignFactoryAddress).getTierStatus(1) && block.timestamp >= saleInfo.saleStartTime - (tier1TimeLineInHours * 1 hours)) {  \\r\\n//         if (!isAllowedInTier1(sender)) revert NotInTier1();\\r\\n//         if (totalCoinInTierOne + normalizedBid > tierOnehardCap) revert ExceedTierOneMaxCap();\\r\\n//         if (buyInOneTier[sender] + normalizedBid > maxAllocationPerUserTierOne) revert ExceedTierOneUserLimit();\\r\\n//         buyInOneTier[sender] += normalizedBid;\\r\\n//         buyInAllTiers[sender] += normalizedBid;\\r\\n//         totalCoinReceived += normalizedBid;\\r\\n//         totalCoinInTierOne += normalizedBid;\\r\\n//         totalParticipants++;\\r\\n\\r\\n//         emit ValueReceived(sender, purchasedAmount);\\r\\n//     } else {\\r\\n//         revert SaleNotStarted();\\r\\n//     }\\r\\n\\r\\n    \\r\\n\\r\\n//     // return '';\\r\\n//   }\\r\\n\\r\\n//   /**\\r\\n//   * @dev Withdraw tokens or coin by user after end time\\r\\n//   * If this project does not reach softcap, return their funds otherwise get tokens \\r\\n//   */\\r\\n//   function withdrawFunds() public {\\r\\n//     address usr = _msgSender();\\r\\n\\r\\n//     if (usr == owner()) revert OwnersCannotWithdraw();\\r\\n    \\r\\n//     // if campaign is sold out no need to wait for endtime finalize and setup liquidity\\r\\n//     if (block.timestamp < saleInfo.saleEndTime && totalCoinReceived < saleInfo.softCap) revert OngoingSales();\\r\\n    \\r\\n//     if (buyInAllTiers[usr] == 0) revert NoCoinsToClaim();\\r\\n\\r\\n//     // if (totalCoinReceived < saleInfo.softCap) {\\r\\n//     //     status = CampaignStatus.FAILED;\\r\\n//     // }\\r\\n\\r\\n//     uint256 amount = buyInAllTiers[usr];\\r\\n//     buyInAllTiers[usr] = 0;\\r\\n    \\r\\n\\r\\n//     if (status == CampaignStatus.FAILED) {\\r\\n//       // return back funds\\r\\n//       if(purchaseTokenAddress==address(0)){\\r\\n//         payable(usr).transfer(amount);\\r\\n//       }else{\\r\\n//         IERC20(purchaseTokenAddress).safeTransfer(usr, amount/10**(18-purchaseCoinDecimals));\\r\\n//       }          \\r\\n//       emit Refunded(usr, amount/10**(18-purchaseCoinDecimals));\\r\\n//     } else {\\r\\n//         uint256 amountTokens = amount * calcFairLaunchRate();\\r\\n//         IERC20 _token = IERC20(saleInfo.tokenAddress);\\r\\n//         // Transfer Tokens to User\\r\\n//         _token.safeTransfer(usr, amountTokens/10**(18-tokenDecimals));\\r\\n\\r\\n//         emit Withdrawn(usr, amountTokens/10**(18-tokenDecimals));\\r\\n//     }    \\r\\n//   }\\r\\n\\r\\n//   /**\\r\\n//   * @dev Withdraw owner tokens If this project does not reach softcap\\r\\n//   */\\r\\n \\r\\n\\r\\n//   function withdrawOwnerTokens() public onlyOwner {\\r\\n//       if (status != CampaignStatus.FAILED && status != CampaignStatus.CANCELLED && status != CampaignStatus.LIQUIDITY_SETUP) revert RequireCancelorFail();\\r\\n//       if (block.timestamp < saleInfo.saleEndTime) revert NotEndDate();\\r\\n//       if(ownerHasWithdrawnTokens) revert OwnerHasWithdrawnAlready();\\r\\n\\r\\n//       if(totalCoinReceived < saleInfo.softCap){\\r\\n//         status= CampaignStatus.FAILED;\\r\\n//       }\\r\\n\\r\\n//       IERC20 _token = IERC20(saleInfo.tokenAddress);\\r\\n//       //if (totalCoinReceived >= saleInfo.softCap ) revert AlreadyReachedSoftCap(saleInfo.softCap);\\r\\n//       if(status == CampaignStatus.FAILED || status == CampaignStatus.CANCELLED){\\r\\n        \\r\\n//         uint256 tokensAmount = _token.balanceOf(address(this));\\r\\n\\r\\n//         if (tokensAmount == 0) revert NoTokens();\\r\\n//         ownerHasWithdrawnTokens=true;\\r\\n//         _token.safeTransfer(msg.sender, tokensAmount);\\r\\n\\r\\n\\r\\n//       }else if(status == CampaignStatus.LIQUIDITY_SETUP){\\r\\n//         // // Todo\\r\\n//         // uint tokensForUsers = saleInfo.tokensOnSale ;\\r\\n//         // uint tokensForLiquidity = tokensForUsers *  saleInfo.liquidityPercent/10000;\\r\\n//         // uint tokensForFees =zsalesPlatformDetails.zsaleTokenFee * tokensForUsers / 10000;\\r\\n\\r\\n//         // uint withdrawableTokens  = (tokensForLiquidity + tokensForUsers + tokensForFees )/ 10**(18-tokenDecimals);\\r\\n//         // ownerHasWithdrawnTokens=true;\\r\\n\\r\\n//         // _token.safeTransfer(msg.sender, withdrawableTokens);\\r\\n//         uint256 tokensAmount = _token.balanceOf(address(this));\\r\\n\\r\\n//         if (tokensAmount == 0) revert NoTokens();\\r\\n//         ownerHasWithdrawnTokens=true;\\r\\n//         _token.safeTransfer(msg.sender, tokensAmount);\\r\\n//       }\\r\\n      \\r\\n//   }\\r\\n\\r\\n  \\r\\n  \\r\\n\\r\\n//   /**\\r\\n//     * Setup liquidity and transfer all amounts according to defined percents, if softcap not reached set Refunded flag\\r\\n//     */\\r\\n//   function finalizeAndSetupLiquidity() public nonReentrant {\\r\\n    \\r\\n//     require (totalCoinReceived >= saleInfo.hardCap || block.timestamp > saleInfo.saleEndTime, NoSoldOutOrEndDate());\\r\\n//     if (status == CampaignStatus.FAILED) revert CampaignFailed();\\r\\n//     if (status == CampaignStatus.CANCELLED) revert CampaignCancelled();\\r\\n//     if (status == CampaignStatus.LIQUIDITY_SETUP) revert LiquiditySetupAlreadyDone();\\r\\n//     //\\r\\n//     if(totalCoinReceived < saleInfo.softCap){ // set to failed and stop\\r\\n//         status= CampaignStatus.FAILED ;\\r\\n//         return;\\r\\n//     }\\r\\n\\r\\n    \\r\\n//     IERC20 tokenOnSale = IERC20(saleInfo.tokenAddress);\\r\\n\\r\\n//     // Total amount invested\\r\\n//     uint256 currentCoinBalance = address(this).balance;\\r\\n//     if(purchaseTokenAddress!=address(0)){\\r\\n//       currentCoinBalance = IERC20(purchaseTokenAddress).balanceOf(address(this));\\r\\n//     }\\r\\n\\r\\n//     if(currentCoinBalance<=0 || (totalCoinReceived/ 10**(18-purchaseCoinDecimals)) > currentCoinBalance ){\\r\\n//        revert NoCoin();\\r\\n//     }\\r\\n    \\r\\n\\r\\n//     uint256 zsaleFeeAmount = (totalCoinReceived * zsalesPlatformDetails.zsaleFee / 10000) / 10**(18-purchaseCoinDecimals);\\r\\n    \\r\\n//     uint256 sold_tokens_amount = calcFairLaunchRate() * totalCoinReceived / 10 ** (18 - tokenDecimals);\\r\\n//     uint256 zsaleTokenFeeAmount = (sold_tokens_amount * zsalesPlatformDetails.zsaleTokenFee/ 10000); // /10**(18 -tokenDecimals);\\r\\n    \\r\\n//     //Fees charged in Purchase coin\\r\\n//     if(purchaseTokenAddress==address(0)){\\r\\n//       payable(zsalesPlatformDetails.zsalesWalletAddress).transfer(zsaleFeeAmount);\\r\\n//     }else{\\r\\n//       IERC20(purchaseTokenAddress).safeTransfer(zsalesPlatformDetails.zsalesWalletAddress, zsaleFeeAmount);\\r\\n//     }\\r\\n//     // //Fee charged in Token listed, \\r\\n//     tokenOnSale.safeTransfer(zsalesPlatformDetails.zsalesWalletAddress, zsaleTokenFeeAmount);\\r\\n\\r\\n\\r\\n//     uint256 supplyAfterFees = purchaseTokenAddress==address(0) ? address(this).balance : IERC20(purchaseTokenAddress).balanceOf(address(this));\\r\\n//     //Amount of Token to be sent to dex\\r\\n//     if(purchaseTokenAddress!=address(0)){\\r\\n//       supplyAfterFees = supplyAfterFees * (10 ** (18 - purchaseCoinDecimals));\\r\\n//     }\\r\\n    \\r\\n//     uint256 tokensBalance =  tokenOnSale.balanceOf(address(this)) * (10 ** (18 - tokenDecimals));\\r\\n//     // Amount to be sent to dex\\r\\n//     uint256 liquidityAmount = (supplyAfterFees * saleInfo.liquidityPercent) / 10000;\\r\\n//     if(tokensBalance < liquidityAmount * calcFairLaunchRate() ) revert NoTokensForLiquidity();\\r\\n\\r\\n//     uint256 tokensForLiquidity = liquidityAmount * calcFairLaunchRate() / (10 ** (18 - tokenDecimals)); \\r\\n//     bool approvalSucess = tokenOnSale.approve(dexRouterAddress, tokensForLiquidity);\\r\\n//     require(approvalSucess == true, RouterApprovalFailed());\\r\\n\\r\\n    \\r\\n//     IDexRouter _dexRouter=IDexRouter(dexRouterAddress);\\r\\n//     if(purchaseTokenAddress==address(0)){\\r\\n      \\r\\n//       _dexRouter.addLiquidityETH{value: liquidityAmount}(\\r\\n//             saleInfo.tokenAddress,\\r\\n//             tokensForLiquidity,\\r\\n//             0, // tokensForLiquidity,\\r\\n//             0, //liquidityAmount,\\r\\n//             address(this),\\r\\n//             block.timestamp + 100\\r\\n//       );\\r\\n      \\r\\n//       emit LiquidityAddedToRouter(dexRouterAddress, address(0),saleInfo.tokenAddress,liquidityAmount,tokensForLiquidity  );\\r\\n\\r\\n//     }else{\\r\\n      \\r\\n//       tokenOnSale.approve(dexRouterAddress, MAX_INT);\\r\\n      \\r\\n//       IERC20(purchaseTokenAddress).approve(dexRouterAddress, MAX_INT);\\r\\n//       _dexRouter.addLiquidity(\\r\\n//           address(tokenOnSale),\\r\\n//           purchaseTokenAddress,\\r\\n//           tokensForLiquidity,\\r\\n//           liquidityAmount/(10** (18-purchaseCoinDecimals)),\\r\\n//           0,\\r\\n//           0,            \\r\\n//           address(this),\\r\\n//           block.timestamp + 100\\r\\n//       );\\r\\n//       emit LiquidityAddedToRouter(dexRouterAddress, purchaseTokenAddress,address(tokenOnSale),liquidityAmount,tokensForLiquidity  );\\r\\n\\r\\n//     }\\r\\n\\r\\n        \\r\\n//     // get lp address from factory\\r\\n//     IDexFactory _dexFactory = IDexFactory(_dexRouter.factory());\\r\\n//     liquidityPairAddress = _dexFactory.getPair(saleInfo.tokenAddress, purchaseTokenAddress==address(0)?_dexRouter.WETH(): purchaseTokenAddress );\\r\\n//     uint lpPairbalance=IERC20(liquidityPairAddress).balanceOf(address(this));\\r\\n//     liquidityPairLockerAddress = _dexLocker.lockERC20(liquidityPairAddress, owner(),lpPairbalance, 100,liquidityReleaseInDays,0,0);// address(tokenLocker);\\r\\n    \\r\\n//     IERC20(liquidityPairAddress).safeTransfer(liquidityPairLockerAddress, lpPairbalance);\\r\\n\\r\\n//     uint256 balanceAfterLiquidityAndFees = purchaseTokenAddress==address(0) ? address(this).balance : IERC20(purchaseTokenAddress).balanceOf(address(this));\\r\\n//     if(useRaisedFundsVesting){\\r\\n//       //send raised funds to Lock\\r\\n//       // Remainder after all dedeuctions and liquidity\\r\\n//       if(purchaseTokenAddress==address(0)){\\r\\n        \\r\\n//         _dexLocker.startRaisedFundsLock{value: (_dexLocker.raisedFundsPercent() * balanceAfterLiquidityAndFees) / 10000 }( balanceAfterLiquidityAndFees );\\r\\n        \\r\\n//       }else{\\r\\n//         IERC20(purchaseTokenAddress).safeTransfer(address(_dexLocker),(_dexLocker.raisedFundsPercent() * balanceAfterLiquidityAndFees) / 10000);\\r\\n//         _dexLocker.startRaisedFundsLock( balanceAfterLiquidityAndFees );\\r\\n//       }\\r\\n//     }  \\r\\n\\r\\n//     // Send Balance to Owner\\r\\n//     if(purchaseTokenAddress==address(0)){\\r\\n//       sendValue(owner(),address(this).balance);      \\r\\n//     }else{\\r\\n//       IERC20(purchaseTokenAddress).safeTransfer(owner(),IERC20(purchaseTokenAddress).balanceOf(address(this)) );\\r\\n      \\r\\n//     }  \\r\\n    \\r\\n//     status=CampaignStatus.LIQUIDITY_SETUP;\\r\\n//   }\\r\\n\\r\\n  \\r\\n//   function getCampaignInfo() public view returns( uint256 softcap, uint256 hardcap,uint256 saleStartTime, uint256 saleEndTime,uint256 listRate, uint256 dexListRate,uint tokensOnSale, uint liquidity,uint _liquidityReleaseTime ,uint256 totalCoins, uint256 totalParticipant, bool use_WhiteList, bool hasKyc, bool isAuditd, string memory _auditUrl ){\\r\\n//       return ( saleInfo.softCap, MAX_INT,saleInfo.saleStartTime, saleInfo.saleEndTime, 0, 0,saleInfo.tokensOnSale, saleInfo.liquidityPercent, liquidityReleaseInDays, totalCoinReceived,totalParticipants, useWhiteList,hasKYC, _isAudited, auditUrl );\\r\\n//   }\\r\\n\\r\\n  \\r\\n\\r\\n//   function getCampaignStatus() public view returns(CampaignStatus ){\\r\\n//       return status ;\\r\\n//   }\\r\\n\\r\\n//   function getCampaignPeriod() public view returns(uint256 saleStartTime, uint256 saleEndTime ){\\r\\n//       return (saleInfo.saleStartTime, saleInfo.saleEndTime );\\r\\n//   }\\r\\n\\r\\n//   function getCampaignSalePriceInfo() public view returns(uint256 , uint256,uint256 , uint256,uint256 , uint256,uint256 ){\\r\\n//       return (0, 0, saleInfo.softCap, saleInfo.hardCap, tierOnehardCap,tierTwohardCap, maxAllocationPerUserTierTwo  );\\r\\n//   }\\r\\n\\r\\n//   /**\\r\\n//     * \\r\\n//     */\\r\\n//   function isSoldOut() public view returns (bool) {\\r\\n//       return totalCoinReceived>= saleInfo.hardCap;\\r\\n//   }\\r\\n\\r\\n//     /**\\r\\n//     * \\r\\n//     */\\r\\n//   function hasFailed() public view returns (bool) {\\r\\n//       return status == CampaignStatus.FAILED;\\r\\n//   }\\r\\n\\r\\n  \\r\\n//   function dexLockerAddress() public view onlyAdmin returns (address) {\\r\\n//       return address( _dexLocker);\\r\\n//   }\\r\\n\\r\\n//   function tokenAddress() public view returns (address) {\\r\\n//       return saleInfo.tokenAddress;\\r\\n//   }\\r\\n\\r\\n//   // Refund any mistakenly sent in ERC20\\r\\n//   function refundERC20(IERC20 _token, address recipient, uint256 amount) public onlyAdmin {      \\r\\n//     _token.safeTransfer(recipient, amount);\\r\\n//   }\\r\\n\\r\\n// }\",\"keccak256\":\"0x2e32d5ade4eeff24a5f0545f38d71cc443a4eecd6453542c1a1b81c4ab11ffbf\",\"license\":\"MIT\"},\"contracts/IDexRouter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.17;\\r\\n\\r\\ninterface IDexRouter {\\r\\n    function factory() external pure returns (address);\\r\\n    function WETH() external pure returns (address);\\r\\n    function addLiquidityETH(\\r\\n        address token,\\r\\n        uint amountTokenDesired,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\r\\n\\r\\n    \\r\\n    function addLiquidity(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint amountADesired,\\r\\n        uint amountBDesired,\\r\\n        uint amountAMin,\\r\\n        uint amountBMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external  returns (uint amountA, uint amountB, uint liquidity) ;\\r\\n\\r\\n\\r\\n\\t\\r\\n    \\r\\n\\r\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\r\\n        address token,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountETH);\\r\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\r\\n        address token,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline,\\r\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\r\\n    ) external returns (uint amountETH);\\r\\n\\t\\r\\n\\t\\r\\n\\tfunction swapExactTokensForTokens(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint[] memory amounts);\\r\\n    function swapTokensForExactTokens(\\r\\n        uint amountOut,\\r\\n        uint amountInMax,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint[] memory amounts);\\r\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\r\\n        external\\r\\n        payable\\r\\n        returns (uint[] memory amounts);\\r\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\r\\n        external\\r\\n        returns (uint[] memory amounts);\\r\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\r\\n        external\\r\\n        returns (uint[] memory amounts);\\r\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\r\\n        external\\r\\n        payable\\r\\n        returns (uint[] memory amounts);\\r\\n\\t\\r\\n\\tfunction swapExactTokensForETHSupportingFeeOnTransferTokens(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external;\\r\\n\\r\\n\\t// Identical to swapExactTokensForTokens, but succeeds for tokens that take a fee on transfer.\\r\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external;\\r\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external payable;\\r\\n    \\r\\n}\\r\\n\\r\\ninterface IDexFactory {\\r\\n    function getPair(address token0, address token1) external view returns (address);\\r\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\r\\n}\\r\\n\",\"keccak256\":\"0xb7148a79fc2f18b5f65b240b90c0696c3316194015aed638ae91753a5fd1e8e9\",\"license\":\"MIT\"},\"contracts/Interfaces/Turnstile.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.17;\\r\\n\\r\\ninterface Turnstile {\\r\\n    function register(address) external returns(uint256);\\r\\n}\",\"keccak256\":\"0xf8da5947d9fc97c08f251bc7264160223977e8758c39b34470fe204640186815\",\"license\":\"MIT\"},\"contracts/Lockers/DexLocker.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.28;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\r\\n\\r\\nimport \\\"./VestSchedule.sol\\\";\\r\\nimport \\\"./TokenLocker.sol\\\";\\r\\nimport \\\"../Errors.sol\\\";\\r\\n\\r\\nimport \\\"./PurchasedCoinVestingVault.sol\\\";\\r\\n// import \\\"./LiquidityLocker.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/proxy/Clones.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\r\\nimport \\\"hardhat/console.sol\\\";\\r\\n\\r\\nerror NotEnoughCoinsForRaisedFundsLock();\\r\\nerror LiquidityAmountTransferFailed();\\r\\n\\r\\n/// @title IDexLocker\\r\\n/// @notice Manages liquidity and vesting for tokens raised in sales campaigns\\r\\ninterface IDexLocker {\\r\\n    function initialize(\\r\\n        // address dexRouterAddress,\\r\\n        address token,\\r\\n        address purchaseToken,\\r\\n        address deployer,\\r\\n        address owner,\\r\\n        address purchasedCoinVestingVaultImplementationAddress\\r\\n    ) external;\\r\\n\\r\\n    function setupLock(\\r\\n        \\r\\n        // uint minRaisedFunds,uint maxRaisedFunds, \\r\\n        uint[2] calldata raisedFunds,\\r\\n        // bool isFairLaunch, \\r\\n        // uint256 saleListPrice,  uint256 dexListPrice, \\r\\n        uint256[2] calldata saleAndDexRates,\\r\\n\\r\\n        bool useTeamTokenVesting, \\r\\n        uint256[5] calldata teamTokenVestingDetails, \\r\\n        bool useRaisedFundsVesting, \\r\\n        uint256[3] calldata raisedFundVestingDetails \\r\\n    ) external;\\r\\n\\r\\n     \\r\\n     /// @dev If campaign Locks raised fund, lock the calculated amount\\r\\n     ///\\r\\n    function startRaisedFundsLock(uint256 raisedAmountAfterAllDeductions) external payable;\\r\\n\\r\\n    function lockERC20(address tokenAddress,address tokenOwner, uint totalTokens, uint firstReleasePercent, uint firstReleaseDays, \\r\\n        uint subsequentReleasePercent, uint subsequentReleaseDays ) external returns(address lockerAddress);\\r\\n\\r\\n    function getOwner() external view returns (address);\\r\\n\\r\\n    function releaseTeamTokens() external;\\r\\n\\r\\n    function releaseCoinVaultETH() external;\\r\\n\\r\\n    function raisedFundsVaultAddress() external view returns (address);\\r\\n\\r\\n    function raisedFundsPercent() external view returns (uint);\\r\\n\\r\\n    function tokenLockerAddress() external view returns (address);\\r\\n\\r\\n    // function liquidityLockerAddress() external view returns (address);\\r\\n\\r\\n    // function totalTokensExpectedToBeLocked() external view returns(uint);\\r\\n}\\r\\n\\r\\n/// @title DexLocker\\r\\n/// @notice Manages vesting for tokens raised in sales campaigns, LP TOkens and Team Vesting tokens\\r\\ncontract DexLocker is Initializable, IDexLocker{\\r\\n    error DLOnlyDeployer();\\r\\n    error DLReleaseBeforeTime();\\r\\n    error TokenCannotBeAddressZero();\\r\\n    using SafeERC20 for IERC20;\\r\\n\\r\\n    event ERC20LockCreated(address indexed lockerAddress, address indexed token, address indexed owner, uint totalTokensLocked);\\r\\n    \\r\\n    address private _owner;\\r\\n\\r\\n    address private _deployer;\\r\\n\\r\\n    uint256 constant private MAX_INT = 2**256 - 1;\\r\\n\\r\\n    // uint public totalTokensExpectedToBeLocked;\\r\\n\\r\\n    address private _token;\\r\\n    address private _purchaseToken;\\r\\n\\r\\n    TokenLocker private _teamTokensLocker;\\r\\n    PurchasedCoinVestingVault private _purchasedCoinVestingVault;\\r\\n    // LiquidityLocker private _liquidityLocker;\\r\\n    // uint private _liquidityPercentOfRaisedFunds;\\r\\n\\r\\n    /**\\r\\n    Maps to \\r\\n    \\r\\n        uint256 _percentOfRaisedFundsToLock,\\r\\n        uint256 _vestingDurationInDays,\\r\\n        uint256 _vestingCliffInDays\\r\\n     */\\r\\n    uint256[3] _raisedFundVestingDetails;\\r\\n    bool _useRaisedFundsVesting;\\r\\n\\r\\n    address  _purchasedCoinVestingVaultImplementationAddress;\\r\\n\\r\\n    ///Do not leave an implementation contract uninitialized. An uninitialized implementation contract can be taken over by an attacker, which may impact the proxy. \\r\\n    /// To prevent the implementation contract from being used, you should invoke the _disableInitializers function in the constructor to automatically lock it when it is deployed\\r\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\r\\n    constructor() {\\r\\n        _disableInitializers();\\r\\n    }\\r\\n\\r\\n    function initialize( address token, address purchaseToken,address deployer,address owner, address purchasedCoinVestingVaultImplementationAddress ) public initializer  {\\r\\n        require(token != address(0), InvalidSalesTokenAddress(token));\\r\\n        require(deployer != address(0), InvalidDeployerAddress(deployer));\\r\\n        require(owner != address(0), InvalidOwnerAddress(owner));\\r\\n\\r\\n        \\r\\n        _deployer = deployer; //msg.sender;\\r\\n        \\r\\n        _owner = owner;\\r\\n        _token = token; \\r\\n        _purchaseToken=purchaseToken;\\r\\n        _purchasedCoinVestingVaultImplementationAddress=purchasedCoinVestingVaultImplementationAddress;       \\r\\n    }\\r\\n\\r\\n    \\r\\n    function setupLock(\\r\\n        // uint minRaisedFunds,uint maxRaisedFunds, \\r\\n        uint[2] calldata raisedFunds,  \\r\\n        // bool isFairLaunch,      \\r\\n        // uint256 saleListPrice,  uint256 dexListPrice, \\r\\n        uint256[2] calldata saleAndDexRates,\\r\\n        bool useTeamTokenVesting, \\r\\n        uint256[5] calldata teamTokenVestingDetails, \\r\\n        bool useRaisedFundsVesting, \\r\\n        uint256[3] calldata raisedFundVestingDetails \\r\\n    ) public {\\r\\n        \\r\\n        require(msg.sender == _deployer, DLOnlyDeployer());        \\r\\n\\r\\n        // totalTokensExpectedToBeLocked = 0;\\r\\n        \\r\\n        // if(!isFairLaunch){\\r\\n        //     //Sold tokens\\r\\n        //     totalTokensExpectedToBeLocked += saleAndDexRates[0] * raisedFunds[1];\\r\\n        // }\\r\\n        \\r\\n        if(useTeamTokenVesting){\\r\\n            \\r\\n            _teamTokensLocker = new TokenLocker(_token, _owner,teamTokenVestingDetails[0],teamTokenVestingDetails[1],teamTokenVestingDetails[2],teamTokenVestingDetails[3],teamTokenVestingDetails[4] );\\r\\n            //totalTokensExpectedToBeLocked += normalizeTokenAmount(teamTokenVestingDetails[0], IERC20Metadata(_token).decimals());\\r\\n        }\\r\\n        \\r\\n\\r\\n        _useRaisedFundsVesting=useRaisedFundsVesting;\\r\\n        if(_useRaisedFundsVesting){\\r\\n            for (uint8 i=0; i < 3 ; i++) {\\r\\n                _raisedFundVestingDetails[i] = raisedFundVestingDetails[i]; \\r\\n            }\\r\\n        }\\r\\n        \\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Raised funds\\r\\n     */\\r\\n    function startRaisedFundsLock(uint256 _raisedAmountAfterAllDeductions) public payable {\\r\\n        require(msg.sender == _deployer, DLOnlyDeployer());\\r\\n        \\r\\n        if(_useRaisedFundsVesting){\\r\\n           if(_purchaseToken==address(0) && msg.value< _raisedFundVestingDetails[0] * _raisedAmountAfterAllDeductions /10000 ) revert NotEnoughCoinsForRaisedFundsLock();\\r\\n            address newCoinVaultCloneAddress = Clones.clone(_purchasedCoinVestingVaultImplementationAddress);\\r\\n            _purchasedCoinVestingVault = PurchasedCoinVestingVault(payable(newCoinVaultCloneAddress) );\\r\\n            \\r\\n            _purchasedCoinVestingVault.initialize(_owner,block.timestamp, _raisedFundVestingDetails[0] * _raisedAmountAfterAllDeductions /10000, _raisedFundVestingDetails[1],_raisedFundVestingDetails[2], _purchaseToken);\\r\\n            \\r\\n            //Send coins\\r\\n            if(_purchaseToken==address(0)){\\r\\n                payable(_purchasedCoinVestingVault).transfer(_raisedFundVestingDetails[0] * _raisedAmountAfterAllDeductions /10000);\\r\\n            }else{\\r\\n                IERC20(_purchaseToken).safeTransfer(address(_purchasedCoinVestingVault),_raisedFundVestingDetails[0] * _raisedAmountAfterAllDeductions /10000);\\r\\n                //_purchasedCoinVestingVault.receiveTokens(_raisedFundVestingDetails[0] * _raisedAmountAfterAllDeductions /10000 );\\r\\n            }\\r\\n            \\r\\n        }\\r\\n        \\r\\n    }\\r\\n\\r\\n    receive() external payable {\\r\\n        // payable(_coinLocker).transfer(msg.value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Normalization function that adjusts token amounts to a common decimal base (18 decimals in this case). \\r\\n     * This function either scales up or scales down the token amount based on the number of decimals the token uses,\\r\\n     * ensuring the final amount will be always displayed with 18 decimals. \\r\\n     * Of course this can result in a minor truncation if tokens >18 decimals are being used, this must be considered\\r\\n     */\\r\\n    function normalizeTokenAmount(uint tokenAmount, uint tokenDecimals) public pure returns (uint) {\\r\\n        uint standardDecimal = 18;\\r\\n        if(tokenDecimals>standardDecimal){\\r\\n            return tokenAmount / (10 ** (tokenDecimals-standardDecimal));\\r\\n        }\\r\\n        else if(tokenDecimals< standardDecimal){\\r\\n            return tokenAmount * (10 ** (standardDecimal - tokenDecimals));\\r\\n        }\\r\\n        else{\\r\\n            return tokenAmount;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function lockERC20(address tokenAddress,address tokenOwner, uint totalTokens, uint firstReleasePercent, uint firstReleaseDays, \\r\\n        uint subsequentReleasePercent, uint subsequentReleaseDays ) public returns(address lockerAddress) {\\r\\n        require(tokenAddress!=address(0), TokenCannotBeAddressZero());\\r\\n        TokenLocker tokenLocker= new TokenLocker(tokenAddress, tokenOwner,totalTokens, firstReleasePercent,firstReleaseDays,subsequentReleasePercent,subsequentReleaseDays );\\r\\n        lockerAddress= address(tokenLocker);\\r\\n        emit ERC20LockCreated(lockerAddress,tokenAddress, tokenOwner ,totalTokens );\\r\\n    }\\r\\n  \\r\\n\\r\\n//    /**\\r\\n//      * @return the time when the LP tokens are released.\\r\\n//      */\\r\\n//     function getLiquidityReleaseTime() public view returns (uint256) {\\r\\n//         return _lpReleaseTime;\\r\\n//     }\\r\\n\\r\\n      /**\\r\\n     * @return the owner of the locked funds\\r\\n     */\\r\\n    function getOwner() public view returns (address) {\\r\\n        return _owner;\\r\\n    }\\r\\n    \\r\\n    // /**\\r\\n    //  * @notice Transfers tokens held by Lock to owner.\\r\\n    //    @dev Able to withdraw LP funds after release time \\r\\n    //  */\\r\\n    // function releaseLPTokens() public {\\r\\n    //     _liquidityLocker.releaseLPTokens(); \\r\\n    // }\\r\\n\\r\\n    /**\\r\\n     * @notice Transfers tokens held by Lock to owner.\\r\\n     */\\r\\n    function releaseTeamTokens() public {\\r\\n        _teamTokensLocker.release();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Transfers ETH back to the owner\\r\\n     */\\r\\n    function releaseCoinVaultETH() public {\\r\\n        _purchasedCoinVestingVault.claimVestedCoins();\\r\\n    }\\r\\n\\r\\n    function raisedFundsVaultAddress() public view returns (address) {\\r\\n        return address(_purchasedCoinVestingVault);\\r\\n    }\\r\\n\\r\\n    function raisedFundsPercent() public view returns (uint) {\\r\\n        return _raisedFundVestingDetails[0];\\r\\n    }\\r\\n\\r\\n    function tokenLockerAddress() public view returns (address) {\\r\\n        return address(_teamTokensLocker);\\r\\n    }\\r\\n\\r\\n    // function liquidityLockerAddress() public view returns (address) {\\r\\n    //     return address(_liquidityLocker);\\r\\n    // }\\r\\n}\",\"keccak256\":\"0xbcd40917a9f92ce39d494cd7cf187e2b430d7602b806e1df6645b7c9e69a8c1e\",\"license\":\"MIT\"},\"contracts/Lockers/DexLockerFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.28;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/proxy/Clones.sol\\\";\\r\\nimport {DexLocker} from \\\"./DexLocker.sol\\\";\\r\\nimport \\\"../Errors.sol\\\";\\r\\n\\r\\n\\r\\n/// @title DexLockerFactory\\r\\n/// @notice Factory contract for creating DexLocker instances using Clones - Used to avoid contract size becoming too large\\r\\ncontract DexLockerFactory {\\r\\n    /// @notice Address of the DexLocker implementation contract\\r\\n    address   _dexLockerImplementationAddress;\\r\\n    address  _coinVaultImplementationAddress;\\r\\n\\r\\n    \\r\\n\\r\\n    constructor(address  dexLockerImplementationAddress,address  coinVaultImplementationAddress){\\r\\n        _dexLockerImplementationAddress=dexLockerImplementationAddress;\\r\\n        _coinVaultImplementationAddress=coinVaultImplementationAddress;\\r\\n    }\\r\\n    \\r\\n\\r\\n    /// @notice Creates a new DexLocker instance\\r\\n    /// @param dexRouterAddress Address of the DEX router\\r\\n    /// @param salesTokenAddress Address of the sales token\\r\\n    /// @param purchaseTokenAddress Address of the purchase token\\r\\n    /// @param deployer Address of the deployer\\r\\n    /// @param owner Address of the locker owner\\r\\n    /// @return Address of the newly created DexLocker instance\\r\\n    function createDexLocker(address dexRouterAddress, address salesTokenAddress, address purchaseTokenAddress,address deployer,address owner)  public returns(address) {\\r\\n        require(dexRouterAddress != address(0), InvalidDexRouterAddress(dexRouterAddress));\\r\\n        require(salesTokenAddress != address(0), InvalidSalesTokenAddress(salesTokenAddress));\\r\\n        // require(purchaseTokenAddress != address(0), InvalidPurchaseTokenAddress(purchaseTokenAddress));\\r\\n        require(deployer != address(0), InvalidDeployerAddress(deployer));\\r\\n        require(owner != address(0), InvalidOwnerAddress(owner));\\r\\n\\r\\n        address payable newCloneAddress = payable(Clones.clone(_dexLockerImplementationAddress ) );\\r\\n        DexLocker(newCloneAddress).initialize(salesTokenAddress,purchaseTokenAddress, deployer, owner,_coinVaultImplementationAddress);\\r\\n\\r\\n        return  newCloneAddress;\\r\\n    }\\r\\n}\",\"keccak256\":\"0x54fa316bade5dd498188710ecbe965dca3f5fddcbc6ae26669cdf5a61efb6414\",\"license\":\"MIT\"},\"contracts/Lockers/PurchasedCoinVestingVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.26;\\r\\n\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\r\\n\\r\\n\\r\\n\\r\\nerror MustBeLessThanYears(string info,uint noOfYears);\\r\\nerror DurationLessThanCliff();\\r\\nerror DailyVestedAmountLessThanZero();\\r\\nerror OnlyOwner();\\r\\nerror AmountVestedLessThanZero();\\r\\n/**\\r\\n* Locks liquidity for Purchased Coins in a vested style. using Cliffs\\r\\n* @dev \\r\\n*/\\r\\ncontract PurchasedCoinVestingVault is Initializable, ReentrancyGuard  {\\r\\n    using SafeERC20 for IERC20;\\r\\n\\r\\n    uint256 constant public SECONDS_PER_DAY = 86400;\\r\\n\\r\\n    struct Grant {\\r\\n        uint256 startTime;\\r\\n        uint256 amount;\\r\\n        uint256 vestingDuration;\\r\\n        uint256 vestingCliff;\\r\\n        uint256 daysClaimed;\\r\\n        uint256 totalClaimed;\\r\\n    }\\r\\n    address private _owner;\\r\\n    address public _deployer;\\r\\n\\r\\n    address private _coinOrTokenAddress;\\r\\n    \\r\\n    event GrantTokensClaimed(address indexed recipient, uint256 amountClaimed);\\r\\n    \\r\\n    \\r\\n    Grant public grant;\\r\\n\\r\\n    ///Do not leave an implementation contract uninitialized. An uninitialized implementation contract can be taken over by an attacker, which may impact the proxy. \\r\\n    /// To prevent the implementation contract from being used, you should invoke the _disableInitializers function in the constructor to automatically lock it when it is deployed\\r\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\r\\n    constructor() {\\r\\n        _disableInitializers();\\r\\n    }\\r\\n    \\r\\n\\r\\n    function initialize(address vaultOwner, \\r\\n        uint256 _startTime,\\r\\n        uint256 _amount,\\r\\n        uint256 _vestingDurationInDays,\\r\\n        uint256 _vestingCliffInDays,\\r\\n        address coinOrTokenAddress) public initializer {\\r\\n\\r\\n        _deployer=msg.sender;\\r\\n        _owner=vaultOwner;\\r\\n        _coinOrTokenAddress=coinOrTokenAddress;\\r\\n        require(_vestingCliffInDays <= 10*365, MustBeLessThanYears('Cliff',10) );\\r\\n        require(_vestingDurationInDays <= 25*365, MustBeLessThanYears('Duration',25));\\r\\n        require(_vestingDurationInDays >= _vestingCliffInDays, DurationLessThanCliff());\\r\\n        \\r\\n        uint256 amountVestedPerDay = ((_amount * 100000000)/_vestingDurationInDays)/100000000;\\r\\n        require(amountVestedPerDay > 0, DailyVestedAmountLessThanZero());\\r\\n\\r\\n        // Transfer the grant tokens under the control of the vesting contract\\r\\n        // require(token.transferFrom(owner(), address(this), _amount), \\\"transfer failed\\\");\\r\\n\\r\\n        grant = Grant({\\r\\n            startTime: _startTime == 0 ? currentTime() : _startTime,\\r\\n            amount: _amount,\\r\\n            vestingDuration: _vestingDurationInDays,\\r\\n            vestingCliff: _vestingCliffInDays,\\r\\n            daysClaimed: 0,\\r\\n            totalClaimed: 0\\r\\n        });\\r\\n        \\r\\n        \\r\\n    }\\r\\n\\r\\n    receive() external payable {\\r\\n\\r\\n    }\\r\\n    // or\\r\\n    function receiveTokens(uint256 amount) public payable {\\r\\n      IERC20(_coinOrTokenAddress).safeTransferFrom(msg.sender, address(this), amount);\\r\\n    }\\r\\n\\r\\n    function owner() public view returns (address) {\\r\\n        \\r\\n        return _owner;\\r\\n\\r\\n    }\\r\\n\\r\\n    function transferOwnership(address newOwner) public  {\\r\\n        \\r\\n        require(msg.sender== _owner, OnlyOwner());\\r\\n        _owner=newOwner;\\r\\n\\r\\n    }\\r\\n    \\r\\n\\r\\n    /// @notice Calculate the vested and unclaimed months and tokens available for `_grantId` to claim\\r\\n    /// Due to rounding errors once grant duration is reached, returns the entire left grant amount\\r\\n    /// Returns (0, 0) if cliff has not been reached\\r\\n    function calculateGrantClaim() public view returns (uint256, uint256) {\\r\\n        \\r\\n\\r\\n        // For grants created with a future start date, that hasn't been reached, return 0, 0\\r\\n        if (currentTime() < grant.startTime) {\\r\\n            return (0, 0);\\r\\n        }\\r\\n\\r\\n        // Check cliff was reached\\r\\n        uint elapsedTime = currentTime()-grant.startTime;\\r\\n        uint elapsedDays = elapsedTime/SECONDS_PER_DAY;\\r\\n        \\r\\n        if (elapsedDays < grant.vestingCliff) {\\r\\n            return (elapsedDays, 0);\\r\\n        }\\r\\n\\r\\n        // If over vesting duration, all tokens vested\\r\\n        if (elapsedDays >= grant.vestingDuration) {\\r\\n            uint256 remainingGrant = grant.amount-grant.totalClaimed;\\r\\n            return (grant.vestingDuration, remainingGrant);\\r\\n        } else {\\r\\n            uint256 daysVested = elapsedDays-grant.daysClaimed;\\r\\n            uint256 amountVestedPerDay = grant.amount/ grant.vestingDuration;\\r\\n            uint256 amountVested = daysVested*amountVestedPerDay;\\r\\n            return (daysVested, amountVested);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice Allows a grant recipient to claim their vested tokens. Errors if no tokens have vested\\r\\n    /// It is advised recipients check they are entitled to claim via `calculateGrantClaim` before calling this\\r\\n    function claimVestedCoins() external nonReentrant {\\r\\n        uint256 daysVested;\\r\\n        uint256 amountVested;\\r\\n        address recipient=owner();\\r\\n\\r\\n        (daysVested, amountVested) = calculateGrantClaim();\\r\\n        require(amountVested > 0, AmountVestedLessThanZero());\\r\\n\\r\\n        \\r\\n        grant.daysClaimed = grant.daysClaimed+ daysVested;\\r\\n        grant.totalClaimed = grant.totalClaimed + amountVested;\\r\\n        \\r\\n        // token.safeTransfer(recipient, amountVested);\\r\\n        if(_coinOrTokenAddress==address(0)){\\r\\n            payable(recipient).transfer(amountVested);\\r\\n        }else{            \\r\\n            IERC20(_coinOrTokenAddress).safeTransfer(recipient, amountVested); \\r\\n        }\\r\\n        \\r\\n        emit GrantTokensClaimed(recipient, amountVested);\\r\\n    }\\r\\n\\r\\n    function currentTime() private view returns(uint256) {\\r\\n        return block.timestamp;\\r\\n    }\\r\\n\\r\\n    function tokensVestedPerDay() public view returns(uint256) {\\r\\n        \\r\\n        return grant.amount/ grant.vestingDuration;\\r\\n    }\\r\\n\\r\\n    \\r\\n\\r\\n}\",\"keccak256\":\"0xc7759e8d748cd8f681cfac91ded7075108ff7878b40812081317adf9265320ef\",\"license\":\"MIT\"},\"contracts/Lockers/TokenLocker.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.28;\\r\\n\\r\\n\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\r\\nimport \\\"./VestSchedule.sol\\\";\\r\\n\\r\\n\\r\\n/**\\r\\n* Locks ERC20 Tokens in a vested style.\\r\\n* @dev Percentages are specified normally, e.g. 50% is 50\\r\\n*/\\r\\ncontract TokenLocker is ReentrancyGuard{\\r\\n    error InvalidPercent();\\r\\n    error NotEnoughTokens();\\r\\n    error WrongToken();\\r\\n\\r\\n    using SafeERC20 for IERC20;\\r\\n    // using SafeMath for uint256;\\r\\n    \\r\\n\\r\\n   \\r\\n    address private _owner;\\r\\n\\r\\n    address private _deployer;    \\r\\n\\r\\n    address private _token;\\r\\n    \\r\\n\\r\\n    uint _cycles ;\\r\\n\\r\\n    event TokenReleased(address indexed token, uint256 amount);\\r\\n    \\r\\n    VestSchedule[] public tokenVestSchedule ;\\r\\n\\r\\n    constructor( address tokenAddress, address owner, \\r\\n        uint totalTokens, uint firstReleasePercent, uint firstReleaseDays, uint subsequentReleasePercent, uint subsequentReleaseDays) {\\r\\n\\r\\n        // require(schedule.length <= 8, \\\"TokenLocker: Vesting cannot have more than 8 schedules\\\");\\r\\n        \\r\\n     \\r\\n        require(firstReleasePercent + subsequentReleasePercent <= 100, InvalidPercent());\\r\\n\\r\\n        _deployer = msg.sender;\\r\\n        \\r\\n        _owner = owner;\\r\\n        _token = tokenAddress;\\r\\n\\r\\n        // 50, 25\\r\\n        //30, 30\\r\\n        // 30, 35\\r\\n        uint subsequentCycles = subsequentReleasePercent==0?0: (100 -  firstReleasePercent)/ subsequentReleasePercent; \\r\\n        bool hasExtraCycle = 100 -  firstReleasePercent  - (subsequentCycles * subsequentReleasePercent) > 0; \\r\\n        uint cycles = 1 +  subsequentCycles + ( hasExtraCycle? 1: 0 );\\r\\n\\r\\n        _cycles = cycles;\\r\\n\\r\\n        // tokenVestSchedule = new VestSchedule[](cycles);\\r\\n\\r\\n        // tokenVestSchedule[0] = VestSchedule({\\r\\n        //     releaseDate: block.timestamp + (firstReleaseDays * 1 days),\\r\\n        //     releaseAmount: firstReleasePercent * totalTokens * 10000/1000000,\\r\\n        //     hasBeenClaimed: false\\r\\n        // });\\r\\n\\r\\n\\r\\n        // for (uint i=0; i < subsequentCycles ; i++) {\\r\\n        //     //first index is firstRelease\\r\\n        //     tokenVestSchedule[i+1] = VestSchedule({\\r\\n        //         releaseDate: tokenVestSchedule[0].releaseDate + ((i+1) * subsequentReleaseDays * 1 days),\\r\\n        //         releaseAmount: subsequentReleasePercent * totalTokens * 10000/1000000,\\r\\n        //         hasBeenClaimed: false\\r\\n        //     });\\r\\n        // }\\r\\n\\r\\n        // //any extra \\r\\n        // if(hasExtraCycle){\\r\\n        //     // extra cycle will account for frist cycle and the subsequentscyels hence s + 1\\r\\n        //     tokenVestSchedule[subsequentCycles + 1] = VestSchedule({\\r\\n        //         releaseDate: tokenVestSchedule[subsequentCycles].releaseDate + ( subsequentReleaseDays * 1 days), // add days to last vesting day\\r\\n        //         releaseAmount: (100 -  firstReleasePercent  - (subsequentCycles * subsequentReleasePercent)) * totalTokens * 10000/1000000,\\r\\n        //         hasBeenClaimed: false\\r\\n        //     });\\r\\n        // }\\r\\n\\r\\n\\r\\n        \\r\\n\\r\\n        tokenVestSchedule.push( VestSchedule({\\r\\n            releaseDate: block.timestamp + (firstReleaseDays * 1 days),\\r\\n            releaseAmount: firstReleasePercent * totalTokens * 10000/1000000,\\r\\n            hasBeenClaimed: false\\r\\n        }) );\\r\\n\\r\\n\\r\\n        for (uint i=0; i < subsequentCycles ; i++) {\\r\\n            //first index is firstRelease\\r\\n            tokenVestSchedule.push( VestSchedule({\\r\\n                releaseDate: tokenVestSchedule[0].releaseDate + ((i+1) * subsequentReleaseDays * 1 days),\\r\\n                releaseAmount: subsequentReleasePercent * totalTokens * 10000/1000000,\\r\\n                hasBeenClaimed: false\\r\\n            }) );\\r\\n        }\\r\\n\\r\\n        //any extra \\r\\n        if(hasExtraCycle){\\r\\n            // extra cycle will account for frist cycle and the subsequentscyels hence s + 1\\r\\n            tokenVestSchedule.push( VestSchedule({\\r\\n                releaseDate: tokenVestSchedule[subsequentCycles].releaseDate + ( subsequentReleaseDays * 1 days), // add days to last vesting day\\r\\n                releaseAmount: (100 -  firstReleasePercent  - (subsequentCycles * subsequentReleasePercent)) * totalTokens * 10000/1000000,\\r\\n                hasBeenClaimed: false\\r\\n            }) );\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @return the owner of the locked funds\\r\\n     */\\r\\n    function getOwner() public view returns (address) {\\r\\n        return _owner;\\r\\n    }\\r\\n\\r\\n    function getVestingCycle() public view returns (VestSchedule[] memory schedule) {\\r\\n\\r\\n        schedule = new VestSchedule[](_cycles);\\r\\n\\r\\n        for (uint i=0; i < _cycles ; i++) {\\r\\n            \\r\\n            schedule[i]= tokenVestSchedule[i];\\r\\n        }\\r\\n        return schedule;\\r\\n    }\\r\\n    \\r\\n    \\r\\n    /**\\r\\n     * @notice Transfers tokens held by Lock to owner.\\r\\n       @dev Able to withdraw tokens after release time \\r\\n     */\\r\\n    function release() public nonReentrant {\\r\\n        uint256 amountToReleaseThisTime =0;\\r\\n        uint i;\\r\\n        for (i=0; i < _cycles; i++) { \\r\\n            if(block.timestamp >= tokenVestSchedule[i].releaseDate && !tokenVestSchedule[i].hasBeenClaimed ) {\\r\\n                amountToReleaseThisTime += tokenVestSchedule[i].releaseAmount;\\r\\n                tokenVestSchedule[i].hasBeenClaimed = true;\\r\\n            }            \\r\\n        }\\r\\n        \\r\\n        uint256 balance = IERC20(_token).balanceOf(address(this));\\r\\n        //require(balance > 0, \\\"TokenLocker: no tokens to release\\\");\\r\\n        require(balance >= amountToReleaseThisTime, NotEnoughTokens());\\r\\n\\r\\n        IERC20(_token).safeTransfer(_owner, amountToReleaseThisTime);\\r\\n\\r\\n        emit TokenReleased(_token, amountToReleaseThisTime); \\r\\n    }\\r\\n\\r\\n\\r\\n    /**\\r\\n     * @notice Transfers any ETH back to the owner, ETH is not locked\\r\\n       @dev Function used to transfer eth mistakenly sent here\\r\\n     */\\r\\n    function withdrawETH() public {\\r\\n        require(address(this).balance > 0, \\\"TokenLocker: no Eth to release\\\");\\r\\n\\r\\n        payable(getOwner()).transfer(address(this).balance);\\r\\n    }\\r\\n\\r\\n\\r\\n    /**\\r\\n     * @notice Transfers any unrecognised token back to the owner, \\r\\n       @dev Function used to transfer Tokens mistakenly sent here\\r\\n     */\\r\\n    function withdrawToken(address tokenToSend) public {\\r\\n        require(_token!=tokenToSend, WrongToken());\\r\\n        require(IERC20(tokenToSend).balanceOf(address(this)) > 0, NotEnoughTokens());\\r\\n\\r\\n        IERC20(tokenToSend).safeTransfer(getOwner(), IERC20(tokenToSend).balanceOf(address(this))); \\r\\n        \\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Getter for the amount of releasable token tokens. token should be the address of an IERC20 contract.\\r\\n     */\\r\\n    function released() public view returns (uint ){\\r\\n        uint256 amount=0;\\r\\n        uint i;\\r\\n        for (i=0; i < _cycles; i++) { \\r\\n            if(tokenVestSchedule[i].hasBeenClaimed ) {\\r\\n                amount += tokenVestSchedule[i].releaseAmount;\\r\\n            }            \\r\\n        }\\r\\n        return amount;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Getter for the amount of releasable token tokens. token should be the address of an IERC20 contract.\\r\\n     */\\r\\n    function releasable() public view returns (uint ){\\r\\n        uint256 amount=0;\\r\\n        uint i;\\r\\n        for (i=0; i < _cycles; i++) { \\r\\n            if( block.timestamp >= tokenVestSchedule[i].releaseDate && !tokenVestSchedule[i].hasBeenClaimed) {\\r\\n                amount += tokenVestSchedule[i].releaseAmount;\\r\\n            }            \\r\\n        }\\r\\n        return amount;\\r\\n    }\\r\\n}\",\"keccak256\":\"0x92ad4017ca8c6571c17ec816d2b74433286652ad4265b4823ab2dd6e9cc927b0\",\"license\":\"MIT\"},\"contracts/Lockers/VestSchedule.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.17;\\r\\n\\r\\nstruct VestSchedule{\\r\\n    uint256 releaseDate;\\r\\n    uint256 releaseAmount;\\r\\n    bool hasBeenClaimed;\\r\\n}\",\"keccak256\":\"0x06c6db179d20099223cbf801609ab1728c112ec95616ff04b8e2276d209f85cb\",\"license\":\"MIT\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.22 <0.9.0;\\n\\nlibrary console {\\n    address constant CONSOLE_ADDRESS =\\n        0x000000000000000000636F6e736F6c652e6c6f67;\\n\\n    function _sendLogPayloadImplementation(bytes memory payload) internal view {\\n        address consoleAddress = CONSOLE_ADDRESS;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            pop(\\n                staticcall(\\n                    gas(),\\n                    consoleAddress,\\n                    add(payload, 32),\\n                    mload(payload),\\n                    0,\\n                    0\\n                )\\n            )\\n        }\\n    }\\n\\n    function _castToPure(\\n      function(bytes memory) internal view fnIn\\n    ) internal pure returns (function(bytes memory) pure fnOut) {\\n        assembly {\\n            fnOut := fnIn\\n        }\\n    }\\n\\n    function _sendLogPayload(bytes memory payload) internal pure {\\n        _castToPure(_sendLogPayloadImplementation)(payload);\\n    }\\n\\n    function log() internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n    }\\n    function logInt(int256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(int256)\\\", p0));\\n    }\\n\\n    function logUint(uint256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n    }\\n\\n    function logString(string memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n    }\\n\\n    function logBool(bool p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n    }\\n\\n    function logAddress(address p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n    }\\n\\n    function logBytes(bytes memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n    }\\n\\n    function logBytes1(bytes1 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n    }\\n\\n    function logBytes2(bytes2 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n    }\\n\\n    function logBytes3(bytes3 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n    }\\n\\n    function logBytes4(bytes4 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n    }\\n\\n    function logBytes5(bytes5 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n    }\\n\\n    function logBytes6(bytes6 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n    }\\n\\n    function logBytes7(bytes7 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n    }\\n\\n    function logBytes8(bytes8 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n    }\\n\\n    function logBytes9(bytes9 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n    }\\n\\n    function logBytes10(bytes10 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n    }\\n\\n    function logBytes11(bytes11 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n    }\\n\\n    function logBytes12(bytes12 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n    }\\n\\n    function logBytes13(bytes13 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n    }\\n\\n    function logBytes14(bytes14 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n    }\\n\\n    function logBytes15(bytes15 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n    }\\n\\n    function logBytes16(bytes16 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n    }\\n\\n    function logBytes17(bytes17 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n    }\\n\\n    function logBytes18(bytes18 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n    }\\n\\n    function logBytes19(bytes19 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n    }\\n\\n    function logBytes20(bytes20 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n    }\\n\\n    function logBytes21(bytes21 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n    }\\n\\n    function logBytes22(bytes22 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n    }\\n\\n    function logBytes23(bytes23 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n    }\\n\\n    function logBytes24(bytes24 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n    }\\n\\n    function logBytes25(bytes25 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n    }\\n\\n    function logBytes26(bytes26 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n    }\\n\\n    function logBytes27(bytes27 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n    }\\n\\n    function logBytes28(bytes28 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n    }\\n\\n    function logBytes29(bytes29 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n    }\\n\\n    function logBytes30(bytes30 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n    }\\n\\n    function logBytes31(bytes31 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n    }\\n\\n    function logBytes32(bytes32 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n    }\\n\\n    function log(uint256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n    }\\n\\n    function log(string memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n    }\\n\\n    function log(bool p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n    }\\n\\n    function log(address p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n    }\\n\\n    function log(uint256 p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n}\\n\",\"keccak256\":\"0x7434453e6d3b7d0e5d0eb7846ffdbc27f0ccf3b163591263739b628074dc103a\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080806040523461016d5733156101575760008054336001600160a01b0319821681178355916001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09080a360018055600060035560ff196006541660065560018060a01b0319601d5416601d556002602755600360285560ff19602954166029557ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a005460ff8160401c16610146576002600160401b03196001600160401b038216016100e0575b604051615eb690816101738239f35b6001600160401b0319166001600160401b039081177ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a005581527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d290602090a138806100d1565b63f92ee8a960e01b60005260046000fd5b631e4fbdf760e01b600052600060045260246000fd5b600080fdfe610320604052600436101561001357600080fd5b60006080526080513560e01c80630bf75580146141815780630caf5f1a14612d2357806311493b0114612cff5780631954e48214612ce05780631fe9c37514612cc1578063200d2ed214612c9657806324600fc3146129f75780632884add8146129d05780632a454f08146129b1578063325af0f51461299257806336140c50146129735780633de419fb1461293757806340af8dd71461291357806340c397da146128e857806346c00c33146128b957806348c447121461286d5780634aac3dac146128455780634bcd137e1461282657806351cb1876146127ed5780635e906079146127b157806360a5b604146126e857806360fa3892146126935780636b04fa541461267157806370a566e214612652578063715018a6146125f357806371b9510d146125b75780637b94a403146125905780637ff0011a14612526578063843f259d146125075780638da5cb5b146124de5780638e3695b81461203d5780638f28397014611fbf578063909a40b614611f6d57806394722d4214611f20578063980e784414611ebd5780639d76ea5814611e95578063a16ee9dc14611e76578063a26dbf2614611e57578063b135648814611e38578063b65215b814611e10578063bb05c30e14611d73578063bc5ee23814611d54578063bc89ff2b14611d15578063bde3386214611ced578063bf0a07bd14611cce578063cb3416e314611ca1578063cbbc15eb14611c79578063cc4decef14611c5a578063cc86c3e514611be0578063ccbccbe514611942578063cf00881414611916578063d510f932146118f7578063d6290cd71461183f578063d8ee4c3614610db8578063d99f867414610d94578063e7f67fb114610d6c578063eb7e7f2c14610d4d578063eccc215514610ce7578063f2fde38b14610c76578063f5a1e7af14610406578063f71579e0146103d1578063f77656a6146103b2578063f89fd0341461034f578063fd256ee1146103305763fe36f6c9146102ee57600080fd5b3461032a57602060031936011261032a576001600160a01b0361030f6141a4565b16608051526035602052602060406080512054604051908152f35b60805180fd5b3461032a5760805160031936011261032a576020601b54604051908152f35b3461032a5760805160031936011261032a576001600160a01b03602654163303610386576080516006805460ff1916600117905580f35b7f30cd747100000000000000000000000000000000000000000000000000000000608051526004608051fd5b3461032a5760805160031936011261032a576020603354604051908152f35b3461032a5760805160031936011261032a576104026103ee614335565b6040519182916020835260208301906143ee565b0390f35b604060031936011261032a5760043567ffffffffffffffff811161032a573660238201121561032a57806004013567ffffffffffffffff811161032a573660248260051b8401011161032a576024359161045e615cfd565b601d546001600160a01b031680610bfc575034915b60ff60065416600581101580610baa57600282148015610bee575b610bc257610baa57600103610b7e57601954600b549081811015610b5257600d544211610b2657846104bf916146c7565b11610afa57602e548310610ace57600c54428111610674575060ff60025416610624575b50506104f181601c546146c7565b602c54106105f8573360805152603660205261051381604060805120546146c7565b603154106105cc577f7e71433ddf847725166244795048ecf3e3f9f35628254ecbf736056664233493916105956105be923360805152603660205260406080512061055f8282546146c7565b90553360805152603760205260406080512061057c8282546146c7565b905561058a816019546146c7565b601955601c546146c7565b601c556105a3601e5461599f565b601e5560408051338152602081019290925290918291820190565b0390a15b6001805560805180f35b7f92bf02be00000000000000000000000000000000000000000000000000000000608051526004608051fd5b7fcea1f8fa00000000000000000000000000000000000000000000000000000000608051526004608051fd5b61063761063c92339260243692016142af565b614615565b156106485782806104e3565b7ff016682300000000000000000000000000000000000000000000000000000000608051526004608051fd5b9150506001600160a01b0360265416906040517f6727269a0000000000000000000000000000000000000000000000000000000081526080516004820152602081602481865afa908115610a775760805191610aaf575b5080610a84575b156108315750506106e233615764565b15610805576106f381601a546146c7565b602a54106107d9573360805152603460205261071581604060805120546146c7565b602f54106107ad577f7e71433ddf847725166244795048ecf3e3f9f35628254ecbf736056664233493916107976107a592336080515260346020526040608051206107618282546146c7565b90553360805152603760205260406080512061077e8282546146c7565b905561078c816019546146c7565b601955601a546146c7565b601a556105a3601e5461599f565b0390a16105c2565b7f255be30700000000000000000000000000000000000000000000000000000000608051526004608051fd5b7f622f8eac00000000000000000000000000000000000000000000000000000000608051526004608051fd5b7f4572233200000000000000000000000000000000000000000000000000000000608051526004608051fd5b6020602492604051938480927f6727269a000000000000000000000000000000000000000000000000000000008252600160048301525afa918215610a775760805192610a46575b5081610a02575b50156109d65761088f3361442f565b156109aa576108a081601b546146c7565b602b541061097e57336080515260356020526108c281604060805120546146c7565b60305410610952577f7e71433ddf847725166244795048ecf3e3f9f35628254ecbf736056664233493916109446107a5923360805152603560205260406080512061090e8282546146c7565b90553360805152603760205260406080512061092b8282546146c7565b9055610939816019546146c7565b601955601b546146c7565b601b556105a3601e5461599f565b7fa6b88d4300000000000000000000000000000000000000000000000000000000608051526004608051fd5b7f21f0cbe300000000000000000000000000000000000000000000000000000000608051526004608051fd5b7f47a0f6f600000000000000000000000000000000000000000000000000000000608051526004608051fd5b7f2d0a346e00000000000000000000000000000000000000000000000000000000608051526004608051fd5b9050602754610e10810290808204610e101490151715610a2e57610a25916144d6565b42101583610880565b634e487b7160e01b6080515260116004526024608051fd5b610a6991925060203d602011610a70575b610a618183614202565b8101906146af565b9084610879565b503d610a57565b6040513d608051823e3d90fd5b50602854610e10810290808204610e101490151715610a2e57610aa790826144d6565b4210156106d2565b610ac8915060203d602011610a7057610a618183614202565b856106cb565b7f1b34a19900000000000000000000000000000000000000000000000000000000608051526004608051fd5b7f9b57854300000000000000000000000000000000000000000000000000000000608051526004608051fd5b7fc5b0816400000000000000000000000000000000000000000000000000000000608051526004608051fd5b7f7f6df6bb00000000000000000000000000000000000000000000000000000000608051526004608051fd5b7f25de07a700000000000000000000000000000000000000000000000000000000608051526004608051fd5b634e487b7160e01b6080515260216004526024608051fd5b7f894d929f00000000000000000000000000000000000000000000000000000000608051526004608051fd5b50506080516003821461048e565b91603b5460120360128111610a2e57610c20610c1a610c71926144e3565b866144ad565b93604051907f23b872dd00000000000000000000000000000000000000000000000000000000602083015233602483015230604483015286606483015260648252610c6c608483614202565b615d68565b610473565b3461032a57602060031936011261032a57610c8f6141a4565b610c97615a72565b6001600160a01b03811615610cb557610caf906159ae565b60805180f35b7f1e4fbdf700000000000000000000000000000000000000000000000000000000608051526080516004526024608051fd5b3461032a5760805160031936011261032a576001600160a01b03601f54163303610d215760206001600160a01b0360395416604051908152f35b7f7bfa4b9f00000000000000000000000000000000000000000000000000000000608051526004608051fd5b3461032a5760805160031936011261032a576020601c54604051908152f35b3461032a5760805160031936011261032a5760206001600160a01b0360185416604051908152f35b3461032a5760805160031936011261032a57602060ff600254166040519015158152f35b3461032a5760c060031936011261032a5760043567ffffffffffffffff811161032a57610de9903690600401614250565b60243567ffffffffffffffff811161032a57610e09903690600401614250565b9060443567ffffffffffffffff811161032a57610e2a903690600401614250565b9160643567ffffffffffffffff811161032a57610e4b903690600401614250565b9160843567ffffffffffffffff811161032a57610e6c903690600401614250565b9160a43567ffffffffffffffff811161032a57610e8d903690600401614250565b91610e96615a72565b600c5442116118135780519067ffffffffffffffff82116111d9578190610ebe6011546142fb565b601f8111611764575b506020906001601f8411146116dd57608051926116d2575b50506000198260011b9260031b1c1916176011555b80519067ffffffffffffffff82116111d9578190610f136012546142fb565b601f8111611623575b506020906001601f84111461159c5760805192611591575b50506000198260011b9260031b1c1916176012555b835167ffffffffffffffff81116111d957610f656013546142fb565b601f81116114ec575b506020946001601f831114611466579481929394956080519261145b575b50506000198260011b9260031b1c1916176013555b825167ffffffffffffffff81116111d957610fbd6014546142fb565b601f81116113b6575b5060206001601f831114611330578192939460805192611325575b50506000198260011b9260031b1c1916176014555b815167ffffffffffffffff81116111d9576110126015546142fb565b601f8111611280575b506020926001601f8311146111fc5792819293608051926111f1575b50506000198260011b9260031b1c1916176015555b805167ffffffffffffffff81116111d9576110686016546142fb565b601f8111611134575b506020916001601f8311146110b157918192608051926110a6575b50506000198260011b9260031b1c19161760165560805180f35b01519050828061108c565b601f198216926016608051527fd833147d7dc355ba459fc788f669e58cfaf9dc25ddcd0702e87d69c7b5124289916080515b85811061111c57508360019510611103575b505050811b01601655610caf565b015160001960f88460031b161c191690558280806110f5565b919260206001819286850151815501940192016110e3565b601660805152601f820160051c7fd833147d7dc355ba459fc788f669e58cfaf9dc25ddcd0702e87d69c7b51242890190602083106111b1575b601f0160051c7fd833147d7dc355ba459fc788f669e58cfaf9dc25ddcd0702e87d69c7b512428901905b8181106111a45750611071565b6080518155600101611197565b7fd833147d7dc355ba459fc788f669e58cfaf9dc25ddcd0702e87d69c7b5124289915061116d565b634e487b7160e01b6080515260416004526024608051fd5b015190508380611037565b601f198216936015608051527f55f448fdea98c4d29eb340757ef0a66cd03dbb9538908a6a81d96026b71ec475916080515b868110611268575083600195961061124f575b505050811b0160155561104c565b015160001960f88460031b161c19169055838080611241565b9192602060018192868501518155019401920161122e565b601560805152601f820160051c7f55f448fdea98c4d29eb340757ef0a66cd03dbb9538908a6a81d96026b71ec4750190602083106112fd575b601f0160051c7f55f448fdea98c4d29eb340757ef0a66cd03dbb9538908a6a81d96026b71ec47501905b8181106112f0575061101b565b60805181556001016112e3565b7f55f448fdea98c4d29eb340757ef0a66cd03dbb9538908a6a81d96026b71ec47591506112b9565b015190508480610fe1565b601f198216906014608051527fce6d7b5282bd9a3661ae061feed1dbda4e52ab073b1f9285be6e155d9c38d4ec916080515b81811061139e57509583600195969710611385575b505050811b01601455610ff6565b015160001960f88460031b161c19169055848080611377565b9192602060018192868b015181550194019201611362565b601460805152601f820160051c7fce6d7b5282bd9a3661ae061feed1dbda4e52ab073b1f9285be6e155d9c38d4ec019060208310611433575b601f0160051c7fce6d7b5282bd9a3661ae061feed1dbda4e52ab073b1f9285be6e155d9c38d4ec01905b8181106114265750610fc6565b6080518155600101611419565b7fce6d7b5282bd9a3661ae061feed1dbda4e52ab073b1f9285be6e155d9c38d4ec91506113ef565b015190508580610f8c565b601f198216956013608051527f66de8ffda797e3de9c05e8fc57b3bf0ec28a930d40b0d285d93c06501cf6a090916080515b8881106114d4575083600195969798106114bb575b505050811b01601355610fa1565b015160001960f88460031b161c191690558580806114ad565b91926020600181928685015181550194019201611498565b601360805152601f820160051c7f66de8ffda797e3de9c05e8fc57b3bf0ec28a930d40b0d285d93c06501cf6a090019060208310611569575b601f0160051c7f66de8ffda797e3de9c05e8fc57b3bf0ec28a930d40b0d285d93c06501cf6a09001905b81811061155c5750610f6e565b608051815560010161154f565b7f66de8ffda797e3de9c05e8fc57b3bf0ec28a930d40b0d285d93c06501cf6a0909150611525565b015190508680610f34565b91601f1916916012608051527fbb8a6a4669ba250d26cd7a459eca9d215f8307e33aebe50379bc5a3617ec3444926080515b81811061160b57509084600195949392106115f2575b505050811b01601255610f49565b015160001960f88460031b161c191690558680806115e4565b929360206001819287860151815501950193016115ce565b909150601260805152601f830160051c7fbb8a6a4669ba250d26cd7a459eca9d215f8307e33aebe50379bc5a3617ec34440190602084106116aa575b90601f8493920160051c7fbb8a6a4669ba250d26cd7a459eca9d215f8307e33aebe50379bc5a3617ec344401905b81811061169a5750610f1c565b608051815584935060010161168d565b7fbb8a6a4669ba250d26cd7a459eca9d215f8307e33aebe50379bc5a3617ec3444915061165f565b015190508780610edf565b91601f1916916011608051527f31ecc21a745e3968a04e9570e4425bc18fa8019c68028196b546d1669c200c68926080515b81811061174c5750908460019594939210611733575b505050811b01601155610ef4565b015160001960f88460031b161c19169055878080611725565b9293602060018192878601518155019501930161170f565b909150601160805152601f830160051c7f31ecc21a745e3968a04e9570e4425bc18fa8019c68028196b546d1669c200c680190602084106117eb575b90601f8493920160051c7f31ecc21a745e3968a04e9570e4425bc18fa8019c68028196b546d1669c200c6801905b8181106117db5750610ec7565b60805181558493506001016117ce565b7f31ecc21a745e3968a04e9570e4425bc18fa8019c68028196b546d1669c200c6891506117a0565b7f994df61800000000000000000000000000000000000000000000000000000000608051526004608051fd5b3461032a5760805160031936011261032a57600a54600b5490600c54600d54600f54601054600e5460085460195491601e54936002549560045460ff1697611885614335565b996040519c8d9c8d5260208d015260408c015260608b015260808a015260a089015260c088015260e087015261010086015261012085015260ff8116151561014085015260081c60ff16151561016084015215156101808301526101a082016101c090526101c08201610402916143ee565b3461032a5760805160031936011261032a576020602e54604051908152f35b3461032a5760805160031936011261032a57611930615a72565b60ff1960025416600255608051608051f35b3461032a5760805160031936011261032a5761195c615a72565b60ff6006541660058110159081610baa5760038114159182611bd0575b82611bbe575b5050611b9257600d544210611b665760ff60295416611b3a57601954600a5411611b23575b6001600160a01b036009541660ff60065416600581101580610baa57600382148015611b15575b15611a805750506040516370a0823160e01b8152306004820152602081602481855afa908115610a775760805191611a49575b508015611a1d57610caf91600160ff1960295416176029553390615a1d565b7fdf95788300000000000000000000000000000000000000000000000000000000608051526004608051fd5b90506020813d602011611a78575b81611a6460209383614202565b81010312611a735751826119fe565b600080fd5b3d9150611a57565b610baa57600414611a92575b50610caf565b6040516370a0823160e01b8152306004820152602081602481855afa908115610a775760805191611ae3575b508015611a1d57611add91600160ff1960295416176029553390615a1d565b80611a8c565b90506020813d602011611b0d575b81611afe60209383614202565b81010312611a73575182611abe565b3d9150611af1565b5050608051600282146119cb565b611b35600360ff196006541617600655565b6119a4565b7f63e9f2ee00000000000000000000000000000000000000000000000000000000608051526004608051fd5b7f42a941a200000000000000000000000000000000000000000000000000000000608051526004608051fd5b7feacd450a00000000000000000000000000000000000000000000000000000000608051526004608051fd5b909150610baa5760041415818061197f565b5060805160028214159250611979565b3461032a57602060031936011261032a57611bf9614225565b6001600160a01b03601f54163303610d2157600c54421015611c2e5760ff60ff19600454169115151617600455608051608051f35b7f2935b03400000000000000000000000000000000000000000000000000000000608051526004608051fd5b3461032a5760805160031936011261032a576020603054604051908152f35b3461032a5760805160031936011261032a5760206001600160a01b0360265416604051908152f35b3461032a57602060031936011261032a576020611cc4611cbf6141a4565b615764565b6040519015158152f35b3461032a5760805160031936011261032a576020600b54604051908152f35b3461032a5760805160031936011261032a5760206001600160a01b03601d5416604051908152f35b3461032a5760805160031936011261032a5760ff60045416611d35614335565b90610402604051928392151583526040602084015260408301906143ee565b3461032a5760805160031936011261032a576020601a54604051908152f35b3461032a57602060031936011261032a57611d8c614225565b6001600160a01b03601f54163303610d2157600c54421015611de4577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff61ff0060025492151560081b16911617600255608051608051f35b7f4ea6e6d200000000000000000000000000000000000000000000000000000000608051526004608051fd5b3461032a5760805160031936011261032a5760206001600160a01b0360395416604051908152f35b3461032a5760805160031936011261032a576020600d54604051908152f35b3461032a5760805160031936011261032a576020601e54604051908152f35b3461032a5760805160031936011261032a576020602a54604051908152f35b3461032a5760805160031936011261032a5760206001600160a01b0360095416604051908152f35b3461032a5760805160031936011261032a57611ed7615a72565b600c54421015611ef4576080516006805460ff1916600217905580f35b7fc0ac0a3f00000000000000000000000000000000000000000000000000000000608051526004608051fd5b3461032a57602060031936011261032a57611f396141a4565b6001600160a01b03601f54163303610d21576001600160a01b03166001600160a01b03196020541617602055608051608051f35b3461032a5760805160031936011261032a5760e0600f54601054600a54600b54602b5490602c549260315494604051968752602087015260408601526060850152608084015260a083015260c0820152f35b3461032a57602060031936011261032a57611fd86141a4565b601f546001600160a01b03811690338203610d2157813303610d21576001600160a01b036001600160a01b031993169283911617601f557f1747af0dff66eb7165b467825c51774199b063a569a06cdea4565bac5d1be8cf608051608051a360805180f35b3461032a5760805160031936011261032a576001600160a01b0360095416600a54600b54600c54600d54600e54600f54601054608051506040516080518160115491612088836142fb565b80835292600181169081156124bf5750600114612477575b6120ac92500382614202565b60805160405160125490939184906120c3836142fb565b80835292600181169081156124585750600114612410575b6120e792500384614202565b60805160405160135490959186906120fe836142fb565b80835292600181169081156123f157506001146123a9575b61212292500386614202565b6080516040516014549097918890612139836142fb565b808352926001811690811561238a5750600114612343575b61215d92500388614202565b6080516040516015549099918a90612174836142fb565b808352926001811690811561232457506001146122dd575b6121989250038a614202565b60805150604051998a6080516016546121b0816142fb565b80845290600181169081156122c15750600114612281575b50036121d4908c614202565b6017549b6040519e8f9e8f91825260208201526040015260608d015260808c015260a08b015260c08a015260e089015261010088016101e090526101e0880161221c916143ee565b87810361012089015261222e916143ee565b868103610140880152612240916143ee565b858103610160870152612252916143ee565b848103610180860152612264916143ee565b8381036101a0850152612276916143ee565b906101c08301520390f35b608080516016905251602081209092505b8183106122a65750508101602001386121c8565b80602092948385600194549201015201910190918d92612292565b6020935060ff1991501682840152151560051b820101386121c8565b509060156080515260206080512090608051915b8183106123095750509060206121989282010161218c565b80602092948385600194549201015201910190918b926122f1565b6020925061219894915060ff191682840152151560051b82010161218c565b509060146080515260206080512090608051915b81831061236f57505090602061215d92820101612151565b80602092948385600194549201015201910190918992612357565b6020925061215d94915060ff191682840152151560051b820101612151565b509060136080515260206080512090608051915b8183106123d557505090602061212292820101612116565b6020919350806001915483858c010152019101909187926123bd565b6020925061212294915060ff191682840152151560051b820101612116565b509060126080515260206080512090608051915b81831061243c5750509060206120e7928201016120db565b6020919350806001915483858a01015201910190918592612424565b602092506120e794915060ff191682840152151560051b8201016120db565b509060116080515260206080512090608051915b8183106124a35750509060206120ac928201016120a0565b602091935080600191548385880101520191019091839261248b565b602092506120ac94915060ff191682840152151560051b8201016120a0565b3461032a5760805160031936011261032a5760206001600160a01b036080515416604051908152f35b3461032a5760805160031936011261032a576020601054604051908152f35b3461032a57602060031936011261032a5761253f615a72565b600c5442101561256457600160ff196002541617600255600435603255608051608051f35b7fa5b23c1a00000000000000000000000000000000000000000000000000000000608051526004608051fd5b3461032a5760805160031936011261032a57602060ff60025460081c166040519015158152f35b3461032a57602060031936011261032a576001600160a01b036125d86141a4565b16608051526036602052602060406080512054604051908152f35b3461032a5760805160031936011261032a5761260d615a72565b60805180546001600160a01b0319811682556001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a360805180f35b3461032a5760805160031936011261032a576020602b54604051908152f35b3461032a5760805160031936011261032a5761268b615cfd565b6105c261470e565b3461032a57604060031936011261032a5760043567ffffffffffffffff811161032a573660238201121561032a57611cc46126da60209236906024816004013591016142af565b6126e26141ba565b90614615565b3461032a57604060031936011261032a57602435600435612707615a72565b600c548042101561278557811115612759578082111561272d57600c55600d5560805180f35b7f365a7f2c00000000000000000000000000000000000000000000000000000000608051526004608051fd5b7f6a7b851d00000000000000000000000000000000000000000000000000000000608051526004608051fd5b7f949a04db00000000000000000000000000000000000000000000000000000000608051526004608051fd5b3461032a57602060031936011261032a576001600160a01b036127d26141a4565b16608051526034602052602060406080512054604051908152f35b3461032a5760a060031936011261032a57612806615a72565b600c54421161181357610caf608435606435604435602435600435615acd565b3461032a5760805160031936011261032a576020600854604051908152f35b3461032a5760805160031936011261032a5760206001600160a01b0360075416604051908152f35b3461032a57606060031936011261032a576004356001600160a01b038116810361032a576128996141ba565b906001600160a01b03601f54163303610d2157610caf9160443591615a1d565b3461032a57602060031936011261032a576001600160a01b03601f54163303610d215760043560275560805180f35b3461032a5760805160031936011261032a5760206001600160a01b0360065460081c16604051908152f35b3461032a5760805160031936011261032a57602061292f614511565b604051908152f35b3461032a57602060031936011261032a576001600160a01b036129586141a4565b16608051526037602052602060406080512054604051908152f35b3461032a5760805160031936011261032a576020603154604051908152f35b3461032a5760805160031936011261032a576020602c54604051908152f35b3461032a5760805160031936011261032a576020600354604051908152f35b3461032a5760805160031936011261032a57602060ff602d5460081c166040519015158152f35b3461032a5760805160031936011261032a5760ff600654166005811015610baa57600403612c31576001600160a01b0360805154163314612c6a57600d54421080612c5d575b612c3157336080515260376020526040608051205415612c0557601954600a5411612bee575b3360805152603760205260406080512054336080515260376020526080516040608051205560ff600654166005811015610baa57600303612b7057601d546001600160a01b031680612b3f57506080518115612b36575b6080519081908190819085903390f115610a77575b603b546012039060128211610a2e57612b15612b2d91612b0f7fd7dee2702d63ad89917b6a4da9981c90c4d24f8c2bdfd64c604ecae57d8d0651946144e3565b906144f1565b60408051338152602081019290925290918291820190565b0390a160805180f35b506108fc612aba565b603b546012039060128211610a2e57612b63612b5d612b6b936144e3565b846144f1565b903390615a1d565b612acf565b600f54612b7c916144ad565b6001600160a01b0360095416603a546012039060128211610a2e57612b63612b5d612ba6936144e3565b603a546012039060128211610a2e57612b15612be691612b0f7f7084f5476618d8e60b11ef0d7d3f06914655adb8793e28ff7f018d4c76d505d5946144e3565b0390a1610caf565b612c00600360ff196006541617600655565b612a63565b7fbf2af91c00000000000000000000000000000000000000000000000000000000608051526004608051fd5b7ff037aafa00000000000000000000000000000000000000000000000000000000608051526004608051fd5b50601954600b5411612a3d565b7ff97cba9300000000000000000000000000000000000000000000000000000000608051526004608051fd5b3461032a5760805160031936011261032a5760ff600654166040516005821015610baa576020918152f35b3461032a5760805160031936011261032a576020602f54604051908152f35b3461032a5760805160031936011261032a576020601954604051908152f35b3461032a5760805160031936011261032a57602060ff602d54166040519015158152f35b61040060031936011261032a57366023121561032a576080610200819052604051610240819052612d549190614202565b610240513660841161032a576004905b60848210614161573660c3121561032a57612d8d600a60051b6040516102205261022051614202565b61022051366101e41161032a5760a4905b6101e48210614151576101e4356101e08190526001600160a01b038116900361032a5736610223121561032a57612de3600460051b6040516102605261026051614202565b61026051366102841161032a57610204905b610284821061414157366102a3121561032a57612e1f6005801b6040516102c0526102c051614202565b6102c051366103241161032a57610284905b61032482106141315736610343121561032a57612e5c600360051b6040516102805261028051614202565b61028051366103841161032a57610324905b610384821061412157366103a3121561032a57604061030081905280516102a0819052612e9b9190614202565b6102a051366103c41161032a57610384905b6103c48210614108576103c43567ffffffffffffffff811161032a573660238201121561032a57610300515190612ee560c083614202565b819060c481019036821161032a5780600401925b8284106140d857846103e4356001600160a01b038116810361032a577ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00546102e05267ffffffffffffffff6102e05116801590816140c4575b60011490816140ba575b1590816140b1575b50614085576102e0517fffffffffffffffffffffffffffffffffffffffffffffffff000000000000000081166001177ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a0055610300511c60ff161561402d575b6060610220510151610300516102205101511015614001576113ec610260515110613fcf576001600160a01b0360206102405101511690816001600160a01b03196026541617602655600360285560026027556103005151917f44dc44ac000000000000000000000000000000000000000000000000000000008352602083600481845afa9283156139e05760805193613fae575b5061030051517fdf0559ce000000000000000000000000000000000000000000000000000000008152602081600481855afa9081156139e05760805191613f8f575b506103005151917faa2bd882000000000000000000000000000000000000000000000000000000008352602083600481845afa9283156139e05760805193613f5b575b5061030051517f555d9bf9000000000000000000000000000000000000000000000000000000008152602081600481855afa9081156139e05760805191613f29575b506103005151937f1b743d0a000000000000000000000000000000000000000000000000000000008552602085600481865afa9485156139e05760805195613f08575b506103005151947f04e2ee4e000000000000000000000000000000000000000000000000000000008652602086600481875afa9384156139e05760049660805195613ee6575b506020906103005151978880927f8cf4abc90000000000000000000000000000000000000000000000000000000082525afa9586156139e05760805196613eb2575b506103005151948560e081011067ffffffffffffffff60e0880111176111d9578660c06001600160a01b03808080809e60e08d0161030051521695868c5216958660208c015287610300518c01528860608c0152169788610200518b015216978860a082015201526001600160a01b0319601f541617601f556001600160a01b031960205416176020556021556022556001600160a01b031960235416176023556001600160a01b03196024541617602455602555610120610220510151603355166001600160a01b031960385416176038556001600160a01b036060610240510151166001600160a01b0319601d541617601d556001600160a01b03610300516102405101511660a052610220515160c052602061022051015160e0526103005161022051015161010052606061022051015161012052610260515161014052610300516102605101516101605260606102605101516101805280516101a0526020810151906103005181015160608201519060a0610200518401519301519361030051516101c0526101c0516101e06101c051011067ffffffffffffffff6101e06101c0510111176111d9576101e06101c05101610300515260a0516101c0515260c05160206101c051015260e051610300516101c05101526101005160606101c051015261012051610200516101c05101526101405160a06101c05101526101605160c06101c05101526101805160e06101c05101526101a0516101006101c05101526101206101c05101526101406101c05101526101606101c05101526101806101c05101526101a06101c05101526084356101c08051015260a0516001600160a01b0319600954161760095560c051600a5560e051600b5561010051600c5561012051600d5561014051600e5561016051600f55610180516010556101a0515167ffffffffffffffff81116111d9576134a96011546142fb565b601f8111613e6a575b506020906001601f821114613dfe57809160805191613df0575b506000198260011b9260031b1c1916176011555b6101206101c0510151805167ffffffffffffffff81116111d9576135056012546142fb565b601f8111613da8575b506020916001601f831114613d415791819260805192613d36575b50506000198260011b9260031b1c1916176012555b6101406101c0510151805167ffffffffffffffff81116111d9576135636013546142fb565b601f8111613cee575b506020916001601f831114613c875791819260805192613c7c575b50506000198260011b9260031b1c1916176013555b6101606101c0510151805167ffffffffffffffff81116111d9576135c16014546142fb565b601f8111613c34575b506020916001601f831114613bcd5791819260805192613bc2575b50506000198260011b9260031b1c1916176014555b6101806101c0510151805167ffffffffffffffff81116111d95761361f6015546142fb565b601f8111613b7a575b506020916001601f831114613b135791819260805192613b08575b50506000198260011b9260031b1c1916176015555b6101a06101c0510151805167ffffffffffffffff81116111d95761367d6016546142fb565b601f8111613abc575b506020916001601f831114613a555791819260805192613a4a575b50506000198260011b9260031b1c1916176016555b6101c0805101516017556001600160a01b036101e051166001600160a01b031960185416176018556137136102005161022051015160a061022051015160c061022051015160e06102205101519161010061022051015193615acd565b6137296001600160a01b036102405151166159ae565b60206102605101516102a05151151560206102a0510151151591600855602d547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff000060ff61ff008560081b16931691161717602d556001600160a01b036038541660206001600160a01b036018541660a46001600160a01b0360095416916001600160a01b03601d541694610300515195869485937f509f318c000000000000000000000000000000000000000000000000000000008552600485015260248401526044830152306064830152336084830152608051905af180156139e0576001600160a01b039160805191613a1b575b5016806001600160a01b0319603954161760395561030051519161383c836141d0565b600a548352600b5460208401526103005151613857816141d0565b600f548152601054602082015260ff602d541690833b1561032a576138b6906138ac6103005151967fa30442d700000000000000000000000000000000000000000000000000000000885260048801906159f5565b60448601906159f5565b151560848401526102c05160805160a485015b60058210613a05575050506101448301526102805160805161016484015b600382106139ef57505050816101c48160805193608051905af180156139e0576139ce575b506006805460ff191690556102c051516003556102e051610300511c60ff16156139365760805180f35b7fffffffffffffffffffffffffffffffffffffffffffffff00ffffffffffffffff7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a0054167ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00557fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d26020610300515160018152a1610caf565b6080516139da91614202565b8061390c565b61030051513d608051823e3d90fd5b60208060019285518152019301910190916138e7565b60208060019285518152019301910190916138c9565b613a3d915060203d602011613a43575b613a358183614202565b8101906146ef565b83613819565b503d613a2b565b0151905082806136a1565b601f198216926016608051528060805120916080515b858110613aa457508360019510613a8b575b505050811b016016556136b6565b015160001960f88460031b161c19169055828080613a7d565b91926020600181928685015181550194019201613a6b565b601660805152602060805120601f830160051c81019160208410613afe575b601f0160051c01905b818110613af15750613686565b6080518155600101613ae4565b9091508190613adb565b015190508280613643565b601f198216926015608051528060805120916080515b858110613b6257508360019510613b49575b505050811b01601555613658565b015160001960f88460031b161c19169055828080613b3b565b91926020600181928685015181550194019201613b29565b601560805152602060805120601f830160051c810160208410613bbb575b601f830160051c82018110613bae575050613628565b6080518155600101613b98565b5080613b98565b0151905082806135e5565b601f198216926014608051528060805120916080515b858110613c1c57508360019510613c03575b505050811b016014556135fa565b015160001960f88460031b161c19169055828080613bf5565b91926020600181928685015181550194019201613be3565b601460805152602060805120601f830160051c810160208410613c75575b601f830160051c82018110613c685750506135ca565b6080518155600101613c52565b5080613c52565b015190508280613587565b601f198216926013608051528060805120916080515b858110613cd657508360019510613cbd575b505050811b0160135561359c565b015160001960f88460031b161c19169055828080613caf565b91926020600181928685015181550194019201613c9d565b601360805152602060805120601f830160051c810160208410613d2f575b601f830160051c82018110613d2257505061356c565b6080518155600101613d0c565b5080613d0c565b015190508280613529565b601f198216926012608051528060805120916080515b858110613d9057508360019510613d77575b505050811b0160125561353e565b015160001960f88460031b161c19169055828080613d69565b91926020600181928685015181550194019201613d57565b601260805152602060805120601f830160051c810160208410613de9575b601f830160051c82018110613ddc57505061350e565b6080518155600101613dc6565b5080613dc6565b90506101a0510151826134cc565b601f198116916011608051528060805120906080515b848110613e4f57508260019410613e33575b5050811b016011556134e0565b6101a051015160001960f88460031b161c191690558280613e26565b9091602060018192856101a051015181550193019101613e14565b601160805152602060805120601f830160051c810160208410613eab575b601f830160051c82018110613e9e5750506134b2565b6080518155600101613e88565b5080613e88565b9095506020813d602011613ede575b81613ece60209383614202565b8101031261032a575194896131ea565b3d9150613ec1565b6020919550613f0190823d8411613a4357613a358183614202565b94906131a8565b613f2291955060203d602011613a4357613a358183614202565b9388613162565b90506020813d602011613f53575b81613f4460209383614202565b8101031261032a57518761311f565b3d9150613f37565b9092506020813d602011613f87575b81613f7760209383614202565b8101031261032a575191866130dd565b3d9150613f6a565b613fa8915060203d602011613a4357613a358183614202565b8561309a565b613fc891935060203d602011613a4357613a358183614202565b9184613058565b7ff9781eda00000000000000000000000000000000000000000000000000000000608051526113ec6004526024608051fd5b7f47200aef00000000000000000000000000000000000000000000000000000000608051526004608051fd5b680100000000000000017fffffffffffffffffffffffffffffffffffffffffffffff0000000000000000006102e05116177ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a0055612fc3565b7ff92ee8a900000000000000000000000000000000000000000000000000000000608051526004608051fd5b90501583612f64565b303b159150612f5c565b6102e051610300511c60ff16159150612f52565b833567ffffffffffffffff811161032a576020916140fd839260043691870101614250565b815201930192612ef9565b8135801515810361032a57815260209182019101612ead565b8135815260209182019101612e6e565b8135815260209182019101612e31565b8135815260209182019101612df5565b8135815260209182019101612d9e565b81356001600160a01b038116810361032a57815260209182019101612d64565b3461032a57602060031936011261032a576020611cc461419f6141a4565b61442f565b600435906001600160a01b0382168203611a7357565b602435906001600160a01b0382168203611a7357565b6040810190811067ffffffffffffffff8211176141ec57604052565b634e487b7160e01b600052604160045260246000fd5b90601f601f19910116810190811067ffffffffffffffff8211176141ec57604052565b600435908115158203611a7357565b67ffffffffffffffff81116141ec57601f01601f191660200190565b81601f82011215611a735780359061426782614234565b926142756040519485614202565b82845260208383010111611a7357816000926020809301838601378301015290565b67ffffffffffffffff81116141ec5760051b60200190565b9291906142bb81614297565b936142c96040519586614202565b602085838152019160051b8101928311611a7357905b8282106142eb57505050565b81358152602091820191016142df565b90600182811c9216801561432b575b602083101461431557565b634e487b7160e01b600052602260045260246000fd5b91607f169161430a565b6040519060008260055491614349836142fb565b80835292600181169081156143cf575060011461436f575b61436d92500383614202565b565b506005600090815290917f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db05b8183106143b357505090602061436d92820101614361565b602091935080600191548385890101520191019091849261439b565b6020925061436d94915060ff191682840152151560051b820101614361565b919082519283825260005b84811061441a575050601f19601f8460006020809697860101520116010190565b806020809284010151828286010152016143f9565b60206001600160a01b036024818354169360405194859384926370a0823160e01b84521660048301525afa9081156144a15760009161446f575b50151590565b90506020813d602011614499575b8161448a60209383614202565b81010312611a73575138614469565b3d915061447d565b6040513d6000823e3d90fd5b818102929181159184041417156144c057565b634e487b7160e01b600052601160045260246000fd5b919082039182116144c057565b604d81116144c057600a0a90565b81156144fb570490565b634e487b7160e01b600052601260045260246000fd5b601d546000906001600160a01b03168061459e575050475b80603b546012810361457e575b5050603a5490601282036145545761455191506017546144f1565b90565b60175491601203601281116144c05761455192614573614579926144e3565b906144ad565b6144f1565b6012908103925082116144c057614573614597926144e3565b3880614536565b6020602491604051928380926370a0823160e01b82523060048301525afa9182156146095780926145d1575b5050614529565b9091506020823d602011614601575b816145ed60209383614202565b810103126145fe57505138806145ca565b80fd5b3d91506145e0565b604051903d90823e3d90fd5b91906040517fffffffffffffffffffffffffffffffffffffffff000000000000000000000000602082019260601b16825260148152614655603482614202565b519020603254916000915b84518310156146a757614673838661573a565b51906000828210156146965750600052602052600160406000205b920191614660565b60409160019382526020522061468e565b915092501490565b90816020910312611a7357518015158103611a735790565b919082018092116144c057565b90816060910312611a73578051916040602083015192015190565b90816020910312611a7357516001600160a01b0381168103611a735790565b601954600090600b54811080159061572f575b156157075760ff600654166005811015806156f3576003821480156156e7575b6156bf576156ab5760041461568357600a5411615670576001600160a01b0360095416600a5415615655575b601d546001600160a01b031680159081156155f357475b80159081156155cc575b506155a457601954906127106147a6602154846144ad565b04603b54601203601281116153e9576147d46147cb61271093612b0f6147dd946144e3565b94600f546144ad565b602254906144ad565b04603a54601203601281116153e95786939291612b0f6147fc926144e3565b93156155825750818080926001600160a01b0360235416828215615579575bf115614f5f57614838905b6001600160a01b036023541683615a1d565b601d546001600160a01b031680159081156155155750475b8091156154de575b50600e54601054848060405161486f608082614202565b605981527f4354524143543a3a2035203a20737570706c794166746572466565733a20256460208201527f2c2073616c65496e666f2e6c697175696469747950657263656e742025642c7360408201527f616c65496e666f2e6465784c697374526174652020256420200000000000000060608201526040516149488161492860208201947fa7a878530000000000000000000000000000000000000000000000000000000086526080602484015260a48301906143ee565b89604483015288606483015287608483015203601f198101835282614202565b51906a636f6e736f6c652e6c6f675afa50604051916370a0823160e01b8352306004840152602083602481885afa9283156153ca5786936154a6575b50603a5460120392601284116153e957612710916149a86149ae92614573876144e3565b956144ad565b04926149ba82856144ad565b1161547e5790612b0f6149d06149d693856144ad565b916144e3565b60185460405163095ea7b360e01b81526001600160a01b0390911660048201526024810182905290919060208160448188885af19081156150ba5790600191869161545f575b50151503615437576001600160a01b0360185416926001600160a01b03601d54161560001461523e57506001600160a01b03600954166064420180421161522a57604051917ff305d719000000000000000000000000000000000000000000000000000000008352600483015283602483015285604483015282606483015230608483015260a482015260608160c48185885af180156150ba57908592916151fb575b507f7cd5ab40640401d656ba26a3b39a4ba340153acc6bcf268c2610b5801be8ef6160406001600160a01b0360185416926001600160a01b03600954169582519182526020820152a45b604051907fc45a0155000000000000000000000000000000000000000000000000000000008252602082600481845afa9182156151475783926151da575b506001600160a01b0360095416906001600160a01b03601d541680156000146151c257506020600491604051928380927fad5c46480000000000000000000000000000000000000000000000000000000082525afa908115614e86576020926001600160a01b0380959360449388916151a5575b50935b60405196879586947fe6a439050000000000000000000000000000000000000000000000000000000086526004860152166024840152165afa908115614f5f57906001600160a01b03918391615186575b507fffffffffffffffffffffff0000000000000000000000000000000000000000ff74ffffffffffffffffffffffffffffffffffffffff006006549260081b169116178060065560081c16604051906370a0823160e01b8252306004830152602082602481845afa918215615147578392615152575b5060206001600160a01b03603954169160e46001600160a01b0386541691866008549560405196879586947fc476b4850000000000000000000000000000000000000000000000000000000086526004860152602485015288604485015260648085015260848401528160a48401528160c48401525af190811561514757614d4092916001600160a01b03918591615128575b5016806001600160a01b031960075416176007556001600160a01b0360065460081c16615a1d565b601d546001600160a01b031680159081156150c55747915b60ff602d5460081c16614e91575b5050506001600160a01b03601d54168015600014614e0a57506001600160a01b038154164790814710614de2578280809381935af1614da3615d38565b5015614dba575b50600460ff196006541617600655565b807f6090361a0000000000000000000000000000000000000000000000000000000060049252fd5b6004837ff4d678b8000000000000000000000000000000000000000000000000000000008152fd5b6001600160a01b0382541690604051916370a0823160e01b8352306004840152602083602481855afa918215614e86578492614e50575b614e4b9350615a1d565b614daa565b91506020833d602011614e7e575b81614e6b60209383614202565b81010312611a7357614e4b925191614e41565b3d9150614e5e565b6040513d86823e3d90fd5b15614fa557506001600160a01b03603954166040517f67dba64b000000000000000000000000000000000000000000000000000000008152602081600481855afa908115614e86579083918591614f6e575b5061271091614ef1916144ad565b0491813b15614f6a57906024849260405194859384927fe7cb4bcb00000000000000000000000000000000000000000000000000000000845260048401525af18015614f5f57908291614f4a575b50505b388080614d66565b81614f5491614202565b6145fe578038614f3f565b6040513d84823e3d90fd5b8380fd5b9150506020813d602011614f9d575b81614f8a60209383614202565b81010312611a7357518290612710614ee3565b3d9150614f7d565b6001600160a01b03603954166040517f67dba64b000000000000000000000000000000000000000000000000000000008152602081600481855afa9081156150ba57908491869161507f575b5061500461500b949392612710926144ad565b0491615a1d565b6001600160a01b036039541690813b1561507b5782916024839260405194859384927fe7cb4bcb00000000000000000000000000000000000000000000000000000000845260048401525af18015614f5f57829061506b575b5050614f42565b61507491614202565b3881615064565b8280fd5b9150506020813d6020116150b2575b8161509b60209383614202565b810103126150ae57518390615004614ff1565b8480fd5b3d915061508e565b6040513d87823e3d90fd5b6040516370a0823160e01b8152306004820152602081602481855afa908115614e865784916150f6575b5091614d58565b90506020813d602011615120575b8161511160209383614202565b81010312614f6a5751386150ef565b3d9150615104565b615141915060203d602011613a4357613a358183614202565b38614d18565b6040513d85823e3d90fd5b9091506020813d60201161517e575b8161516e60209383614202565b8101031261507b57519038614c85565b3d9150615161565b61519f915060203d602011613a4357613a358183614202565b38614c0f565b6151bc9150863d8811613a4357613a358183614202565b38614bbb565b6001600160a01b039391506020928460449293614bbe565b6151f491925060203d602011613a4357613a358183614202565b9038614b47565b61521c9060603d606011615223575b6152148183614202565b8101906146d4565b5050614abf565b503d61520a565b602486634e487b7160e01b81526011600452fd5b919060405163095ea7b360e01b8152846004820152600019602482015260208160448189885af180156153ca5761541a575b508460206001600160a01b03601d541660446001600160a01b0360185416604051948593849263095ea7b360e01b8452600484015260001960248401525af180156153ca576153fd575b506001600160a01b03601d5416603b54601203601281116153e9576152e16152e7916144e3565b836144f1565b60644201908142116153d557604051927fe8e33700000000000000000000000000000000000000000000000000000000008452866004850152602484015284604484015260648301528660848301528660a48301523060c483015260e48201526060816101048189895af180156153ca576153ab575b507f7cd5ab40640401d656ba26a3b39a4ba340153acc6bcf268c2610b5801be8ef6160406001600160a01b0360185416926001600160a01b03601d54169482519182526020820152a4614b09565b6153c39060603d606011615223576152148183614202565b505061535d565b6040513d88823e3d90fd5b602488634e487b7160e01b81526011600452fd5b602487634e487b7160e01b81526011600452fd5b6154159060203d602011610a7057610a618183614202565b6152ba565b6154329060203d602011610a7057610a618183614202565b615270565b6004847f7d072847000000000000000000000000000000000000000000000000000000008152fd5b615478915060203d602011610a7057610a618183614202565b38614a1c565b6004857fc4961dd1000000000000000000000000000000000000000000000000000000008152fd5b9092506020813d6020116154d6575b816154c260209383614202565b810103126154d257519138614984565b8580fd5b3d91506154b5565b9050603b546012036012811161550157906145736154fb926144e3565b38614858565b602484634e487b7160e01b81526011600452fd5b6020602491604051928380926370a0823160e01b82523060048301525afa908115614e86578491615547575b50614850565b90506020813d602011615571575b8161556260209383614202565b81010312614f6a575138615541565b3d9150615555565b506108fc61481b565b6148389392509061559f916001600160a01b036023541690615a1d565b614826565b6004847f94a4e8f4000000000000000000000000000000000000000000000000000000008152fd5b9050601954603b54601203601281116153e95790612b0f6155ec926144e3565b113861478e565b6040516370a0823160e01b8152306004820152602081602481855afa9081156150ba578591615623575b50614784565b90506020813d60201161564d575b8161563e60209383614202565b810103126150ae57513861561d565b3d9150615631565b61565d614511565b601055615668614511565b600f5561476d565b5061436d600360ff196006541617600655565b6004827ff08d7fd2000000000000000000000000000000000000000000000000000000008152fd5b602483634e487b7160e01b81526021600452fd5b6004847f894d929f000000000000000000000000000000000000000000000000000000008152fd5b50508260028214614741565b602484634e487b7160e01b81526021600452fd5b6004827f1e77a2d7000000000000000000000000000000000000000000000000000000008152fd5b50600d544211614721565b805182101561574e5760209160051b010190565b634e487b7160e01b600052603260045260246000fd5b6001600160a01b0360245416906025549161577e83614297565b9161578c6040519384614202565b83835261579884614297565b90601f1960208501920136833783511561574e576001600160a01b03168152916157c184614297565b926157cf6040519485614202565b8484526157db85614297565b90601f1960208601920136833760005b86811061598157506040519485937f4e1273f40000000000000000000000000000000000000000000000000000000085526044850190604060048701525180915260648501929060005b81811061595f57505050602090600319858403016024860152519182815201919060005b8181106159465750505091818060009403915afa9081156144a1576000916158b6575b506000916000915b81831061589357505050151590565b9091926158ad6001916158a6868561573a565b51906146c7565b93019190615884565b3d8083833e6158c58183614202565b81019060208183031261507b5780519067ffffffffffffffff8211614f6a570181601f8201121561507b578051906158fc82614297565b9361590a6040519586614202565b82855260208086019360051b8301019384116145fe5750602001905b828210615936575050503861587c565b8151815260209182019101615926565b8251845286945060209384019390920191600101615859565b82516001600160a01b0316855288965060209485019490920191600101615835565b8080615993600193899596979961573a565b520194929190946157eb565b60001981146144c05760010190565b6001600160a01b0380600054921691826001600160a01b0319821617600055167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a3565b906000905b60028210615a0757505050565b60208060019285518152019301910190916159fa565b6040517fa9059cbb0000000000000000000000000000000000000000000000000000000060208201526001600160a01b0392909216602483015260448083019390935291815261436d91610c6c606483614202565b6001600160a01b03600054163303615a8657565b7f118cdaa7000000000000000000000000000000000000000000000000000000006000523360045260246000fd5b90816020910312611a73575160ff81168103611a735790565b600460206001600160a01b0360095416604051928380927f313ce5670000000000000000000000000000000000000000000000000000000082525afa80156144a15760ff91600091615cde575b5016603a556012603b556001600160a01b03601d541680615c62575b50600b546109c481028181046109c414821517156144c05761271090048210615c3357808211615c09578211615bdf578315615bb5578415615b8b5780602a55602b55602c55602e5580602f55603055603155565b7f3dd55d8f0000000000000000000000000000000000000000000000000000000060005260046000fd5b7f53c703b10000000000000000000000000000000000000000000000000000000060005260046000fd5b7fa6b78c230000000000000000000000000000000000000000000000000000000060005260046000fd5b7ff2e3f3740000000000000000000000000000000000000000000000000000000060005260046000fd5b7f84cc2e1d00000000000000000000000000000000000000000000000000000000600052601960045260246000fd5b6020600491604051928380927f313ce5670000000000000000000000000000000000000000000000000000000082525afa80156144a15760ff91600091615caf575b5016603b5538615b36565b615cd1915060203d602011615cd7575b615cc98183614202565b810190615ab4565b38615ca4565b503d615cbf565b615cf7915060203d602011615cd757615cc98183614202565b38615b1a565b600260015414615d0e576002600155565b7f3ee5aeb50000000000000000000000000000000000000000000000000000000060005260046000fd5b3d15615d63573d90615d4982614234565b91615d576040519384614202565b82523d6000602084013e565b606090565b6000806001600160a01b03615d9293169360208151910182865af1615d8b615d38565b9083615df0565b8051908115159182615dd5575b5050615da85750565b7f5274afe70000000000000000000000000000000000000000000000000000000060005260045260246000fd5b615de892506020809183010191016146af565b153880615d9f565b90615e2f5750805115615e0557805190602001fd5b7f1425ea420000000000000000000000000000000000000000000000000000000060005260046000fd5b81511580615e77575b615e40575090565b6001600160a01b03907f9996b315000000000000000000000000000000000000000000000000000000006000521660045260246000fd5b50803b15615e3856fea2646970667358221220a8b572795084cb20d387c127aafb5cc34b64083b7f51a330edbf553bf42daea364736f6c634300081c0033",
  "deployedBytecode": "0x610320604052600436101561001357600080fd5b60006080526080513560e01c80630bf75580146141815780630caf5f1a14612d2357806311493b0114612cff5780631954e48214612ce05780631fe9c37514612cc1578063200d2ed214612c9657806324600fc3146129f75780632884add8146129d05780632a454f08146129b1578063325af0f51461299257806336140c50146129735780633de419fb1461293757806340af8dd71461291357806340c397da146128e857806346c00c33146128b957806348c447121461286d5780634aac3dac146128455780634bcd137e1461282657806351cb1876146127ed5780635e906079146127b157806360a5b604146126e857806360fa3892146126935780636b04fa541461267157806370a566e214612652578063715018a6146125f357806371b9510d146125b75780637b94a403146125905780637ff0011a14612526578063843f259d146125075780638da5cb5b146124de5780638e3695b81461203d5780638f28397014611fbf578063909a40b614611f6d57806394722d4214611f20578063980e784414611ebd5780639d76ea5814611e95578063a16ee9dc14611e76578063a26dbf2614611e57578063b135648814611e38578063b65215b814611e10578063bb05c30e14611d73578063bc5ee23814611d54578063bc89ff2b14611d15578063bde3386214611ced578063bf0a07bd14611cce578063cb3416e314611ca1578063cbbc15eb14611c79578063cc4decef14611c5a578063cc86c3e514611be0578063ccbccbe514611942578063cf00881414611916578063d510f932146118f7578063d6290cd71461183f578063d8ee4c3614610db8578063d99f867414610d94578063e7f67fb114610d6c578063eb7e7f2c14610d4d578063eccc215514610ce7578063f2fde38b14610c76578063f5a1e7af14610406578063f71579e0146103d1578063f77656a6146103b2578063f89fd0341461034f578063fd256ee1146103305763fe36f6c9146102ee57600080fd5b3461032a57602060031936011261032a576001600160a01b0361030f6141a4565b16608051526035602052602060406080512054604051908152f35b60805180fd5b3461032a5760805160031936011261032a576020601b54604051908152f35b3461032a5760805160031936011261032a576001600160a01b03602654163303610386576080516006805460ff1916600117905580f35b7f30cd747100000000000000000000000000000000000000000000000000000000608051526004608051fd5b3461032a5760805160031936011261032a576020603354604051908152f35b3461032a5760805160031936011261032a576104026103ee614335565b6040519182916020835260208301906143ee565b0390f35b604060031936011261032a5760043567ffffffffffffffff811161032a573660238201121561032a57806004013567ffffffffffffffff811161032a573660248260051b8401011161032a576024359161045e615cfd565b601d546001600160a01b031680610bfc575034915b60ff60065416600581101580610baa57600282148015610bee575b610bc257610baa57600103610b7e57601954600b549081811015610b5257600d544211610b2657846104bf916146c7565b11610afa57602e548310610ace57600c54428111610674575060ff60025416610624575b50506104f181601c546146c7565b602c54106105f8573360805152603660205261051381604060805120546146c7565b603154106105cc577f7e71433ddf847725166244795048ecf3e3f9f35628254ecbf736056664233493916105956105be923360805152603660205260406080512061055f8282546146c7565b90553360805152603760205260406080512061057c8282546146c7565b905561058a816019546146c7565b601955601c546146c7565b601c556105a3601e5461599f565b601e5560408051338152602081019290925290918291820190565b0390a15b6001805560805180f35b7f92bf02be00000000000000000000000000000000000000000000000000000000608051526004608051fd5b7fcea1f8fa00000000000000000000000000000000000000000000000000000000608051526004608051fd5b61063761063c92339260243692016142af565b614615565b156106485782806104e3565b7ff016682300000000000000000000000000000000000000000000000000000000608051526004608051fd5b9150506001600160a01b0360265416906040517f6727269a0000000000000000000000000000000000000000000000000000000081526080516004820152602081602481865afa908115610a775760805191610aaf575b5080610a84575b156108315750506106e233615764565b15610805576106f381601a546146c7565b602a54106107d9573360805152603460205261071581604060805120546146c7565b602f54106107ad577f7e71433ddf847725166244795048ecf3e3f9f35628254ecbf736056664233493916107976107a592336080515260346020526040608051206107618282546146c7565b90553360805152603760205260406080512061077e8282546146c7565b905561078c816019546146c7565b601955601a546146c7565b601a556105a3601e5461599f565b0390a16105c2565b7f255be30700000000000000000000000000000000000000000000000000000000608051526004608051fd5b7f622f8eac00000000000000000000000000000000000000000000000000000000608051526004608051fd5b7f4572233200000000000000000000000000000000000000000000000000000000608051526004608051fd5b6020602492604051938480927f6727269a000000000000000000000000000000000000000000000000000000008252600160048301525afa918215610a775760805192610a46575b5081610a02575b50156109d65761088f3361442f565b156109aa576108a081601b546146c7565b602b541061097e57336080515260356020526108c281604060805120546146c7565b60305410610952577f7e71433ddf847725166244795048ecf3e3f9f35628254ecbf736056664233493916109446107a5923360805152603560205260406080512061090e8282546146c7565b90553360805152603760205260406080512061092b8282546146c7565b9055610939816019546146c7565b601955601b546146c7565b601b556105a3601e5461599f565b7fa6b88d4300000000000000000000000000000000000000000000000000000000608051526004608051fd5b7f21f0cbe300000000000000000000000000000000000000000000000000000000608051526004608051fd5b7f47a0f6f600000000000000000000000000000000000000000000000000000000608051526004608051fd5b7f2d0a346e00000000000000000000000000000000000000000000000000000000608051526004608051fd5b9050602754610e10810290808204610e101490151715610a2e57610a25916144d6565b42101583610880565b634e487b7160e01b6080515260116004526024608051fd5b610a6991925060203d602011610a70575b610a618183614202565b8101906146af565b9084610879565b503d610a57565b6040513d608051823e3d90fd5b50602854610e10810290808204610e101490151715610a2e57610aa790826144d6565b4210156106d2565b610ac8915060203d602011610a7057610a618183614202565b856106cb565b7f1b34a19900000000000000000000000000000000000000000000000000000000608051526004608051fd5b7f9b57854300000000000000000000000000000000000000000000000000000000608051526004608051fd5b7fc5b0816400000000000000000000000000000000000000000000000000000000608051526004608051fd5b7f7f6df6bb00000000000000000000000000000000000000000000000000000000608051526004608051fd5b7f25de07a700000000000000000000000000000000000000000000000000000000608051526004608051fd5b634e487b7160e01b6080515260216004526024608051fd5b7f894d929f00000000000000000000000000000000000000000000000000000000608051526004608051fd5b50506080516003821461048e565b91603b5460120360128111610a2e57610c20610c1a610c71926144e3565b866144ad565b93604051907f23b872dd00000000000000000000000000000000000000000000000000000000602083015233602483015230604483015286606483015260648252610c6c608483614202565b615d68565b610473565b3461032a57602060031936011261032a57610c8f6141a4565b610c97615a72565b6001600160a01b03811615610cb557610caf906159ae565b60805180f35b7f1e4fbdf700000000000000000000000000000000000000000000000000000000608051526080516004526024608051fd5b3461032a5760805160031936011261032a576001600160a01b03601f54163303610d215760206001600160a01b0360395416604051908152f35b7f7bfa4b9f00000000000000000000000000000000000000000000000000000000608051526004608051fd5b3461032a5760805160031936011261032a576020601c54604051908152f35b3461032a5760805160031936011261032a5760206001600160a01b0360185416604051908152f35b3461032a5760805160031936011261032a57602060ff600254166040519015158152f35b3461032a5760c060031936011261032a5760043567ffffffffffffffff811161032a57610de9903690600401614250565b60243567ffffffffffffffff811161032a57610e09903690600401614250565b9060443567ffffffffffffffff811161032a57610e2a903690600401614250565b9160643567ffffffffffffffff811161032a57610e4b903690600401614250565b9160843567ffffffffffffffff811161032a57610e6c903690600401614250565b9160a43567ffffffffffffffff811161032a57610e8d903690600401614250565b91610e96615a72565b600c5442116118135780519067ffffffffffffffff82116111d9578190610ebe6011546142fb565b601f8111611764575b506020906001601f8411146116dd57608051926116d2575b50506000198260011b9260031b1c1916176011555b80519067ffffffffffffffff82116111d9578190610f136012546142fb565b601f8111611623575b506020906001601f84111461159c5760805192611591575b50506000198260011b9260031b1c1916176012555b835167ffffffffffffffff81116111d957610f656013546142fb565b601f81116114ec575b506020946001601f831114611466579481929394956080519261145b575b50506000198260011b9260031b1c1916176013555b825167ffffffffffffffff81116111d957610fbd6014546142fb565b601f81116113b6575b5060206001601f831114611330578192939460805192611325575b50506000198260011b9260031b1c1916176014555b815167ffffffffffffffff81116111d9576110126015546142fb565b601f8111611280575b506020926001601f8311146111fc5792819293608051926111f1575b50506000198260011b9260031b1c1916176015555b805167ffffffffffffffff81116111d9576110686016546142fb565b601f8111611134575b506020916001601f8311146110b157918192608051926110a6575b50506000198260011b9260031b1c19161760165560805180f35b01519050828061108c565b601f198216926016608051527fd833147d7dc355ba459fc788f669e58cfaf9dc25ddcd0702e87d69c7b5124289916080515b85811061111c57508360019510611103575b505050811b01601655610caf565b015160001960f88460031b161c191690558280806110f5565b919260206001819286850151815501940192016110e3565b601660805152601f820160051c7fd833147d7dc355ba459fc788f669e58cfaf9dc25ddcd0702e87d69c7b51242890190602083106111b1575b601f0160051c7fd833147d7dc355ba459fc788f669e58cfaf9dc25ddcd0702e87d69c7b512428901905b8181106111a45750611071565b6080518155600101611197565b7fd833147d7dc355ba459fc788f669e58cfaf9dc25ddcd0702e87d69c7b5124289915061116d565b634e487b7160e01b6080515260416004526024608051fd5b015190508380611037565b601f198216936015608051527f55f448fdea98c4d29eb340757ef0a66cd03dbb9538908a6a81d96026b71ec475916080515b868110611268575083600195961061124f575b505050811b0160155561104c565b015160001960f88460031b161c19169055838080611241565b9192602060018192868501518155019401920161122e565b601560805152601f820160051c7f55f448fdea98c4d29eb340757ef0a66cd03dbb9538908a6a81d96026b71ec4750190602083106112fd575b601f0160051c7f55f448fdea98c4d29eb340757ef0a66cd03dbb9538908a6a81d96026b71ec47501905b8181106112f0575061101b565b60805181556001016112e3565b7f55f448fdea98c4d29eb340757ef0a66cd03dbb9538908a6a81d96026b71ec47591506112b9565b015190508480610fe1565b601f198216906014608051527fce6d7b5282bd9a3661ae061feed1dbda4e52ab073b1f9285be6e155d9c38d4ec916080515b81811061139e57509583600195969710611385575b505050811b01601455610ff6565b015160001960f88460031b161c19169055848080611377565b9192602060018192868b015181550194019201611362565b601460805152601f820160051c7fce6d7b5282bd9a3661ae061feed1dbda4e52ab073b1f9285be6e155d9c38d4ec019060208310611433575b601f0160051c7fce6d7b5282bd9a3661ae061feed1dbda4e52ab073b1f9285be6e155d9c38d4ec01905b8181106114265750610fc6565b6080518155600101611419565b7fce6d7b5282bd9a3661ae061feed1dbda4e52ab073b1f9285be6e155d9c38d4ec91506113ef565b015190508580610f8c565b601f198216956013608051527f66de8ffda797e3de9c05e8fc57b3bf0ec28a930d40b0d285d93c06501cf6a090916080515b8881106114d4575083600195969798106114bb575b505050811b01601355610fa1565b015160001960f88460031b161c191690558580806114ad565b91926020600181928685015181550194019201611498565b601360805152601f820160051c7f66de8ffda797e3de9c05e8fc57b3bf0ec28a930d40b0d285d93c06501cf6a090019060208310611569575b601f0160051c7f66de8ffda797e3de9c05e8fc57b3bf0ec28a930d40b0d285d93c06501cf6a09001905b81811061155c5750610f6e565b608051815560010161154f565b7f66de8ffda797e3de9c05e8fc57b3bf0ec28a930d40b0d285d93c06501cf6a0909150611525565b015190508680610f34565b91601f1916916012608051527fbb8a6a4669ba250d26cd7a459eca9d215f8307e33aebe50379bc5a3617ec3444926080515b81811061160b57509084600195949392106115f2575b505050811b01601255610f49565b015160001960f88460031b161c191690558680806115e4565b929360206001819287860151815501950193016115ce565b909150601260805152601f830160051c7fbb8a6a4669ba250d26cd7a459eca9d215f8307e33aebe50379bc5a3617ec34440190602084106116aa575b90601f8493920160051c7fbb8a6a4669ba250d26cd7a459eca9d215f8307e33aebe50379bc5a3617ec344401905b81811061169a5750610f1c565b608051815584935060010161168d565b7fbb8a6a4669ba250d26cd7a459eca9d215f8307e33aebe50379bc5a3617ec3444915061165f565b015190508780610edf565b91601f1916916011608051527f31ecc21a745e3968a04e9570e4425bc18fa8019c68028196b546d1669c200c68926080515b81811061174c5750908460019594939210611733575b505050811b01601155610ef4565b015160001960f88460031b161c19169055878080611725565b9293602060018192878601518155019501930161170f565b909150601160805152601f830160051c7f31ecc21a745e3968a04e9570e4425bc18fa8019c68028196b546d1669c200c680190602084106117eb575b90601f8493920160051c7f31ecc21a745e3968a04e9570e4425bc18fa8019c68028196b546d1669c200c6801905b8181106117db5750610ec7565b60805181558493506001016117ce565b7f31ecc21a745e3968a04e9570e4425bc18fa8019c68028196b546d1669c200c6891506117a0565b7f994df61800000000000000000000000000000000000000000000000000000000608051526004608051fd5b3461032a5760805160031936011261032a57600a54600b5490600c54600d54600f54601054600e5460085460195491601e54936002549560045460ff1697611885614335565b996040519c8d9c8d5260208d015260408c015260608b015260808a015260a089015260c088015260e087015261010086015261012085015260ff8116151561014085015260081c60ff16151561016084015215156101808301526101a082016101c090526101c08201610402916143ee565b3461032a5760805160031936011261032a576020602e54604051908152f35b3461032a5760805160031936011261032a57611930615a72565b60ff1960025416600255608051608051f35b3461032a5760805160031936011261032a5761195c615a72565b60ff6006541660058110159081610baa5760038114159182611bd0575b82611bbe575b5050611b9257600d544210611b665760ff60295416611b3a57601954600a5411611b23575b6001600160a01b036009541660ff60065416600581101580610baa57600382148015611b15575b15611a805750506040516370a0823160e01b8152306004820152602081602481855afa908115610a775760805191611a49575b508015611a1d57610caf91600160ff1960295416176029553390615a1d565b7fdf95788300000000000000000000000000000000000000000000000000000000608051526004608051fd5b90506020813d602011611a78575b81611a6460209383614202565b81010312611a735751826119fe565b600080fd5b3d9150611a57565b610baa57600414611a92575b50610caf565b6040516370a0823160e01b8152306004820152602081602481855afa908115610a775760805191611ae3575b508015611a1d57611add91600160ff1960295416176029553390615a1d565b80611a8c565b90506020813d602011611b0d575b81611afe60209383614202565b81010312611a73575182611abe565b3d9150611af1565b5050608051600282146119cb565b611b35600360ff196006541617600655565b6119a4565b7f63e9f2ee00000000000000000000000000000000000000000000000000000000608051526004608051fd5b7f42a941a200000000000000000000000000000000000000000000000000000000608051526004608051fd5b7feacd450a00000000000000000000000000000000000000000000000000000000608051526004608051fd5b909150610baa5760041415818061197f565b5060805160028214159250611979565b3461032a57602060031936011261032a57611bf9614225565b6001600160a01b03601f54163303610d2157600c54421015611c2e5760ff60ff19600454169115151617600455608051608051f35b7f2935b03400000000000000000000000000000000000000000000000000000000608051526004608051fd5b3461032a5760805160031936011261032a576020603054604051908152f35b3461032a5760805160031936011261032a5760206001600160a01b0360265416604051908152f35b3461032a57602060031936011261032a576020611cc4611cbf6141a4565b615764565b6040519015158152f35b3461032a5760805160031936011261032a576020600b54604051908152f35b3461032a5760805160031936011261032a5760206001600160a01b03601d5416604051908152f35b3461032a5760805160031936011261032a5760ff60045416611d35614335565b90610402604051928392151583526040602084015260408301906143ee565b3461032a5760805160031936011261032a576020601a54604051908152f35b3461032a57602060031936011261032a57611d8c614225565b6001600160a01b03601f54163303610d2157600c54421015611de4577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff61ff0060025492151560081b16911617600255608051608051f35b7f4ea6e6d200000000000000000000000000000000000000000000000000000000608051526004608051fd5b3461032a5760805160031936011261032a5760206001600160a01b0360395416604051908152f35b3461032a5760805160031936011261032a576020600d54604051908152f35b3461032a5760805160031936011261032a576020601e54604051908152f35b3461032a5760805160031936011261032a576020602a54604051908152f35b3461032a5760805160031936011261032a5760206001600160a01b0360095416604051908152f35b3461032a5760805160031936011261032a57611ed7615a72565b600c54421015611ef4576080516006805460ff1916600217905580f35b7fc0ac0a3f00000000000000000000000000000000000000000000000000000000608051526004608051fd5b3461032a57602060031936011261032a57611f396141a4565b6001600160a01b03601f54163303610d21576001600160a01b03166001600160a01b03196020541617602055608051608051f35b3461032a5760805160031936011261032a5760e0600f54601054600a54600b54602b5490602c549260315494604051968752602087015260408601526060850152608084015260a083015260c0820152f35b3461032a57602060031936011261032a57611fd86141a4565b601f546001600160a01b03811690338203610d2157813303610d21576001600160a01b036001600160a01b031993169283911617601f557f1747af0dff66eb7165b467825c51774199b063a569a06cdea4565bac5d1be8cf608051608051a360805180f35b3461032a5760805160031936011261032a576001600160a01b0360095416600a54600b54600c54600d54600e54600f54601054608051506040516080518160115491612088836142fb565b80835292600181169081156124bf5750600114612477575b6120ac92500382614202565b60805160405160125490939184906120c3836142fb565b80835292600181169081156124585750600114612410575b6120e792500384614202565b60805160405160135490959186906120fe836142fb565b80835292600181169081156123f157506001146123a9575b61212292500386614202565b6080516040516014549097918890612139836142fb565b808352926001811690811561238a5750600114612343575b61215d92500388614202565b6080516040516015549099918a90612174836142fb565b808352926001811690811561232457506001146122dd575b6121989250038a614202565b60805150604051998a6080516016546121b0816142fb565b80845290600181169081156122c15750600114612281575b50036121d4908c614202565b6017549b6040519e8f9e8f91825260208201526040015260608d015260808c015260a08b015260c08a015260e089015261010088016101e090526101e0880161221c916143ee565b87810361012089015261222e916143ee565b868103610140880152612240916143ee565b858103610160870152612252916143ee565b848103610180860152612264916143ee565b8381036101a0850152612276916143ee565b906101c08301520390f35b608080516016905251602081209092505b8183106122a65750508101602001386121c8565b80602092948385600194549201015201910190918d92612292565b6020935060ff1991501682840152151560051b820101386121c8565b509060156080515260206080512090608051915b8183106123095750509060206121989282010161218c565b80602092948385600194549201015201910190918b926122f1565b6020925061219894915060ff191682840152151560051b82010161218c565b509060146080515260206080512090608051915b81831061236f57505090602061215d92820101612151565b80602092948385600194549201015201910190918992612357565b6020925061215d94915060ff191682840152151560051b820101612151565b509060136080515260206080512090608051915b8183106123d557505090602061212292820101612116565b6020919350806001915483858c010152019101909187926123bd565b6020925061212294915060ff191682840152151560051b820101612116565b509060126080515260206080512090608051915b81831061243c5750509060206120e7928201016120db565b6020919350806001915483858a01015201910190918592612424565b602092506120e794915060ff191682840152151560051b8201016120db565b509060116080515260206080512090608051915b8183106124a35750509060206120ac928201016120a0565b602091935080600191548385880101520191019091839261248b565b602092506120ac94915060ff191682840152151560051b8201016120a0565b3461032a5760805160031936011261032a5760206001600160a01b036080515416604051908152f35b3461032a5760805160031936011261032a576020601054604051908152f35b3461032a57602060031936011261032a5761253f615a72565b600c5442101561256457600160ff196002541617600255600435603255608051608051f35b7fa5b23c1a00000000000000000000000000000000000000000000000000000000608051526004608051fd5b3461032a5760805160031936011261032a57602060ff60025460081c166040519015158152f35b3461032a57602060031936011261032a576001600160a01b036125d86141a4565b16608051526036602052602060406080512054604051908152f35b3461032a5760805160031936011261032a5761260d615a72565b60805180546001600160a01b0319811682556001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a360805180f35b3461032a5760805160031936011261032a576020602b54604051908152f35b3461032a5760805160031936011261032a5761268b615cfd565b6105c261470e565b3461032a57604060031936011261032a5760043567ffffffffffffffff811161032a573660238201121561032a57611cc46126da60209236906024816004013591016142af565b6126e26141ba565b90614615565b3461032a57604060031936011261032a57602435600435612707615a72565b600c548042101561278557811115612759578082111561272d57600c55600d5560805180f35b7f365a7f2c00000000000000000000000000000000000000000000000000000000608051526004608051fd5b7f6a7b851d00000000000000000000000000000000000000000000000000000000608051526004608051fd5b7f949a04db00000000000000000000000000000000000000000000000000000000608051526004608051fd5b3461032a57602060031936011261032a576001600160a01b036127d26141a4565b16608051526034602052602060406080512054604051908152f35b3461032a5760a060031936011261032a57612806615a72565b600c54421161181357610caf608435606435604435602435600435615acd565b3461032a5760805160031936011261032a576020600854604051908152f35b3461032a5760805160031936011261032a5760206001600160a01b0360075416604051908152f35b3461032a57606060031936011261032a576004356001600160a01b038116810361032a576128996141ba565b906001600160a01b03601f54163303610d2157610caf9160443591615a1d565b3461032a57602060031936011261032a576001600160a01b03601f54163303610d215760043560275560805180f35b3461032a5760805160031936011261032a5760206001600160a01b0360065460081c16604051908152f35b3461032a5760805160031936011261032a57602061292f614511565b604051908152f35b3461032a57602060031936011261032a576001600160a01b036129586141a4565b16608051526037602052602060406080512054604051908152f35b3461032a5760805160031936011261032a576020603154604051908152f35b3461032a5760805160031936011261032a576020602c54604051908152f35b3461032a5760805160031936011261032a576020600354604051908152f35b3461032a5760805160031936011261032a57602060ff602d5460081c166040519015158152f35b3461032a5760805160031936011261032a5760ff600654166005811015610baa57600403612c31576001600160a01b0360805154163314612c6a57600d54421080612c5d575b612c3157336080515260376020526040608051205415612c0557601954600a5411612bee575b3360805152603760205260406080512054336080515260376020526080516040608051205560ff600654166005811015610baa57600303612b7057601d546001600160a01b031680612b3f57506080518115612b36575b6080519081908190819085903390f115610a77575b603b546012039060128211610a2e57612b15612b2d91612b0f7fd7dee2702d63ad89917b6a4da9981c90c4d24f8c2bdfd64c604ecae57d8d0651946144e3565b906144f1565b60408051338152602081019290925290918291820190565b0390a160805180f35b506108fc612aba565b603b546012039060128211610a2e57612b63612b5d612b6b936144e3565b846144f1565b903390615a1d565b612acf565b600f54612b7c916144ad565b6001600160a01b0360095416603a546012039060128211610a2e57612b63612b5d612ba6936144e3565b603a546012039060128211610a2e57612b15612be691612b0f7f7084f5476618d8e60b11ef0d7d3f06914655adb8793e28ff7f018d4c76d505d5946144e3565b0390a1610caf565b612c00600360ff196006541617600655565b612a63565b7fbf2af91c00000000000000000000000000000000000000000000000000000000608051526004608051fd5b7ff037aafa00000000000000000000000000000000000000000000000000000000608051526004608051fd5b50601954600b5411612a3d565b7ff97cba9300000000000000000000000000000000000000000000000000000000608051526004608051fd5b3461032a5760805160031936011261032a5760ff600654166040516005821015610baa576020918152f35b3461032a5760805160031936011261032a576020602f54604051908152f35b3461032a5760805160031936011261032a576020601954604051908152f35b3461032a5760805160031936011261032a57602060ff602d54166040519015158152f35b61040060031936011261032a57366023121561032a576080610200819052604051610240819052612d549190614202565b610240513660841161032a576004905b60848210614161573660c3121561032a57612d8d600a60051b6040516102205261022051614202565b61022051366101e41161032a5760a4905b6101e48210614151576101e4356101e08190526001600160a01b038116900361032a5736610223121561032a57612de3600460051b6040516102605261026051614202565b61026051366102841161032a57610204905b610284821061414157366102a3121561032a57612e1f6005801b6040516102c0526102c051614202565b6102c051366103241161032a57610284905b61032482106141315736610343121561032a57612e5c600360051b6040516102805261028051614202565b61028051366103841161032a57610324905b610384821061412157366103a3121561032a57604061030081905280516102a0819052612e9b9190614202565b6102a051366103c41161032a57610384905b6103c48210614108576103c43567ffffffffffffffff811161032a573660238201121561032a57610300515190612ee560c083614202565b819060c481019036821161032a5780600401925b8284106140d857846103e4356001600160a01b038116810361032a577ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00546102e05267ffffffffffffffff6102e05116801590816140c4575b60011490816140ba575b1590816140b1575b50614085576102e0517fffffffffffffffffffffffffffffffffffffffffffffffff000000000000000081166001177ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a0055610300511c60ff161561402d575b6060610220510151610300516102205101511015614001576113ec610260515110613fcf576001600160a01b0360206102405101511690816001600160a01b03196026541617602655600360285560026027556103005151917f44dc44ac000000000000000000000000000000000000000000000000000000008352602083600481845afa9283156139e05760805193613fae575b5061030051517fdf0559ce000000000000000000000000000000000000000000000000000000008152602081600481855afa9081156139e05760805191613f8f575b506103005151917faa2bd882000000000000000000000000000000000000000000000000000000008352602083600481845afa9283156139e05760805193613f5b575b5061030051517f555d9bf9000000000000000000000000000000000000000000000000000000008152602081600481855afa9081156139e05760805191613f29575b506103005151937f1b743d0a000000000000000000000000000000000000000000000000000000008552602085600481865afa9485156139e05760805195613f08575b506103005151947f04e2ee4e000000000000000000000000000000000000000000000000000000008652602086600481875afa9384156139e05760049660805195613ee6575b506020906103005151978880927f8cf4abc90000000000000000000000000000000000000000000000000000000082525afa9586156139e05760805196613eb2575b506103005151948560e081011067ffffffffffffffff60e0880111176111d9578660c06001600160a01b03808080809e60e08d0161030051521695868c5216958660208c015287610300518c01528860608c0152169788610200518b015216978860a082015201526001600160a01b0319601f541617601f556001600160a01b031960205416176020556021556022556001600160a01b031960235416176023556001600160a01b03196024541617602455602555610120610220510151603355166001600160a01b031960385416176038556001600160a01b036060610240510151166001600160a01b0319601d541617601d556001600160a01b03610300516102405101511660a052610220515160c052602061022051015160e0526103005161022051015161010052606061022051015161012052610260515161014052610300516102605101516101605260606102605101516101805280516101a0526020810151906103005181015160608201519060a0610200518401519301519361030051516101c0526101c0516101e06101c051011067ffffffffffffffff6101e06101c0510111176111d9576101e06101c05101610300515260a0516101c0515260c05160206101c051015260e051610300516101c05101526101005160606101c051015261012051610200516101c05101526101405160a06101c05101526101605160c06101c05101526101805160e06101c05101526101a0516101006101c05101526101206101c05101526101406101c05101526101606101c05101526101806101c05101526101a06101c05101526084356101c08051015260a0516001600160a01b0319600954161760095560c051600a5560e051600b5561010051600c5561012051600d5561014051600e5561016051600f55610180516010556101a0515167ffffffffffffffff81116111d9576134a96011546142fb565b601f8111613e6a575b506020906001601f821114613dfe57809160805191613df0575b506000198260011b9260031b1c1916176011555b6101206101c0510151805167ffffffffffffffff81116111d9576135056012546142fb565b601f8111613da8575b506020916001601f831114613d415791819260805192613d36575b50506000198260011b9260031b1c1916176012555b6101406101c0510151805167ffffffffffffffff81116111d9576135636013546142fb565b601f8111613cee575b506020916001601f831114613c875791819260805192613c7c575b50506000198260011b9260031b1c1916176013555b6101606101c0510151805167ffffffffffffffff81116111d9576135c16014546142fb565b601f8111613c34575b506020916001601f831114613bcd5791819260805192613bc2575b50506000198260011b9260031b1c1916176014555b6101806101c0510151805167ffffffffffffffff81116111d95761361f6015546142fb565b601f8111613b7a575b506020916001601f831114613b135791819260805192613b08575b50506000198260011b9260031b1c1916176015555b6101a06101c0510151805167ffffffffffffffff81116111d95761367d6016546142fb565b601f8111613abc575b506020916001601f831114613a555791819260805192613a4a575b50506000198260011b9260031b1c1916176016555b6101c0805101516017556001600160a01b036101e051166001600160a01b031960185416176018556137136102005161022051015160a061022051015160c061022051015160e06102205101519161010061022051015193615acd565b6137296001600160a01b036102405151166159ae565b60206102605101516102a05151151560206102a0510151151591600855602d547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff000060ff61ff008560081b16931691161717602d556001600160a01b036038541660206001600160a01b036018541660a46001600160a01b0360095416916001600160a01b03601d541694610300515195869485937f509f318c000000000000000000000000000000000000000000000000000000008552600485015260248401526044830152306064830152336084830152608051905af180156139e0576001600160a01b039160805191613a1b575b5016806001600160a01b0319603954161760395561030051519161383c836141d0565b600a548352600b5460208401526103005151613857816141d0565b600f548152601054602082015260ff602d541690833b1561032a576138b6906138ac6103005151967fa30442d700000000000000000000000000000000000000000000000000000000885260048801906159f5565b60448601906159f5565b151560848401526102c05160805160a485015b60058210613a05575050506101448301526102805160805161016484015b600382106139ef57505050816101c48160805193608051905af180156139e0576139ce575b506006805460ff191690556102c051516003556102e051610300511c60ff16156139365760805180f35b7fffffffffffffffffffffffffffffffffffffffffffffff00ffffffffffffffff7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a0054167ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00557fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d26020610300515160018152a1610caf565b6080516139da91614202565b8061390c565b61030051513d608051823e3d90fd5b60208060019285518152019301910190916138e7565b60208060019285518152019301910190916138c9565b613a3d915060203d602011613a43575b613a358183614202565b8101906146ef565b83613819565b503d613a2b565b0151905082806136a1565b601f198216926016608051528060805120916080515b858110613aa457508360019510613a8b575b505050811b016016556136b6565b015160001960f88460031b161c19169055828080613a7d565b91926020600181928685015181550194019201613a6b565b601660805152602060805120601f830160051c81019160208410613afe575b601f0160051c01905b818110613af15750613686565b6080518155600101613ae4565b9091508190613adb565b015190508280613643565b601f198216926015608051528060805120916080515b858110613b6257508360019510613b49575b505050811b01601555613658565b015160001960f88460031b161c19169055828080613b3b565b91926020600181928685015181550194019201613b29565b601560805152602060805120601f830160051c810160208410613bbb575b601f830160051c82018110613bae575050613628565b6080518155600101613b98565b5080613b98565b0151905082806135e5565b601f198216926014608051528060805120916080515b858110613c1c57508360019510613c03575b505050811b016014556135fa565b015160001960f88460031b161c19169055828080613bf5565b91926020600181928685015181550194019201613be3565b601460805152602060805120601f830160051c810160208410613c75575b601f830160051c82018110613c685750506135ca565b6080518155600101613c52565b5080613c52565b015190508280613587565b601f198216926013608051528060805120916080515b858110613cd657508360019510613cbd575b505050811b0160135561359c565b015160001960f88460031b161c19169055828080613caf565b91926020600181928685015181550194019201613c9d565b601360805152602060805120601f830160051c810160208410613d2f575b601f830160051c82018110613d2257505061356c565b6080518155600101613d0c565b5080613d0c565b015190508280613529565b601f198216926012608051528060805120916080515b858110613d9057508360019510613d77575b505050811b0160125561353e565b015160001960f88460031b161c19169055828080613d69565b91926020600181928685015181550194019201613d57565b601260805152602060805120601f830160051c810160208410613de9575b601f830160051c82018110613ddc57505061350e565b6080518155600101613dc6565b5080613dc6565b90506101a0510151826134cc565b601f198116916011608051528060805120906080515b848110613e4f57508260019410613e33575b5050811b016011556134e0565b6101a051015160001960f88460031b161c191690558280613e26565b9091602060018192856101a051015181550193019101613e14565b601160805152602060805120601f830160051c810160208410613eab575b601f830160051c82018110613e9e5750506134b2565b6080518155600101613e88565b5080613e88565b9095506020813d602011613ede575b81613ece60209383614202565b8101031261032a575194896131ea565b3d9150613ec1565b6020919550613f0190823d8411613a4357613a358183614202565b94906131a8565b613f2291955060203d602011613a4357613a358183614202565b9388613162565b90506020813d602011613f53575b81613f4460209383614202565b8101031261032a57518761311f565b3d9150613f37565b9092506020813d602011613f87575b81613f7760209383614202565b8101031261032a575191866130dd565b3d9150613f6a565b613fa8915060203d602011613a4357613a358183614202565b8561309a565b613fc891935060203d602011613a4357613a358183614202565b9184613058565b7ff9781eda00000000000000000000000000000000000000000000000000000000608051526113ec6004526024608051fd5b7f47200aef00000000000000000000000000000000000000000000000000000000608051526004608051fd5b680100000000000000017fffffffffffffffffffffffffffffffffffffffffffffff0000000000000000006102e05116177ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a0055612fc3565b7ff92ee8a900000000000000000000000000000000000000000000000000000000608051526004608051fd5b90501583612f64565b303b159150612f5c565b6102e051610300511c60ff16159150612f52565b833567ffffffffffffffff811161032a576020916140fd839260043691870101614250565b815201930192612ef9565b8135801515810361032a57815260209182019101612ead565b8135815260209182019101612e6e565b8135815260209182019101612e31565b8135815260209182019101612df5565b8135815260209182019101612d9e565b81356001600160a01b038116810361032a57815260209182019101612d64565b3461032a57602060031936011261032a576020611cc461419f6141a4565b61442f565b600435906001600160a01b0382168203611a7357565b602435906001600160a01b0382168203611a7357565b6040810190811067ffffffffffffffff8211176141ec57604052565b634e487b7160e01b600052604160045260246000fd5b90601f601f19910116810190811067ffffffffffffffff8211176141ec57604052565b600435908115158203611a7357565b67ffffffffffffffff81116141ec57601f01601f191660200190565b81601f82011215611a735780359061426782614234565b926142756040519485614202565b82845260208383010111611a7357816000926020809301838601378301015290565b67ffffffffffffffff81116141ec5760051b60200190565b9291906142bb81614297565b936142c96040519586614202565b602085838152019160051b8101928311611a7357905b8282106142eb57505050565b81358152602091820191016142df565b90600182811c9216801561432b575b602083101461431557565b634e487b7160e01b600052602260045260246000fd5b91607f169161430a565b6040519060008260055491614349836142fb565b80835292600181169081156143cf575060011461436f575b61436d92500383614202565b565b506005600090815290917f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db05b8183106143b357505090602061436d92820101614361565b602091935080600191548385890101520191019091849261439b565b6020925061436d94915060ff191682840152151560051b820101614361565b919082519283825260005b84811061441a575050601f19601f8460006020809697860101520116010190565b806020809284010151828286010152016143f9565b60206001600160a01b036024818354169360405194859384926370a0823160e01b84521660048301525afa9081156144a15760009161446f575b50151590565b90506020813d602011614499575b8161448a60209383614202565b81010312611a73575138614469565b3d915061447d565b6040513d6000823e3d90fd5b818102929181159184041417156144c057565b634e487b7160e01b600052601160045260246000fd5b919082039182116144c057565b604d81116144c057600a0a90565b81156144fb570490565b634e487b7160e01b600052601260045260246000fd5b601d546000906001600160a01b03168061459e575050475b80603b546012810361457e575b5050603a5490601282036145545761455191506017546144f1565b90565b60175491601203601281116144c05761455192614573614579926144e3565b906144ad565b6144f1565b6012908103925082116144c057614573614597926144e3565b3880614536565b6020602491604051928380926370a0823160e01b82523060048301525afa9182156146095780926145d1575b5050614529565b9091506020823d602011614601575b816145ed60209383614202565b810103126145fe57505138806145ca565b80fd5b3d91506145e0565b604051903d90823e3d90fd5b91906040517fffffffffffffffffffffffffffffffffffffffff000000000000000000000000602082019260601b16825260148152614655603482614202565b519020603254916000915b84518310156146a757614673838661573a565b51906000828210156146965750600052602052600160406000205b920191614660565b60409160019382526020522061468e565b915092501490565b90816020910312611a7357518015158103611a735790565b919082018092116144c057565b90816060910312611a73578051916040602083015192015190565b90816020910312611a7357516001600160a01b0381168103611a735790565b601954600090600b54811080159061572f575b156157075760ff600654166005811015806156f3576003821480156156e7575b6156bf576156ab5760041461568357600a5411615670576001600160a01b0360095416600a5415615655575b601d546001600160a01b031680159081156155f357475b80159081156155cc575b506155a457601954906127106147a6602154846144ad565b04603b54601203601281116153e9576147d46147cb61271093612b0f6147dd946144e3565b94600f546144ad565b602254906144ad565b04603a54601203601281116153e95786939291612b0f6147fc926144e3565b93156155825750818080926001600160a01b0360235416828215615579575bf115614f5f57614838905b6001600160a01b036023541683615a1d565b601d546001600160a01b031680159081156155155750475b8091156154de575b50600e54601054848060405161486f608082614202565b605981527f4354524143543a3a2035203a20737570706c794166746572466565733a20256460208201527f2c2073616c65496e666f2e6c697175696469747950657263656e742025642c7360408201527f616c65496e666f2e6465784c697374526174652020256420200000000000000060608201526040516149488161492860208201947fa7a878530000000000000000000000000000000000000000000000000000000086526080602484015260a48301906143ee565b89604483015288606483015287608483015203601f198101835282614202565b51906a636f6e736f6c652e6c6f675afa50604051916370a0823160e01b8352306004840152602083602481885afa9283156153ca5786936154a6575b50603a5460120392601284116153e957612710916149a86149ae92614573876144e3565b956144ad565b04926149ba82856144ad565b1161547e5790612b0f6149d06149d693856144ad565b916144e3565b60185460405163095ea7b360e01b81526001600160a01b0390911660048201526024810182905290919060208160448188885af19081156150ba5790600191869161545f575b50151503615437576001600160a01b0360185416926001600160a01b03601d54161560001461523e57506001600160a01b03600954166064420180421161522a57604051917ff305d719000000000000000000000000000000000000000000000000000000008352600483015283602483015285604483015282606483015230608483015260a482015260608160c48185885af180156150ba57908592916151fb575b507f7cd5ab40640401d656ba26a3b39a4ba340153acc6bcf268c2610b5801be8ef6160406001600160a01b0360185416926001600160a01b03600954169582519182526020820152a45b604051907fc45a0155000000000000000000000000000000000000000000000000000000008252602082600481845afa9182156151475783926151da575b506001600160a01b0360095416906001600160a01b03601d541680156000146151c257506020600491604051928380927fad5c46480000000000000000000000000000000000000000000000000000000082525afa908115614e86576020926001600160a01b0380959360449388916151a5575b50935b60405196879586947fe6a439050000000000000000000000000000000000000000000000000000000086526004860152166024840152165afa908115614f5f57906001600160a01b03918391615186575b507fffffffffffffffffffffff0000000000000000000000000000000000000000ff74ffffffffffffffffffffffffffffffffffffffff006006549260081b169116178060065560081c16604051906370a0823160e01b8252306004830152602082602481845afa918215615147578392615152575b5060206001600160a01b03603954169160e46001600160a01b0386541691866008549560405196879586947fc476b4850000000000000000000000000000000000000000000000000000000086526004860152602485015288604485015260648085015260848401528160a48401528160c48401525af190811561514757614d4092916001600160a01b03918591615128575b5016806001600160a01b031960075416176007556001600160a01b0360065460081c16615a1d565b601d546001600160a01b031680159081156150c55747915b60ff602d5460081c16614e91575b5050506001600160a01b03601d54168015600014614e0a57506001600160a01b038154164790814710614de2578280809381935af1614da3615d38565b5015614dba575b50600460ff196006541617600655565b807f6090361a0000000000000000000000000000000000000000000000000000000060049252fd5b6004837ff4d678b8000000000000000000000000000000000000000000000000000000008152fd5b6001600160a01b0382541690604051916370a0823160e01b8352306004840152602083602481855afa918215614e86578492614e50575b614e4b9350615a1d565b614daa565b91506020833d602011614e7e575b81614e6b60209383614202565b81010312611a7357614e4b925191614e41565b3d9150614e5e565b6040513d86823e3d90fd5b15614fa557506001600160a01b03603954166040517f67dba64b000000000000000000000000000000000000000000000000000000008152602081600481855afa908115614e86579083918591614f6e575b5061271091614ef1916144ad565b0491813b15614f6a57906024849260405194859384927fe7cb4bcb00000000000000000000000000000000000000000000000000000000845260048401525af18015614f5f57908291614f4a575b50505b388080614d66565b81614f5491614202565b6145fe578038614f3f565b6040513d84823e3d90fd5b8380fd5b9150506020813d602011614f9d575b81614f8a60209383614202565b81010312611a7357518290612710614ee3565b3d9150614f7d565b6001600160a01b03603954166040517f67dba64b000000000000000000000000000000000000000000000000000000008152602081600481855afa9081156150ba57908491869161507f575b5061500461500b949392612710926144ad565b0491615a1d565b6001600160a01b036039541690813b1561507b5782916024839260405194859384927fe7cb4bcb00000000000000000000000000000000000000000000000000000000845260048401525af18015614f5f57829061506b575b5050614f42565b61507491614202565b3881615064565b8280fd5b9150506020813d6020116150b2575b8161509b60209383614202565b810103126150ae57518390615004614ff1565b8480fd5b3d915061508e565b6040513d87823e3d90fd5b6040516370a0823160e01b8152306004820152602081602481855afa908115614e865784916150f6575b5091614d58565b90506020813d602011615120575b8161511160209383614202565b81010312614f6a5751386150ef565b3d9150615104565b615141915060203d602011613a4357613a358183614202565b38614d18565b6040513d85823e3d90fd5b9091506020813d60201161517e575b8161516e60209383614202565b8101031261507b57519038614c85565b3d9150615161565b61519f915060203d602011613a4357613a358183614202565b38614c0f565b6151bc9150863d8811613a4357613a358183614202565b38614bbb565b6001600160a01b039391506020928460449293614bbe565b6151f491925060203d602011613a4357613a358183614202565b9038614b47565b61521c9060603d606011615223575b6152148183614202565b8101906146d4565b5050614abf565b503d61520a565b602486634e487b7160e01b81526011600452fd5b919060405163095ea7b360e01b8152846004820152600019602482015260208160448189885af180156153ca5761541a575b508460206001600160a01b03601d541660446001600160a01b0360185416604051948593849263095ea7b360e01b8452600484015260001960248401525af180156153ca576153fd575b506001600160a01b03601d5416603b54601203601281116153e9576152e16152e7916144e3565b836144f1565b60644201908142116153d557604051927fe8e33700000000000000000000000000000000000000000000000000000000008452866004850152602484015284604484015260648301528660848301528660a48301523060c483015260e48201526060816101048189895af180156153ca576153ab575b507f7cd5ab40640401d656ba26a3b39a4ba340153acc6bcf268c2610b5801be8ef6160406001600160a01b0360185416926001600160a01b03601d54169482519182526020820152a4614b09565b6153c39060603d606011615223576152148183614202565b505061535d565b6040513d88823e3d90fd5b602488634e487b7160e01b81526011600452fd5b602487634e487b7160e01b81526011600452fd5b6154159060203d602011610a7057610a618183614202565b6152ba565b6154329060203d602011610a7057610a618183614202565b615270565b6004847f7d072847000000000000000000000000000000000000000000000000000000008152fd5b615478915060203d602011610a7057610a618183614202565b38614a1c565b6004857fc4961dd1000000000000000000000000000000000000000000000000000000008152fd5b9092506020813d6020116154d6575b816154c260209383614202565b810103126154d257519138614984565b8580fd5b3d91506154b5565b9050603b546012036012811161550157906145736154fb926144e3565b38614858565b602484634e487b7160e01b81526011600452fd5b6020602491604051928380926370a0823160e01b82523060048301525afa908115614e86578491615547575b50614850565b90506020813d602011615571575b8161556260209383614202565b81010312614f6a575138615541565b3d9150615555565b506108fc61481b565b6148389392509061559f916001600160a01b036023541690615a1d565b614826565b6004847f94a4e8f4000000000000000000000000000000000000000000000000000000008152fd5b9050601954603b54601203601281116153e95790612b0f6155ec926144e3565b113861478e565b6040516370a0823160e01b8152306004820152602081602481855afa9081156150ba578591615623575b50614784565b90506020813d60201161564d575b8161563e60209383614202565b810103126150ae57513861561d565b3d9150615631565b61565d614511565b601055615668614511565b600f5561476d565b5061436d600360ff196006541617600655565b6004827ff08d7fd2000000000000000000000000000000000000000000000000000000008152fd5b602483634e487b7160e01b81526021600452fd5b6004847f894d929f000000000000000000000000000000000000000000000000000000008152fd5b50508260028214614741565b602484634e487b7160e01b81526021600452fd5b6004827f1e77a2d7000000000000000000000000000000000000000000000000000000008152fd5b50600d544211614721565b805182101561574e5760209160051b010190565b634e487b7160e01b600052603260045260246000fd5b6001600160a01b0360245416906025549161577e83614297565b9161578c6040519384614202565b83835261579884614297565b90601f1960208501920136833783511561574e576001600160a01b03168152916157c184614297565b926157cf6040519485614202565b8484526157db85614297565b90601f1960208601920136833760005b86811061598157506040519485937f4e1273f40000000000000000000000000000000000000000000000000000000085526044850190604060048701525180915260648501929060005b81811061595f57505050602090600319858403016024860152519182815201919060005b8181106159465750505091818060009403915afa9081156144a1576000916158b6575b506000916000915b81831061589357505050151590565b9091926158ad6001916158a6868561573a565b51906146c7565b93019190615884565b3d8083833e6158c58183614202565b81019060208183031261507b5780519067ffffffffffffffff8211614f6a570181601f8201121561507b578051906158fc82614297565b9361590a6040519586614202565b82855260208086019360051b8301019384116145fe5750602001905b828210615936575050503861587c565b8151815260209182019101615926565b8251845286945060209384019390920191600101615859565b82516001600160a01b0316855288965060209485019490920191600101615835565b8080615993600193899596979961573a565b520194929190946157eb565b60001981146144c05760010190565b6001600160a01b0380600054921691826001600160a01b0319821617600055167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a3565b906000905b60028210615a0757505050565b60208060019285518152019301910190916159fa565b6040517fa9059cbb0000000000000000000000000000000000000000000000000000000060208201526001600160a01b0392909216602483015260448083019390935291815261436d91610c6c606483614202565b6001600160a01b03600054163303615a8657565b7f118cdaa7000000000000000000000000000000000000000000000000000000006000523360045260246000fd5b90816020910312611a73575160ff81168103611a735790565b600460206001600160a01b0360095416604051928380927f313ce5670000000000000000000000000000000000000000000000000000000082525afa80156144a15760ff91600091615cde575b5016603a556012603b556001600160a01b03601d541680615c62575b50600b546109c481028181046109c414821517156144c05761271090048210615c3357808211615c09578211615bdf578315615bb5578415615b8b5780602a55602b55602c55602e5580602f55603055603155565b7f3dd55d8f0000000000000000000000000000000000000000000000000000000060005260046000fd5b7f53c703b10000000000000000000000000000000000000000000000000000000060005260046000fd5b7fa6b78c230000000000000000000000000000000000000000000000000000000060005260046000fd5b7ff2e3f3740000000000000000000000000000000000000000000000000000000060005260046000fd5b7f84cc2e1d00000000000000000000000000000000000000000000000000000000600052601960045260246000fd5b6020600491604051928380927f313ce5670000000000000000000000000000000000000000000000000000000082525afa80156144a15760ff91600091615caf575b5016603b5538615b36565b615cd1915060203d602011615cd7575b615cc98183614202565b810190615ab4565b38615ca4565b503d615cbf565b615cf7915060203d602011615cd757615cc98183614202565b38615b1a565b600260015414615d0e576002600155565b7f3ee5aeb50000000000000000000000000000000000000000000000000000000060005260046000fd5b3d15615d63573d90615d4982614234565b91615d576040519384614202565b82523d6000602084013e565b606090565b6000806001600160a01b03615d9293169360208151910182865af1615d8b615d38565b9083615df0565b8051908115159182615dd5575b5050615da85750565b7f5274afe70000000000000000000000000000000000000000000000000000000060005260045260246000fd5b615de892506020809183010191016146af565b153880615d9f565b90615e2f5750805115615e0557805190602001fd5b7f1425ea420000000000000000000000000000000000000000000000000000000060005260046000fd5b81511580615e77575b615e40575090565b6001600160a01b03907f9996b315000000000000000000000000000000000000000000000000000000006000521660045260246000fd5b50803b15615e3856fea2646970667358221220a8b572795084cb20d387c127aafb5cc34b64083b7f51a330edbf553bf42daea364736f6c634300081c0033",
  "devdoc": {
    "errors": {
      "AddressEmptyCode(address)": [
        {
          "details": "There's no code at `target` (it is not a contract)."
        }
      ],
      "AddressInsufficientBalance(address)": [
        {
          "details": "The ETH balance of the account is not enough to perform the operation."
        }
      ],
      "FailedInnerCall()": [
        {
          "details": "A call to an address target failed. The target may have reverted."
        }
      ],
      "InvalidInitialization()": [
        {
          "details": "The contract is already initialized."
        }
      ],
      "NotInitializing()": [
        {
          "details": "The contract is not initializing."
        }
      ],
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ],
      "ReentrancyGuardReentrantCall()": [
        {
          "details": "Unauthorized reentrant call."
        }
      ],
      "SafeERC20FailedOperation(address)": [
        {
          "details": "An operation with an ERC20 token failed."
        }
      ]
    },
    "events": {
      "Initialized(uint64)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      }
    },
    "kind": "dev",
    "methods": {
      "constructor": {
        "custom:oz-upgrades-unsafe-allow": "constructor"
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "withdrawFunds()": {
        "details": "Withdraw tokens or coin by user after end time If this project does not reach softcap, return their funds otherwise get tokens "
      },
      "withdrawOwnerTokens()": {
        "details": "Withdraw owner tokens If this project does not reach softcap"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "constructor": {
        "notice": "Do not leave an implementation contract uninitialized. An uninitialized implementation contract can be taken over by an attacker, which may impact the proxy.  To prevent the implementation contract from being used, you should invoke the _disableInitializers function in the constructor to automatically lock it when it is deployed"
      },
      "finalizeAndSetupLiquidity()": {
        "notice": "Setup liquidity and transfer all amounts according to defined percents, if softcap not reached set Refunded flag"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 8,
        "contract": "contracts/Campaign.sol:Campaign",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 1333,
        "contract": "contracts/Campaign.sol:Campaign",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 3803,
        "contract": "contracts/Campaign.sol:Campaign",
        "label": "useWhiteList",
        "offset": 0,
        "slot": "2",
        "type": "t_bool"
      },
      {
        "astId": 3805,
        "contract": "contracts/Campaign.sol:Campaign",
        "label": "hasKYC",
        "offset": 1,
        "slot": "2",
        "type": "t_bool"
      },
      {
        "astId": 3808,
        "contract": "contracts/Campaign.sol:Campaign",
        "label": "totalTeamTokensToBeVested",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 3810,
        "contract": "contracts/Campaign.sol:Campaign",
        "label": "_isAudited",
        "offset": 0,
        "slot": "4",
        "type": "t_bool"
      },
      {
        "astId": 3812,
        "contract": "contracts/Campaign.sol:Campaign",
        "label": "auditUrl",
        "offset": 0,
        "slot": "5",
        "type": "t_string_storage"
      },
      {
        "astId": 3817,
        "contract": "contracts/Campaign.sol:Campaign",
        "label": "status",
        "offset": 0,
        "slot": "6",
        "type": "t_enum(CampaignStatus)3801"
      },
      {
        "astId": 3819,
        "contract": "contracts/Campaign.sol:Campaign",
        "label": "liquidityPairAddress",
        "offset": 1,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 3821,
        "contract": "contracts/Campaign.sol:Campaign",
        "label": "liquidityPairLockerAddress",
        "offset": 0,
        "slot": "7",
        "type": "t_address"
      },
      {
        "astId": 3823,
        "contract": "contracts/Campaign.sol:Campaign",
        "label": "liquidityReleaseInDays",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 3826,
        "contract": "contracts/Campaign.sol:Campaign",
        "label": "saleInfo",
        "offset": 0,
        "slot": "9",
        "type": "t_struct(CampaignSaleInfo)3795_storage"
      },
      {
        "astId": 3828,
        "contract": "contracts/Campaign.sol:Campaign",
        "label": "dexRouterAddress",
        "offset": 0,
        "slot": "24",
        "type": "t_address"
      },
      {
        "astId": 3830,
        "contract": "contracts/Campaign.sol:Campaign",
        "label": "totalCoinReceived",
        "offset": 0,
        "slot": "25",
        "type": "t_uint256"
      },
      {
        "astId": 3832,
        "contract": "contracts/Campaign.sol:Campaign",
        "label": "totalCoinInTierZero",
        "offset": 0,
        "slot": "26",
        "type": "t_uint256"
      },
      {
        "astId": 3834,
        "contract": "contracts/Campaign.sol:Campaign",
        "label": "totalCoinInTierOne",
        "offset": 0,
        "slot": "27",
        "type": "t_uint256"
      },
      {
        "astId": 3836,
        "contract": "contracts/Campaign.sol:Campaign",
        "label": "totalCoinInTierTwo",
        "offset": 0,
        "slot": "28",
        "type": "t_uint256"
      },
      {
        "astId": 3842,
        "contract": "contracts/Campaign.sol:Campaign",
        "label": "purchaseTokenAddress",
        "offset": 0,
        "slot": "29",
        "type": "t_address"
      },
      {
        "astId": 3844,
        "contract": "contracts/Campaign.sol:Campaign",
        "label": "totalParticipants",
        "offset": 0,
        "slot": "30",
        "type": "t_uint256"
      },
      {
        "astId": 3847,
        "contract": "contracts/Campaign.sol:Campaign",
        "label": "zsalesPlatformDetails",
        "offset": 0,
        "slot": "31",
        "type": "t_struct(PlatFormDetails)3705_storage"
      },
      {
        "astId": 3849,
        "contract": "contracts/Campaign.sol:Campaign",
        "label": "_campaignFactoryAddress",
        "offset": 0,
        "slot": "38",
        "type": "t_address"
      },
      {
        "astId": 3852,
        "contract": "contracts/Campaign.sol:Campaign",
        "label": "tier1TimeLineInHours",
        "offset": 0,
        "slot": "39",
        "type": "t_uint256"
      },
      {
        "astId": 3855,
        "contract": "contracts/Campaign.sol:Campaign",
        "label": "tier0TimeLineInHours",
        "offset": 0,
        "slot": "40",
        "type": "t_uint256"
      },
      {
        "astId": 3858,
        "contract": "contracts/Campaign.sol:Campaign",
        "label": "ownerHasWithdrawnTokens",
        "offset": 0,
        "slot": "41",
        "type": "t_bool"
      },
      {
        "astId": 3860,
        "contract": "contracts/Campaign.sol:Campaign",
        "label": "tierZerohardCap",
        "offset": 0,
        "slot": "42",
        "type": "t_uint256"
      },
      {
        "astId": 3862,
        "contract": "contracts/Campaign.sol:Campaign",
        "label": "tierOnehardCap",
        "offset": 0,
        "slot": "43",
        "type": "t_uint256"
      },
      {
        "astId": 3864,
        "contract": "contracts/Campaign.sol:Campaign",
        "label": "tierTwohardCap",
        "offset": 0,
        "slot": "44",
        "type": "t_uint256"
      },
      {
        "astId": 3866,
        "contract": "contracts/Campaign.sol:Campaign",
        "label": "useTokenVesting",
        "offset": 0,
        "slot": "45",
        "type": "t_bool"
      },
      {
        "astId": 3868,
        "contract": "contracts/Campaign.sol:Campaign",
        "label": "useRaisedFundsVesting",
        "offset": 1,
        "slot": "45",
        "type": "t_bool"
      },
      {
        "astId": 3870,
        "contract": "contracts/Campaign.sol:Campaign",
        "label": "minAllocationPerUser",
        "offset": 0,
        "slot": "46",
        "type": "t_uint256"
      },
      {
        "astId": 3872,
        "contract": "contracts/Campaign.sol:Campaign",
        "label": "maxAllocationPerUserTierZero",
        "offset": 0,
        "slot": "47",
        "type": "t_uint256"
      },
      {
        "astId": 3874,
        "contract": "contracts/Campaign.sol:Campaign",
        "label": "maxAllocationPerUserTierOne",
        "offset": 0,
        "slot": "48",
        "type": "t_uint256"
      },
      {
        "astId": 3876,
        "contract": "contracts/Campaign.sol:Campaign",
        "label": "maxAllocationPerUserTierTwo",
        "offset": 0,
        "slot": "49",
        "type": "t_uint256"
      },
      {
        "astId": 3878,
        "contract": "contracts/Campaign.sol:Campaign",
        "label": "_whitelistTierTwoMerkleRoot",
        "offset": 0,
        "slot": "50",
        "type": "t_bytes32"
      },
      {
        "astId": 3880,
        "contract": "contracts/Campaign.sol:Campaign",
        "label": "campaignKey",
        "offset": 0,
        "slot": "51",
        "type": "t_uint256"
      },
      {
        "astId": 3884,
        "contract": "contracts/Campaign.sol:Campaign",
        "label": "buyInZeroTier",
        "offset": 0,
        "slot": "52",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 3888,
        "contract": "contracts/Campaign.sol:Campaign",
        "label": "buyInOneTier",
        "offset": 0,
        "slot": "53",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 3892,
        "contract": "contracts/Campaign.sol:Campaign",
        "label": "buyInTwoTier",
        "offset": 0,
        "slot": "54",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 3896,
        "contract": "contracts/Campaign.sol:Campaign",
        "label": "buyInAllTiers",
        "offset": 0,
        "slot": "55",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 3899,
        "contract": "contracts/Campaign.sol:Campaign",
        "label": "_dexLockerFactory",
        "offset": 0,
        "slot": "56",
        "type": "t_contract(DexLockerFactory)8858"
      },
      {
        "astId": 3902,
        "contract": "contracts/Campaign.sol:Campaign",
        "label": "_dexLocker",
        "offset": 0,
        "slot": "57",
        "type": "t_contract(IDexLocker)8227"
      },
      {
        "astId": 3904,
        "contract": "contracts/Campaign.sol:Campaign",
        "label": "tokenDecimals",
        "offset": 0,
        "slot": "58",
        "type": "t_uint256"
      },
      {
        "astId": 3906,
        "contract": "contracts/Campaign.sol:Campaign",
        "label": "purchaseCoinDecimals",
        "offset": 0,
        "slot": "59",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(DexLockerFactory)8858": {
        "encoding": "inplace",
        "label": "contract DexLockerFactory",
        "numberOfBytes": "20"
      },
      "t_contract(IDexLocker)8227": {
        "encoding": "inplace",
        "label": "contract IDexLocker",
        "numberOfBytes": "20"
      },
      "t_enum(CampaignStatus)3801": {
        "encoding": "inplace",
        "label": "enum Campaign.CampaignStatus",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(CampaignSaleInfo)3795_storage": {
        "encoding": "inplace",
        "label": "struct Campaign.CampaignSaleInfo",
        "members": [
          {
            "astId": 3766,
            "contract": "contracts/Campaign.sol:Campaign",
            "label": "tokenAddress",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 3768,
            "contract": "contracts/Campaign.sol:Campaign",
            "label": "softCap",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 3770,
            "contract": "contracts/Campaign.sol:Campaign",
            "label": "hardCap",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 3772,
            "contract": "contracts/Campaign.sol:Campaign",
            "label": "saleStartTime",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 3774,
            "contract": "contracts/Campaign.sol:Campaign",
            "label": "saleEndTime",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 3776,
            "contract": "contracts/Campaign.sol:Campaign",
            "label": "liquidityPercent",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 3778,
            "contract": "contracts/Campaign.sol:Campaign",
            "label": "listRate",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 3780,
            "contract": "contracts/Campaign.sol:Campaign",
            "label": "dexListRate",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          },
          {
            "astId": 3782,
            "contract": "contracts/Campaign.sol:Campaign",
            "label": "logoUrl",
            "offset": 0,
            "slot": "8",
            "type": "t_string_storage"
          },
          {
            "astId": 3784,
            "contract": "contracts/Campaign.sol:Campaign",
            "label": "desc",
            "offset": 0,
            "slot": "9",
            "type": "t_string_storage"
          },
          {
            "astId": 3786,
            "contract": "contracts/Campaign.sol:Campaign",
            "label": "website",
            "offset": 0,
            "slot": "10",
            "type": "t_string_storage"
          },
          {
            "astId": 3788,
            "contract": "contracts/Campaign.sol:Campaign",
            "label": "twitter",
            "offset": 0,
            "slot": "11",
            "type": "t_string_storage"
          },
          {
            "astId": 3790,
            "contract": "contracts/Campaign.sol:Campaign",
            "label": "telegram",
            "offset": 0,
            "slot": "12",
            "type": "t_string_storage"
          },
          {
            "astId": 3792,
            "contract": "contracts/Campaign.sol:Campaign",
            "label": "discord",
            "offset": 0,
            "slot": "13",
            "type": "t_string_storage"
          },
          {
            "astId": 3794,
            "contract": "contracts/Campaign.sol:Campaign",
            "label": "tokensOnSale",
            "offset": 0,
            "slot": "14",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "480"
      },
      "t_struct(PlatFormDetails)3705_storage": {
        "encoding": "inplace",
        "label": "struct PlatFormDetails",
        "members": [
          {
            "astId": 3692,
            "contract": "contracts/Campaign.sol:Campaign",
            "label": "admin",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 3694,
            "contract": "contracts/Campaign.sol:Campaign",
            "label": "zsalesTokenAddress",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 3696,
            "contract": "contracts/Campaign.sol:Campaign",
            "label": "zsaleFee",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 3698,
            "contract": "contracts/Campaign.sol:Campaign",
            "label": "zsaleTokenFee",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 3700,
            "contract": "contracts/Campaign.sol:Campaign",
            "label": "zsalesWalletAddress",
            "offset": 0,
            "slot": "4",
            "type": "t_address"
          },
          {
            "astId": 3702,
            "contract": "contracts/Campaign.sol:Campaign",
            "label": "zsalesNFTTokenAddress",
            "offset": 0,
            "slot": "5",
            "type": "t_address"
          },
          {
            "astId": 3704,
            "contract": "contracts/Campaign.sol:Campaign",
            "label": "maxTiersToCheckForNFT",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}